<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SpringBoot</title>
    <url>/2019/07/21/SpringBoot/</url>
    <content><![CDATA[<p>SpringBoot in learning</p>
<a id="more"></a>





<h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><p><a href="https://github.com/pangerger/springboot-learning-example">https://github.com/pangerger/springboot-learning-example</a></p>
<h1 id="error"><a href="#error" class="headerlink" title="error"></a>error</h1><h2 id="idea-中所有注解无效"><a href="#idea-中所有注解无效" class="headerlink" title="idea 中所有注解无效"></a>idea 中所有注解无效</h2><p>classpath有问题，创建项目时出错。</p>
<h1 id="每日搜索"><a href="#每日搜索" class="headerlink" title="每日搜索"></a>每日搜索</h1><h2 id="hashmap为何查找那么快"><a href="#hashmap为何查找那么快" class="headerlink" title="hashmap为何查找那么快"></a>hashmap为何查找那么快</h2><p>O(1)???</p>
<p><a href="http://www.51gjie.com/java/679.html">http://www.51gjie.com/java/679.html</a></p>
<p>看图：<a href="http://www.51gjie.com/Images/image1/lo5salay.lco.jpg">http://www.51gjie.com/Images/image1/lo5salay.lco.jpg</a></p>
<h1 id="idea"><a href="#idea" class="headerlink" title="idea"></a>idea</h1><h2 id="idea-中导入已有项目"><a href="#idea-中导入已有项目" class="headerlink" title="idea 中导入已有项目"></a>idea 中导入已有项目</h2><p>直到点击pom.xml文件为止</p>
<p><a href="https://blog.csdn.net/Happy_wu/article/details/80423150">https://blog.csdn.net/Happy_wu/article/details/80423150</a></p>
<h2 id="取消对某文件的索引"><a href="#取消对某文件的索引" class="headerlink" title="取消对某文件的索引"></a>取消对某文件的索引</h2><p><a href="https://zhuanlan.zhihu.com/p/36305203">https://zhuanlan.zhihu.com/p/36305203</a></p>
<blockquote>
<p>project struct中 model里设置。</p>
</blockquote>
<h1 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h1><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><blockquote>
<p>token + redis + 网关</p>
<blockquote>
<p>token本身是一个字符串，服务器生成发给客户端</p>
<p>客户端每次请求都带上这个token，服务端校验它。</p>
</blockquote>
</blockquote>
<h3 id="初步了解"><a href="#初步了解" class="headerlink" title="初步了解"></a>初步了解</h3><p><a href="https://www.jianshu.com/p/5b914dd6a4ef">https://www.jianshu.com/p/5b914dd6a4ef</a></p>
<blockquote>
<p>一个tokenController</p>
<p>ITokenService及其实现类TokenService</p>
<p>拦截器</p>
</blockquote>
<p>====</p>
<p><a href="https://www.zhihu.com/question/274566992">https://www.zhihu.com/question/274566992</a></p>
<p>jwt及redis+token</p>
<p><a href="https://www.jianshu.com/p/5b914dd6a4ef">https://www.jianshu.com/p/5b914dd6a4ef</a></p>
<blockquote>
<h1 id="服务网关-Zuul-与-Redis-结合实现-Token-权限校验s"><a href="#服务网关-Zuul-与-Redis-结合实现-Token-权限校验s" class="headerlink" title="服务网关 Zuul 与 Redis 结合实现 Token 权限校验s"></a><a href="https://segmentfault.com/a/1190000017058010">服务网关 Zuul 与 Redis 结合实现 Token 权限校验</a>s</h1><p><a href="https://segmentfault.com/a/1190000017058010">https://segmentfault.com/a/1190000017058010</a></p>
</blockquote>
<h2 id="什么是token"><a href="#什么是token" class="headerlink" title="什么是token"></a>什么是token</h2><blockquote>
<p>英文：代价卷，礼卷</p>
<p>计算机术语：令牌    </p>
</blockquote>
<p><a href="https://blog.csdn.net/daimengs/article/details/81088172">https://blog.csdn.net/daimengs/article/details/81088172</a></p>
<blockquote>
<p>token的意思是“令牌”，是服务端生成的一串字符串，作为客户端进行请求的一个标识。</p>
<p>token的使用的是https???</p>
<p>在网络层面上token使用明文传输的话是非常危险的，所以一定要使用HTTPS协议。</p>
</blockquote>
<h2 id="Base64加密"><a href="#Base64加密" class="headerlink" title="Base64加密"></a>Base64加密</h2><p><a href="https://www.zhihu.com/question/38036594/answer/74917716">https://www.zhihu.com/question/38036594/answer/74917716</a></p>
<blockquote>
<p>用64个可读字符进行编码，来表示二进制。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数字：<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>，共<span class="number">10</span>个小写字母：a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z，共<span class="number">26</span>个大写字母：A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z，共<span class="number">26</span>个</span><br><span class="line">+以及斜杠/</span><br></pre></td></tr></table></figure>

<p><strong>常用于在互联网中传输字节</strong></p>
<blockquote>
<p><a href="https://blog.csdn.net/qq_20545367/article/details/79538530">https://blog.csdn.net/qq_20545367/article/details/79538530</a></p>
<p>Base64一般用于在HTTP协议下传输二进制数据，由于HTTP协议是文本协议，所以在HTTP协议下传输二进制数据需要将二进制数据转换为字符数据。然而直接转换是不行的。因为网络传输只能传输可打印字符。什么是可打印字符？在ASCII码中规定，0<del>31、127这33个字符属于控制字符，32</del>126这95个字符属于可打印字符，也就是说网络传输只能传输这95个字符，不在这个范围内的字符无法传输。那么该怎么才能传输其他字符呢？其中一种方式就是使用Base64。</p>
</blockquote>
<hr>
<p>问题？  </p>
<blockquote>
<p>http 可传输字符？？</p>
<p>怎么编码？？？ 什么是用=补零。</p>
</blockquote>
<p><a href="http://linuxsogood.org/1227.html">http://linuxsogood.org/1227.html</a></p>
<blockquote>
<p>Base64编码仅用于一个可打印ASCII字符就可以安全转换任何进进制数据，它常用于对电子邮件附件进行编码，使其通过SMTP安全传输。它还可以用在基本HTTP验证机制中对用户证书进行编码</p>
<p>许多Web应用程序利用Base64编码在cookie与其他参数中传递二进制数据，甚至用它打乱敏感数据以防止即使是细微的修改。应该总是留意并解码发送到客户端的任何Base64数据，由于这些数据使用特殊的字符集，而且有时会在字符串末尾添加补足字符，因此可以轻易辨别出Base64编码的字符串</p>
</blockquote>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//使用java自带的base64编码</span></span><br><span class="line">==============================================</span><br><span class="line">  <span class="keyword">import</span> java.util.Base64;</span><br><span class="line">  <span class="comment">// 编码</span></span><br><span class="line">        String encode = Base64.getEncoder().encodeToString(<span class="string">&quot;So&quot;</span>.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        System.out.println(encode);</span><br><span class="line">        <span class="comment">// 解码</span></span><br><span class="line">        <span class="keyword">byte</span>[] decode = Base64.getDecoder().decode(encode);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(decode, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line"> --------------------- </span><br><span class="line"> 版权声明：本文为CSDN博主「艾华生」的原创文章，遵循CC <span class="number">4.0</span> by-sa版权协议，转载请附上原文出处链接及本声明。</span><br><span class="line"> 原文链接：https:<span class="comment">//blog.csdn.net/qq_20545367/article/details/79538530</span></span><br><span class="line"> </span><br><span class="line">====================</span><br><span class="line">    </span><br><span class="line">    </span><br></pre></td></tr></table></figure>


<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<p> API 接口设计中Token设计讨论<a href="https://www.jianshu.com/p/9fdcfd950292">https://www.jianshu.com/p/9fdcfd950292</a><br><a href="http://linuxsogood.org/1227.html">http://linuxsogood.org/1227.html</a></p>
</blockquote>
<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="mysql优化"><a href="#mysql优化" class="headerlink" title="mysql优化"></a>mysql优化</h2><blockquote>
<p><a href="https://dbaplus.cn/news-155-1531-1.html">https://dbaplus.cn/news-155-1531-1.html</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from t_message limit 10;</span><br><span class="line"></span><br><span class="line">...省略结果集</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">mysql&gt; show status like &#39;last_query_cost&#39;;</span><br><span class="line"></span><br><span class="line">+-----------------+-------------+</span><br><span class="line"></span><br><span class="line">| Variable_name   | Value       |</span><br><span class="line"></span><br><span class="line">+-----------------+-------------+</span><br><span class="line"></span><br><span class="line">| Last_query_cost | 6391.799000 |</span><br><span class="line"></span><br><span class="line">+-----------------+-------------+</span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="mysql-mvcc"><a href="#mysql-mvcc" class="headerlink" title="mysql mvcc"></a>mysql mvcc</h3><blockquote>
<p><a href="https://blog.csdn.net/whoamiyang/article/details/51901888">https://blog.csdn.net/whoamiyang/article/details/51901888</a></p>
</blockquote>
<h1 id="java-se"><a href="#java-se" class="headerlink" title="java se"></a>java se</h1><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><blockquote>
<p>使用 List.foreach()方法或foreach方法来操作add  remove是会出异常的。</p>
<p>所以应该使用迭代器的方式来做。</p>
<p><a href="https://zacard.net/2016/01/07/list-remove/">https://zacard.net/2016/01/07/list-remove/</a></p>
</blockquote>
<h2 id="正则表达式，判断是否含有中文"><a href="#正则表达式，判断是否含有中文" class="headerlink" title="正则表达式，判断是否含有中文"></a>正则表达式，判断是否含有中文</h2><blockquote>
<p><a href="https://blog.csdn.net/z69183787/article/details/53162015">https://blog.csdn.net/z69183787/article/details/53162015</a></p>
<p><a href="http://www.micmiu.com/lang/java/java-check-chinese/">http://www.micmiu.com/lang/java/java-check-chinese/</a></p>
</blockquote>
<h1 id="Spring-拦截器"><a href="#Spring-拦截器" class="headerlink" title="Spring 拦截器"></a>Spring 拦截器</h1><p><strong>HandlerInterceptor</strong></p>
<blockquote>
<p><a href="https://www.jianshu.com/p/dc5cc2e25ab2">https://www.jianshu.com/p/dc5cc2e25ab2</a></p>
<p>三个重载方法</p>
</blockquote>
]]></content>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/10/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h1 id="ok-你好"><a href="#ok-你好" class="headerlink" title="ok 你好"></a>ok 你好</h1><h2 id="Quick-Start-你好"><a href="#Quick-Start-你好" class="headerlink" title="Quick Start 你好"></a>Quick Start 你好</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="hello-可"><a href="#hello-可" class="headerlink" title="hello 可"></a>hello 可</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Flux&lt;RouteDefinition&gt; <span class="title">getRouteDefinitions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DiscoveryLocatorProperties properties = getProperties();</span><br><span class="line"></span><br><span class="line">    SpelExpressionParser parser = <span class="keyword">new</span> SpelExpressionParser();</span><br><span class="line">    Expression includeExpr = parser.parseExpression(properties.getIncludeExpression());</span><br><span class="line">    Expression urlExpr = parser.parseExpression(properties.getUrlExpression());</span><br><span class="line"></span><br><span class="line">    Predicate&lt;ServiceInstance&gt; includePredicate;</span><br><span class="line">    <span class="keyword">if</span> (isIncludeAllExpression(properties.getIncludeExpression())) &#123;</span><br><span class="line">        <span class="comment">// 包含全部</span></span><br><span class="line">        includePredicate = instance -&gt; <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        includePredicate = instance -&gt; &#123;</span><br><span class="line">            Boolean include = includeExpr.getValue(evaluationContext, instance, Boolean.class);</span><br><span class="line">            <span class="keyword">if</span> (include == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> include.booleanValue();</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>mybatis</title>
    <url>/2020/05/28/mybatis/</url>
    <content><![CDATA[<p>使用 mybatis 常改的地方  </p>
<a id="more"></a>

<h1 id="常用法"><a href="#常用法" class="headerlink" title="常用法"></a>常用法</h1><h2 id="集合-foreach"><a href="#集合-foreach" class="headerlink" title="集合 foreach"></a>集合 foreach</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xml 为：普通in用法</span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;record.typeList != null and record.typeList.size()&gt;0 &quot;</span>&gt;</span></span><br><span class="line">    AND type in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;record.typeList&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">item</span>=<span class="string">&quot;type&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        #&#123;type&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">sql：</span><br><span class="line">and type in(1,2,3)</span><br><span class="line"></span><br><span class="line">==============================</span><br><span class="line">like foreach:</span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;record.typeList != null and record.typeList.size()&gt;0 &quot;</span>&gt;</span></span><br><span class="line">    AND </span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;record.typeList&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">item</span>=<span class="string">&quot;type&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span>&gt;</span></span><br><span class="line">      type like concat(&#x27;%&#x27;,#&#123;type&#125;,&#x27;%&#x27;) </span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">sql:</span><br><span class="line">and (type like concat(&#x27;%&#x27;,1,&#x27;%&#x27;) or type like concat(&#x27;%&#x27;,2,&#x27;%&#x27;) or type like concat(&#x27;%&#x27;,3,&#x27;%&#x27;) )</span><br></pre></td></tr></table></figure>



<h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><blockquote>
<p>参数 父类 子类</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">》Food 为 父类 , Apple 为子类，子类多了一个属性叫 type</span><br><span class="line"></span><br><span class="line"><span class="comment">// mapper 接口里 </span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询记录列表</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> record</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;Food&gt; <span class="title">selectByType</span><span class="params">(<span class="meta">@Param(&quot;record&quot;)</span> Food record,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="meta">@Param(&quot;pageBegin&quot;)</span> <span class="keyword">int</span> pageBegin,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="meta">@Param(&quot;pageSize&quot;)</span> <span class="keyword">int</span> pageSize)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Service 层: 显然这是没问题的 接口要一个父类，使用时给子类</span></span><br><span class="line">Apple apple = <span class="keyword">new</span> Apple;</span><br><span class="line">apple.setType(<span class="number">1</span>);</span><br><span class="line">List&lt;Food&gt; foods = selectByType(apple,-<span class="number">1</span>,-<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">问题来了：：：：：=============》》》》》》》》》</span><br><span class="line"><span class="comment">// xml 里 record.type 为啥可以呢? 当然 我们知道 此时 record 是一个 Apple! 但它的原理是啥？？？</span></span><br><span class="line">&lt;<span class="keyword">if</span> test=<span class="string">&quot;record.type != null and record.type!=&#x27;&#x27; &quot;</span>&gt;</span><br><span class="line">    id = #&#123;record.type&#125;</span><br><span class="line">&lt;/if&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>单元测试</title>
    <url>/2020/04/02/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>mock 测试 controller </p>
<a id="more"></a>
<h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><h2 id="json-与对象的转换"><a href="#json-与对象的转换" class="headerlink" title="json 与对象的转换"></a>json 与对象的转换</h2><blockquote>
<p>详情 请看 pan.day.learn.javase.jsons.JsonChangeObject </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">String oo = <span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;  \&quot;age\&quot;: 0,\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;  \&quot;date\&quot;: \&quot;2020-03-27T01:20:49.788Z\&quot;,\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;  \&quot;dragonModelMap\&quot;: &#123;&#125;,\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;  \&quot;id\&quot;: \&quot;string\&quot;,\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;  \&quot;name\&quot;: \&quot;string\&quot;,\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;  \&quot;stringList\&quot;: [\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;    \&quot;string\&quot;\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;  ]\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DragonModel dragonModel = JSONObject.parseObject(oo, DragonModel.class);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="mock-学习"><a href="#mock-学习" class="headerlink" title="mock 学习"></a>mock 学习</h1><h2 id="Mockito"><a href="#Mockito" class="headerlink" title="Mockito"></a>Mockito</h2><h3 id="verify"><a href="#verify" class="headerlink" title="verify"></a>verify</h3><p>若没有按希望的执行则会抛异常！</p>
<blockquote>
<p>Mockito.verify (mockBean ).someMethod();表示：someMethod方法调用了一次，相当于times(1)<br> Mockito.verify (mockBean, Mockito.times(n) ).someMethod();表示：someMethod方法调用了n次<br> Mockito.verify (mockBean, Mockito.never() ).someMethod();表示：someMethod方法未执行<br> Mockito.verify (mockBean, Mockito. atLeastOnce() ).someMethod();表示：someMethod方法至少执行过一次,相当于atLeast(1)</p>
</blockquote>
<h3 id="做测试桩"><a href="#做测试桩" class="headerlink" title="做测试桩"></a>做测试桩</h3><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.hamcrest.Matchers;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.DisplayName;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mock.web.MockHttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MvcResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.setup.MockMvcBuilders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> pan.day.jpa.entity.StudentEntity;</span><br><span class="line"><span class="keyword">import</span> pan.tools.enums.HumanEnum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试 restful 风格</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RESTful</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WebApplicationContext webApplicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在每个测试方法执行之前都初始化MockMvc对象</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setupMockMvc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尝试测试一个不存在的请求 /user/1</span></span><br><span class="line"><span class="comment">     * 查询单条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@DisplayName</span> 自定义测试方法展示的名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试根据Id获取User&quot;)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">askUnWrite</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MvcResult mvcResult = mockMvc.perform(MockMvcRequestBuilders</span><br><span class="line">                <span class="comment">// 构造一个get请求</span></span><br><span class="line">                .get(<span class="string">&quot;/student/findOne/1&quot;</span>)</span><br><span class="line">                .header(<span class="string">&quot;Origin&quot;</span>, <span class="string">&quot;*&quot;</span>)</span><br><span class="line">                <span class="comment">// 请求类型 json</span></span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line"></span><br><span class="line">        )</span><br><span class="line">                <span class="comment">// 期待返回的状态码是4XX，因为我们并没有写/user/&#123;id&#125;的get接口</span></span><br><span class="line"><span class="comment">//                .andExpect(MockMvcResultMatchers.status().is4xxClientError());</span></span><br><span class="line"><span class="comment">//                .andExpect(MockMvcResultMatchers.status().is2xxSuccessful())</span></span><br><span class="line">                <span class="comment">// $.length() 将content 转成json，判断个数</span></span><br><span class="line">                .andExpect(MockMvcResultMatchers.jsonPath(<span class="string">&quot;$.length()&quot;</span>).value(<span class="number">7</span>))</span><br><span class="line">                .andExpect(MockMvcResultMatchers.jsonPath(<span class="string">&quot;$.name&quot;</span>).value(<span class="string">&quot;pan&quot;</span>))</span><br><span class="line"><span class="comment">//                .andDo(MockMvcResultHandlers.print())</span></span><br><span class="line">                <span class="comment">// 返回结果集</span></span><br><span class="line">                .andReturn();</span><br><span class="line">        MockHttpServletResponse response = mvcResult.getResponse();</span><br><span class="line">        <span class="comment">// 单个断言 过不了的话会出 AssertionError</span></span><br><span class="line">        Assert.assertEquals(<span class="number">200</span>, mvcResult.getResponse().getStatus());</span><br><span class="line">        <span class="comment">// 这里应该是一个application/json</span></span><br><span class="line">        String contentType = response.getContentType();</span><br><span class="line">        <span class="comment">// 转成json对象</span></span><br><span class="line">        JSONObject jsonObject = JSONObject.parseObject(response.getContentAsString());</span><br><span class="line">        System.out.println(contentType);</span><br><span class="line">        Assert.assertThat(jsonObject.get(<span class="string">&quot;name&quot;</span>), Matchers.is(<span class="string">&quot;pan&quot;</span>));</span><br><span class="line">        <span class="comment">// 转成具体对象</span></span><br><span class="line">        StudentEntity studentEntity = JSONObject.parseObject(response.getContentAsString(), StudentEntity.class);</span><br><span class="line">        System.out.println(studentEntity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * post请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postMock</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        StudentEntity studentEntity = <span class="keyword">new</span> StudentEntity();</span><br><span class="line">        studentEntity.setName(<span class="string">&quot;wy&quot;</span>)</span><br><span class="line">                .setAge(<span class="number">22</span>)</span><br><span class="line">                .setStatus(HumanEnum.OK)</span><br><span class="line">                .setCreateTime(<span class="keyword">new</span> Date())</span><br><span class="line">                .setCourseNumber(<span class="string">&quot;classOne&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String jsonString = JSON.toJSONString(studentEntity);</span><br><span class="line">        MvcResult mvcResult = mockMvc.perform(MockMvcRequestBuilders</span><br><span class="line">                        <span class="comment">// MockMvcRequestBuilders.post(&quot;/url&quot;) ： 构造一个post请求</span></span><br><span class="line">                        .post(<span class="string">&quot;/student/save&quot;</span>)</span><br><span class="line">                        <span class="comment">// 可使用此处添加token信息</span></span><br><span class="line">                        .header(<span class="string">&quot;Origin&quot;</span>, <span class="string">&quot;*&quot;</span>)</span><br><span class="line">                        .accept(MediaType.APPLICATION_JSON)</span><br><span class="line">                        <span class="comment">// 传参,因为后端是@RequestBody所以这里直接传json字符串</span></span><br><span class="line">                        .content(jsonString)</span><br><span class="line">                        .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">                <span class="comment">// 期望</span></span><br><span class="line">        )</span><br><span class="line">                .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">                .andReturn();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>






<h1 id="SpringBoot-测试Controller"><a href="#SpringBoot-测试Controller" class="headerlink" title="SpringBoot 测试Controller"></a>SpringBoot 测试Controller</h1><h2 id="MockHttpServlet"><a href="#MockHttpServlet" class="headerlink" title="MockHttpServlet"></a>MockHttpServlet</h2><blockquote>
<p>实现了 HttpServletRequest HttpServletResponse<br>可以设置请求头，一些属性等，可以模拟接收 HttpServletRequest 来获取一些信息。<br>但是并不能发起一个请求，测试controller</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> MockHttpServletRequest mockHttpServletRequest;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mockHttpServletRequest = <span class="keyword">new</span> MockHttpServletRequest();</span><br><span class="line">        mockHttpServletRequest.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        mockHttpServletResponse = <span class="keyword">new</span> MockHttpServletResponse();</span><br><span class="line">        mockHttpServletRequest.addHeader(<span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;65734685ef5e4294e87340648e039f91_7u931ed01a2611ea7050c7840ac94150&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// mockHttpServletRequest 就相当于一个HttpServletRequest了</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="集成Web环境方式-Controller"><a href="#集成Web环境方式-Controller" class="headerlink" title="集成Web环境方式 Controller"></a>集成Web环境方式 Controller</h2><p><code>MockMvcBuilders.webAppContextSetup(WebApplicationContext context)：将会从该上下文获取相应的控制器并得到相应的MockMvc</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WebApplicationContext webApplicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * mock 测试</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * DefaultMockMvcBuilder有一个build方法，该方法产生MockMvc</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMock</span><span class="params">()</span></span>&#123;</span><br><span class="line">        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();</span><br><span class="line"><span class="comment">//        DefaultMockMvcBuilder defaultMockMvcBuilder = MockMvcBuilders.webAppContextSetup(webApplicationContext);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="独立测试方法"><a href="#独立测试方法" class="headerlink" title="独立测试方法"></a>独立测试方法</h2><p>MockMvcBuilders.standaloneSetup(Object… controllers)；通过参数指定一组控制器，这样就不需要从上下文获取了；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 独立方法</span></span><br><span class="line"><span class="comment"> * StandaloneMockMvcBuilder也有一个 build() 方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">standMock</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    mockMvc = MockMvcBuilders.standaloneSetup(<span class="keyword">new</span> UserController()).build();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="使用-mockMvc"><a href="#使用-mockMvc" class="headerlink" title="使用 mockMvc"></a>使用 mockMvc</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// perform 方法</span></span><br><span class="line">（ get(<span class="string">&quot;/users&quot;</span>) 或 post(<span class="string">&quot;/add&quot;</span>) ）</span><br><span class="line">get(<span class="string">&quot;/users&quot;</span>).accept(MediaType.APPLICATION_JSON_UTF8)</span><br><span class="line"></span><br><span class="line">post(<span class="string">&quot;/add&quot;</span>).contentType(MediaType.APPLICATION_JSON).content(JSON.toJSONString(user)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line"></span><br><span class="line">mockMvc.perform(get(<span class="string">&quot;/users&quot;</span>).accept(MediaType.APPLICATION_JSON_UTF8))</span><br><span class="line">    .andExpect(status().isOk())</span><br><span class="line">    .andDo(print())</span><br><span class="line">    .andExpect(content().string(equalTo(<span class="string">&quot;[]&quot;</span>)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mockMvc.perform(post(<span class="string">&quot;/add&quot;</span>).contentType(MediaType.APPLICATION_JSON).content(JSON.toJSONString(user)))</span><br><span class="line">            .andExpect(status().isOk())</span><br><span class="line">			.andDo(print())</span><br><span class="line">			.andReturn().getResponse().getContentAsString();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在controller 层发现 没有注入service。当使用standaloneSetup时。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>使用 web 集成方式 测试controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();</span><br><span class="line"></span><br><span class="line">但是这样会报 java.lang.IllegalArgumentException: Header value must not be <span class="keyword">null</span></span><br><span class="line"></span><br><span class="line">参考：https:<span class="comment">//stackoverflow.com/questions/46405193/spring-using-mockmvc-test-with-cors-filter</span></span><br><span class="line"></span><br><span class="line">所以还得加 .header(<span class="string">&quot;Origin&quot;</span>,<span class="string">&quot;*&quot;</span>)</span><br><span class="line"></span><br><span class="line">    ConsultationVo consultationVo = <span class="keyword">new</span> ConsultationVo();</span><br><span class="line">    consultationVo.setOperatorId(<span class="string">&quot;123456789&quot;</span>);</span><br><span class="line"></span><br><span class="line">    mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//        mockMvc = MockMvcBuilders.standaloneSetup(new ConsultationController()).build();</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        mockMvc.perform(</span><br><span class="line">                MockMvcRequestBuilders.post(<span class="string">&quot;/consultations/getAll&quot;</span>)</span><br><span class="line">                        .header(<span class="string">&quot;Origin&quot;</span>,<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                        .accept(MediaType.APPLICATION_JSON_UTF8_VALUE)</span><br><span class="line">                        <span class="comment">//                .param(&quot;name&quot;,&quot;hi&quot;)</span></span><br><span class="line">                        .content(JSON.toJSONString(consultationVo))</span><br><span class="line">                        .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line"></span><br><span class="line">        )</span><br><span class="line"><span class="comment">//                    .andExpect(MockMvcResultMatchers.status().isOk())</span></span><br><span class="line">                .andDo(MockMvcResultHandlers.print())</span><br><span class="line">        ;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结果会出现在打印中的 body 里</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<p>不大理解<br><a href="https://zhuanlan.zhihu.com/p/61342833">https://zhuanlan.zhihu.com/p/61342833</a></p>
</blockquote>
<blockquote>
<p>打印结果 会清晰一些<br><a href="https://zhuanlan.zhihu.com/p/98074553">https://zhuanlan.zhihu.com/p/98074553</a></p>
</blockquote>
<h2 id="MockMvc"><a href="#MockMvc" class="headerlink" title="MockMvc"></a>MockMvc</h2><p>文档：<a href="https://docs.spring.io/spring/docs/5.2.2.RELEASE/spring-framework-reference/testing.html#testing-introduction">https://docs.spring.io/spring/docs/5.2.2.RELEASE/spring-framework-reference/testing.html#testing-introduction</a></p>
<blockquote>
<p>MockMvcBuilder 来产生 MockMvc :有以下两种方式<br>StandaloneMockMvcBuilder和DefaultMockMvcBuilder，分别对应两种测试方式，即独立安装和集成Web环境测试（此种方式并不会集成真正的web环境，而是通过相应的Mock API进行模拟测试，无须启动服务器）。</p>
</blockquote>
<p>一把来说：用静态工厂MockMvcBuilders 即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockMvcBuilders</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Build a &#123;<span class="doctag">@link</span> MockMvc&#125; instance using the given, fully initialized</span></span><br><span class="line"><span class="comment">	 * (i.e., &lt;em&gt;refreshed&lt;/em&gt;) &#123;<span class="doctag">@link</span> WebApplicationContext&#125;.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;The &#123;<span class="doctag">@link</span> org.springframework.web.servlet.DispatcherServlet DispatcherServlet&#125;</span></span><br><span class="line"><span class="comment">	 * will use the context to discover Spring MVC infrastructure and application</span></span><br><span class="line"><span class="comment">	 * controllers in it. The context must have been configured with a</span></span><br><span class="line"><span class="comment">	 * &#123;<span class="doctag">@link</span> javax.servlet.ServletContext ServletContext&#125;.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DefaultMockMvcBuilder <span class="title">webAppContextSetup</span><span class="params">(WebApplicationContext context)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> DefaultMockMvcBuilder(context);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Build a &#123;<span class="doctag">@link</span> MockMvc&#125; instance by registering one or more</span></span><br><span class="line"><span class="comment">	 * &#123;<span class="doctag">@code</span> <span class="doctag">@Controller</span>&#125; instances and configuring Spring MVC infrastructure</span></span><br><span class="line"><span class="comment">	 * programmatically.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;This allows full control over the instantiation and initialization of</span></span><br><span class="line"><span class="comment">	 * controllers and their dependencies, similar to plain unit tests while</span></span><br><span class="line"><span class="comment">	 * also making it possible to test one controller at a time.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;When this builder is used, the minimum infrastructure required by the</span></span><br><span class="line"><span class="comment">	 * &#123;<span class="doctag">@link</span> org.springframework.web.servlet.DispatcherServlet DispatcherServlet&#125;</span></span><br><span class="line"><span class="comment">	 * to serve requests with annotated controllers is created automatically</span></span><br><span class="line"><span class="comment">	 * and can be customized, resulting in configuration that is equivalent to</span></span><br><span class="line"><span class="comment">	 * what MVC Java configuration provides except using builder-style methods.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;If the Spring MVC configuration of an application is relatively</span></span><br><span class="line"><span class="comment">	 * straight-forward &amp;mdash; for example, when using the MVC namespace in</span></span><br><span class="line"><span class="comment">	 * XML or MVC Java config &amp;mdash; then using this builder might be a good</span></span><br><span class="line"><span class="comment">	 * option for testing a majority of controllers. In such cases, a much</span></span><br><span class="line"><span class="comment">	 * smaller number of tests can be used to focus on testing and verifying</span></span><br><span class="line"><span class="comment">	 * the actual Spring MVC configuration.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> controllers one or more &#123;<span class="doctag">@code</span> <span class="doctag">@Controller</span>&#125; instances to test</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StandaloneMockMvcBuilder <span class="title">standaloneSetup</span><span class="params">(Object... controllers)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> StandaloneMockMvcBuilder(controllers);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>springBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>如何阅读一本书</title>
    <url>/2018/11/15/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/</url>
    <content><![CDATA[<p>How to read a book!</p>
<a id="more"></a>

<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>第一版 在 1940年<br>​    莫提默-J-艾德勒</p>
<p>第二版 在 1972年<br>​    莫提默-J-艾德勒<br>​    查尔斯-范多伦</p>
<h1 id="阅读的层次"><a href="#阅读的层次" class="headerlink" title="阅读的层次"></a>阅读的层次</h1><h2 id="阅读的活力与艺术"><a href="#阅读的活力与艺术" class="headerlink" title="阅读的活力与艺术"></a>阅读的活力与艺术</h2><h3 id="需要的是主动阅读"><a href="#需要的是主动阅读" class="headerlink" title="需要的是主动阅读"></a>需要的是主动阅读</h3><p>在阅读世界里的探索能力就更强一些</p>
<h3 id="阅读的目标：为获得资讯而读，以及为求得理解而读"><a href="#阅读的目标：为获得资讯而读，以及为求得理解而读" class="headerlink" title="阅读的目标：为获得资讯而读，以及为求得理解而读"></a>阅读的目标：为获得资讯而读，以及为求得理解而读</h3><blockquote>
<p>蒙田说：“初学者的无知在于未学，而学者的无知在于学后”<br>读错了许多书，—–亚历山大-蒲伯（Alexander Pope)说这种人是书呆子，无知的阅读者<br>希腊人则称这种人:  半瓶醋(Sophomores)</p>
</blockquote>
<h3 id="一种错误：都得多不一定读得好"><a href="#一种错误：都得多不一定读得好" class="headerlink" title="一种错误：都得多不一定读得好"></a>一种错误：都得多不一定读得好</h3><h2 id="阅读的层次-1"><a href="#阅读的层次-1" class="headerlink" title="阅读的层次"></a>阅读的层次</h2><p>阅读的规则是：努力越多，效果越好</p>
<h3 id="四种层次的阅读"><a href="#四种层次的阅读" class="headerlink" title="四种层次的阅读"></a>四种层次的阅读</h3><p>渐进的，高层包含了低层</p>
<ul>
<li>基础阅读 elementary reading</li>
</ul>
<p>识字，大部分速度课程都是这个层次的工作。</p>
<p>这个句子在说什么？</p>
<ul>
<li>检视阅读 inspectional reading<br>常被忽略的层次</li>
</ul>
<p>强调时间，抓重点<br>系统化的略读</p>
<p>这本书在谈什么？</p>
<ul>
<li>分析阅读 analytical reading</li>
</ul>
<p>全盘的阅读，完整的阅读，专注的活动，咀嚼与消化一本书，用的时间多</p>
<ul>
<li>主题阅读 syntopical reading</li>
</ul>
<p>也叫比较阅读</p>
<p>书所谈的主题</p>
<h2 id="阅读的第一个层次，基础阅读"><a href="#阅读的第一个层次，基础阅读" class="headerlink" title="阅读的第一个层次，基础阅读"></a>阅读的第一个层次，基础阅读</h2>]]></content>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>注入注解</title>
    <url>/2020/04/03/%E6%B3%A8%E5%85%A5%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<p>@Repository DAO层注解</p>
<p>@Component </p>
<p>@Service是@Component注解的一个特例</p>
<p>@Autowired</p>
<p>@Resource</p>
<p>@Configuration</p>
<p>@Bean</p>
<a id="more"></a>


<h1 id="SpringBoot-的几种注入bean-注解"><a href="#SpringBoot-的几种注入bean-注解" class="headerlink" title="SpringBoot 的几种注入bean 注解"></a>SpringBoot 的几种注入bean 注解</h1><h2 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h2><ul>
<li>@Autowired注解作用在构造函数、方法、方法参数、类字段以及注解上</li>
<li>@Autowired注解可以实现Bean的自动注入</li>
</ul>
<blockquote>
<p>按类型注入<br>在Spring Boot应用启动时，Spring容器会自动装载一个org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor处理器，当容器扫扫描到@Autowired注解时，就会在IoC容器就会找相应类型的Bean，并且实现注入。</p>
</blockquote>
<h2 id="Qualifier注解"><a href="#Qualifier注解" class="headerlink" title="@Qualifier注解"></a>@Qualifier注解</h2><p>请看 package pan.day.learn.spring.beans.qualifier</p>
<blockquote>
<p>当一个接口有两个实现类时</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">定义bean的环节</span><br><span class="line"><span class="meta">@Service(&quot;sayYeah&quot;)</span></span><br><span class="line"></span><br><span class="line">使用的环节</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;abc&quot;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h2><blockquote>
<p>@Resource 是JDK1.6支持的注解，默认按照名称进行装配，名称可以通过name属性进行指定，如果没有指定name属性，当注解写在字段上时，默认取字段名，按照名称查找，如果注解写在setter方法上默认取属性名进行装配。当找不到与名称匹配的bean时才按照类型进行装配。但是需要注意的是，如果name属性一旦指定，就只会按照名称进行装配。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">名称可以通过name属性进行指定,name属性一旦指定，就只会按照名称进行装配。</span><br><span class="line"><span class="meta">@Resource(name=&quot;baseDao&quot;)</span>    </span><br><span class="line"><span class="keyword">private</span> BaseDao baseDao; </span><br><span class="line"></span><br><span class="line">当注解写在字段上时，默认取字段名,默认字段名找不到，才会按类型匹配装配</span><br><span class="line"><span class="meta">@Resource</span>  </span><br><span class="line"><span class="keyword">private</span> BaseDao baseDao; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Autowired-与-Resource"><a href="#Autowired-与-Resource" class="headerlink" title="@Autowired 与 @Resource"></a>@Autowired 与 @Resource</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">a.<span class="meta">@Resource</span>默认是按照名称来装配注入的，只有当找不到与名称匹配的bean才会按照类型来装配注入；</span><br><span class="line"></span><br><span class="line">b.<span class="meta">@Autowired</span>默认是按照类型装配注入的，如果想按照名称来转配注入，则需要结合<span class="meta">@Qualifier</span>一起使用；</span><br><span class="line"></span><br><span class="line">c.<span class="meta">@Resource</span>注解是由JDK提供，而<span class="meta">@Autowired</span>是由Spring提供</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">作者：wuxinliulei</span><br><span class="line">链接：https:<span class="comment">//www.zhihu.com/question/39356740/answer/80926247</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>大头</strong></p>
<h2 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h2><blockquote>
<p>可被 @ComponentScan(“”) 扫到的注解</p>
</blockquote>
<p>细化的@Component：<br>@Controller 标注在Controller层<br>@Service 标注在Service层<br>@Repository 标注在dao层</p>
<h2 id="Configuration-与-Bean"><a href="#Configuration-与-Bean" class="headerlink" title="@Configuration 与 @Bean"></a>@Configuration 与 @Bean</h2><p>见： pan.day.learn.spring.beans.configs</p>
<blockquote>
<p>这两个一般一起用了</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">//创建一个class配置文件</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span></span>&#123;</span><br><span class="line">	<span class="comment">//将一个Bean交由Spring进行管理</span></span><br><span class="line">       <span class="meta">@Bean</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> MyBean <span class="title">myBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> MyBean();</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>@Configuration 本身就是一个 @Component<br>所以可以使用@Autowried 注入这个@Configuration，但是它的职能主要是配置啊。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/lipinganq/java/article/details/79167982">https://blog.csdn.net/lipinganq/java/article/details/79167982</a></p>
<p><a href="https://juejin.im/post/5ca81a536fb9a05e6538aa39">https://juejin.im/post/5ca81a536fb9a05e6538aa39</a></p>
<p><a href="https://www.zhihu.com/question/39356740">https://www.zhihu.com/question/39356740</a></p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>皮肤性病学</title>
    <url>/2019/02/10/%E7%9A%AE%E8%82%A4%E6%80%A7%E7%97%85%E5%AD%A6/</url>
    <content><![CDATA[<p><a href="https://www.icourse163.org/learn/XJTU-1002982009?tid=1003185007#/learn/content?type=detail&amp;id=1007434013">https://www.icourse163.org/learn/XJTU-1002982009?tid=1003185007#/learn/content?type=detail&amp;id=1007434013</a></p>
<p>来自中国大学mooc</p>
<a id="more"></a>



<h1 id="皮肤的结构和功能"><a href="#皮肤的结构和功能" class="headerlink" title="皮肤的结构和功能"></a>皮肤的结构和功能</h1><h2 id="皮肤的一般特点"><a href="#皮肤的一般特点" class="headerlink" title="皮肤的一般特点"></a>皮肤的一般特点</h2><p>眼睑：最薄</p>
<p>脚后跟：最厚</p>
<h3 id="皮肤的层次"><a href="#皮肤的层次" class="headerlink" title="皮肤的层次"></a>皮肤的层次</h3><p>三层：</p>
<ul>
<li>表皮层</li>
<li>真皮层</li>
<li>皮下脂肪层</li>
</ul>
<p>皮肤附属器</p>
]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>笔试面试</title>
    <url>/2018/11/21/%E7%AC%94%E8%AF%95%E9%9D%A2%E8%AF%95/</url>
    <content><![CDATA[<p>2018面试，笔试</p>
<a id="more"></a>


<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="等差数列和：https-zh-wikipedia-org-wiki-E7-AD-89-E5-B7-AE-E6-95-B0-E5-88-97-E7-AD-89-E5-B7-AE-E6-95-B0-E5-88-97-E7-9A-84-E5-92-8C"><a href="#等差数列和：https-zh-wikipedia-org-wiki-E7-AD-89-E5-B7-AE-E6-95-B0-E5-88-97-E7-AD-89-E5-B7-AE-E6-95-B0-E5-88-97-E7-9A-84-E5-92-8C" class="headerlink" title="等差数列和：https://zh.wikipedia.org/wiki/%E7%AD%89%E5%B7%AE%E6%95%B0%E5%88%97#%E7%AD%89%E5%B7%AE%E6%95%B0%E5%88%97%E7%9A%84%E5%92%8C"></a>等差数列和：<a href="https://zh.wikipedia.org/wiki/%E7%AD%89%E5%B7%AE%E6%95%B0%E5%88%97#%E7%AD%89%E5%B7%AE%E6%95%B0%E5%88%97%E7%9A%84%E5%92%8C">https://zh.wikipedia.org/wiki/%E7%AD%89%E5%B7%AE%E6%95%B0%E5%88%97#%E7%AD%89%E5%B7%AE%E6%95%B0%E5%88%97%E7%9A%84%E5%92%8C</a></h3><h3 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h3><h4 id="三种遍历方式"><a href="#三种遍历方式" class="headerlink" title="三种遍历方式"></a>三种遍历方式</h4><p>java语言实现：<a href="https://zhuanlan.zhihu.com/p/25632253">https://zhuanlan.zhihu.com/p/25632253</a></p>
<p>(1). 先序遍历</p>
<p>(2). 中序遍历</p>
<p>(3). 后序遍历</p>
<p>三种遍历方式，也就是遍历的顺序不一样。</p>
<p>先序遍历: “根左右”，遍历的顺序: 根节点-&gt;左节点-&gt;右节点。</p>
<p>中序遍历: “左根右”，遍历的顺序: 左节点-&gt;根节点-&gt;右节点。</p>
<p>后序遍历: “左右根”，遍历的顺序: 左节点-&gt;右节点-&gt;根节点。</p>
<p><img src="/images/data/a1.png"></p>
<hr>
<p>结果：</p>
<p>先序：1,2,4,8,9,5,3,6,7<br>中序：8,4,9,2,5,1,6,3,7<br>后序：8,9,4,5,2,6,7,3,1</p>
<h4 id="由后序跟中序来还原二叉树"><a href="#由后序跟中序来还原二叉树" class="headerlink" title="由后序跟中序来还原二叉树"></a>由后序跟中序来还原二叉树</h4><h5 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h5><blockquote>
<p>后序遍历实例:C B E H G I F D A<br>中序遍历实例:B C A E D G H F I<br>中序遍历开始位置,结束位置记做z1,z2,后序的记为h1,h2</p>
</blockquote>
<ol>
<li>新建一颗空树,左右孩子置空</li>
<li>拿到后序遍历的最后一个结点,其位置为z2,将该值存入树的数据域</li>
<li>在中序遍历的序列中以遍历的方式找到后序遍历的最后一个结点的位置,记为i</li>
<li>如果i!=z1,说明以该结点为根结点的树有左子树,以递归的方式,调用当前函数恢复左子树</li>
<li>如果i!=z2,说明以该结点为根结点的树有右子树,以递归的方式调用当前函数恢复右子树</li>
<li>返回树的根结点值</li>
</ol>
<p>c语言实现：<a href="https://zhuanlan.zhihu.com/p/50185675">https://zhuanlan.zhihu.com/p/50185675</a></p>
<h2 id="八种排序"><a href="#八种排序" class="headerlink" title="八种排序"></a>八种排序</h2><p><a href="https://zhuanlan.zhihu.com/p/26065419">https://zhuanlan.zhihu.com/p/26065419</a></p>
<h3 id="八种排序的关系"><a href="#八种排序的关系" class="headerlink" title="八种排序的关系"></a>八种排序的关系</h3><p><img src="/images/data/a2.jpg"></p>
<h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><p>（1）基本思想：在要排序的一组数中，假设前面(n-1) [n&gt;=2] 个数已经是排<br>好顺序的，现在要把第n个数插到前面的有序数中，使得这n个数<br>也是排好顺序的。如此反复循环，直到全部排好顺序</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i, j, temp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            temp = a[i]; <span class="comment">// 把当前待比较项付给中间量</span></span><br><span class="line">            <span class="keyword">for</span> (j = i; j &gt; <span class="number">0</span> &amp;&amp; temp &lt; a[j - <span class="number">1</span>]; j--) &#123;</span><br><span class="line">                <span class="comment">// 如果待比较项小 </span></span><br><span class="line">                a[j] = a[j - <span class="number">1</span>]; <span class="comment">// 向后移</span></span><br><span class="line">                <span class="comment">// 直到找到没有比比较项大的就退出当前循环</span></span><br><span class="line">            &#125;</span><br><span class="line">            a[j] = temp;<span class="comment">// 49</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>直接插入排序最大的优点是简单，在记录数较少时，是比较好的办法。</p>
</blockquote>
<h3 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h3><p>（1）基本思想：在要排序的一组数中，选出最小的一个数与第一个位置的数交换；</p>
<p>然后在剩下的数当中再找最小的与第二个位置的数交换，如此循环到倒数第二个数和最后一个数比较为止。</p>
<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a><strong>快速排序</strong></h3><p>（1）基本思想：选择一个基准元素,通常选择第一个元素或者最后一个元素,通过一趟扫描，将待排序列分成两部分,一部分比基准元素小,一部分大于等于基准元素,此时基准元素在其排好序后的正确位置,然后再用同样的方法递归地排序划分的两部分。</p>
<h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><p><a href="https://zhuanlan.zhihu.com/p/23755202">https://zhuanlan.zhihu.com/p/23755202</a></p>
<h2 id="（一）请分别简单说一说进程和线程以及它们的区别。"><a href="#（一）请分别简单说一说进程和线程以及它们的区别。" class="headerlink" title="（一）请分别简单说一说进程和线程以及它们的区别。"></a>（一）请分别简单说一说进程和线程以及它们的区别。</h2><ul>
<li>进程是具有一定功能的程序关于某个数据集合上的一次运行活动，进程是系统进行资源调度和分配的一个独立单位。</li>
<li>线程是进程的实体，是CPU调度和分派的基本单位，它是比进程更小的能独立运行的基本单位。</li>
<li>一个进程可以有多个线程，多个线程也可以并发执行</li>
</ul>
<h2 id="（二）线程同步的方式有哪些？"><a href="#（二）线程同步的方式有哪些？" class="headerlink" title="（二）线程同步的方式有哪些？"></a>（二）线程同步的方式有哪些？</h2><ul>
<li>互斥量：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。</li>
<li>信号量：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量。</li>
<li>事件（信号）：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作。</li>
</ul>
<h2 id="（五）什么是死锁？死锁产生的条件？"><a href="#（五）什么是死锁？死锁产生的条件？" class="headerlink" title="（五）什么是死锁？死锁产生的条件？"></a>（五）什么是死锁？死锁产生的条件？</h2><p>在两个或者多个并发进程中，如果每个进程持有某种资源而又等待其它进程释放它或它们现在保持着的资源，在未改变这种状态之前都不能向前推进，称这一组进程产生了死锁。通俗的讲就是两个或多个进程无限期的阻塞、相互等待的一种状态。</p>
<p>死锁产生的四个条件（有一个条件不成立，则不会产生死锁）</p>
<ul>
<li>互斥条件：一个资源一次只能被一个进程使用</li>
<li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得资源保持不放</li>
<li>不剥夺条件：进程获得的资源，在未完全使用完之前，不能强行剥夺</li>
<li>循环等待条件：若干进程之间形成一种头尾相接的环形等待资源关系 </li>
</ul>
<h2 id="（六）进程有哪几种状态？"><a href="#（六）进程有哪几种状态？" class="headerlink" title="（六）进程有哪几种状态？"></a>（六）进程有哪几种状态？</h2><ul>
<li>就绪状态：进程已获得除处理机以外的所需资源，等待分配处理机资源</li>
<li>运行状态：占用处理机资源运行，处于此状态的进程数小于等于CPU数</li>
<li>阻塞状态： 进程等待某种条件，在条件满足之前无法执行 </li>
</ul>
<h2 id="七）分页和分段有什么区别？"><a href="#七）分页和分段有什么区别？" class="headerlink" title="七）分页和分段有什么区别？"></a>七）分页和分段有什么区别？</h2><ul>
<li>段是信息的逻辑单位，它是根据用户的需要划分的，因此段对用户是可见的 ；页是信息的物理单位，是为了管理主存的方便而划分的，对用户是透明的。</li>
<li>段的大小不固定，有它所完成的功能决定；页大大小固定，由系统决定</li>
<li>段向用户提供二维地址空间；页向用户提供的是一维地址空间</li>
<li>段是信息的逻辑单位，便于存储保护和信息的共享，页的保护和共享受到限制。</li>
</ul>
<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p><a href="https://zhuanlan.zhihu.com/p/23713529?refer=passer">https://zhuanlan.zhihu.com/p/23713529?refer=passer</a></p>
<h2 id="（二）索引是什么？有什么作用以及优缺点？"><a href="#（二）索引是什么？有什么作用以及优缺点？" class="headerlink" title="（二）索引是什么？有什么作用以及优缺点？"></a>（二）索引是什么？有什么作用以及优缺点？</h2><p>索引是对数据库表中一或多个列的值进行排序的结构，是帮助MySQL高效获取数据的数据结构</p>
<p>你也可以这样理解：索引就是加快检索表中数据的方法。数据库的索引类似于书籍的索引。在书籍中，索引允许用户不必翻阅完整个书就能迅速地找到所需要的信息。在数据库中，索引也允许数据库程序迅速地找到表中的数据，而不必扫描整个数据库。</p>
<p><strong>MySQL</strong>数据库几个基本的索引类型：普通索引、唯一索引、主键索引、全文索引</p>
<ul>
<li>索引加快数据库的检索速度</li>
<li>索引降低了插入、删除、修改等维护任务的速度</li>
<li>唯一索引可以确保每一行数据的唯一性</li>
<li>通过使用索引，可以在查询的过程中使用优化隐藏器，提高系统的性能</li>
<li>索引需要占物理和数据空间 </li>
</ul>
<p>如果你对索引还不太熟悉，建议阅读：<a href="http://link.zhihu.com/?target=http://kb.cnblogs.com/page/45712/">漫谈数据库索引</a></p>
<h2 id="（六）简单说一说drop、delete与truncate的区别"><a href="#（六）简单说一说drop、delete与truncate的区别" class="headerlink" title="（六）简单说一说drop、delete与truncate的区别"></a>（六）简单说一说<strong>drop、delete</strong>与<strong>truncate</strong>的区别</h2><p>SQL中的<strong>drop、delete、truncate</strong>都表示删除，但是三者有一些差别</p>
<ul>
<li><strong>delete和truncate</strong>只删除表的数据不删除表的结构</li>
<li>速度,一般来说: <strong>drop&gt; truncate &gt;delete</strong> </li>
<li><strong>delete</strong>语句是dml,这个操作会放到<strong>rollback segement</strong>中,事务提交之后才生效;<br>如果有相应的<strong>trigger</strong>,执行的时候将被触发. <strong>truncate,drop</strong>是ddl, 操作立即生效,原数据不放到r<strong>ollback segment</strong>中,不能回滚. 操作不触发<strong>trigger</strong>. </li>
</ul>
<h2 id="（七）drop、delete与truncate分别在什么场景之下使用？"><a href="#（七）drop、delete与truncate分别在什么场景之下使用？" class="headerlink" title="（七）drop、delete与truncate分别在什么场景之下使用？"></a>（七）<strong>drop、delete</strong>与<strong>truncate</strong>分别在什么场景之下使用？</h2><ul>
<li>不再需要一张表的时候，用<strong>drop</strong></li>
<li>想删除部分数据行时候，用<strong>delete</strong>，并且带上where子句</li>
<li>保留表而删除所有数据的时候用<strong>truncate</strong></li>
</ul>
<h2 id="（八）-超键、候选键、主键、外键分别是什么？"><a href="#（八）-超键、候选键、主键、外键分别是什么？" class="headerlink" title="（八） 超键、候选键、主键、外键分别是什么？"></a>（八） 超键、候选键、主键、外键分别是什么？</h2><p>超键：在关系中能唯一标识元组的属性集称为关系模式的超键。一个属性可以为作为一个超键，多个属性组合在一起也可以作为一个超键。超键包含候选键和主键。</p>
<p>候选键：是最小超键，即没有冗余元素的超键。</p>
<p>主键：数据库表中对储存数据对象予以唯一和完整标识的数据列或属性的组合。一个数据列只能有一个主键，且主键的取值不能缺失，即不能为空值（Null）。</p>
<p>外键：在一个表中存在的另一个表的主键称此表的外键。</p>
<h2 id="（十）说一说三个范式。"><a href="#（十）说一说三个范式。" class="headerlink" title="（十）说一说三个范式。"></a>（十）说一说三个范式。</h2><p>第一范式（1NF）：数据库表中的字段都是单一属性的，不可再分。这个单一属性由基本类型构成，包括整型、实数、字符型、逻辑型、日期型等。</p>
<p>第二范式（2NF）：数据库表中不存在非关键字段对任一候选关键字段的部分函数依赖（部分函数依赖指的是存在组合关键字中的某些字段决定非关键字段的情况），也即所有非关键字段都完全依赖于任意一组候选关键字。 </p>
<p>第三范式（3NF）：在第二范式的基础上，数据表中如果不存在非关键字段对任一候选关键字段的传递函数依赖则符合第三范式。所谓传递函数依赖，指的是如 果存在”A → B → C”的决定关系，则C传递函数依赖于A。因此，满足第三范式的数据库表应该不存在如下依赖关系： 关键字段 → 非关键字段 x → 非关键字段y</p>
<p>如果你对三个还不太了解，建议阅读：<a href="https://www.zhihu.com/question/24696366">解释一下关系数据库的第一第二第三范式？</a></p>
<h1 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h1><blockquote>
<p>依赖，关联，聚合，组合，继承，实现</p>
<p>耦合度依次增加</p>
</blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/24576502">https://zhuanlan.zhihu.com/p/24576502</a></p>
<h2 id="1-依赖-Dependency-虚线-箭头"><a href="#1-依赖-Dependency-虚线-箭头" class="headerlink" title="1. 依赖 (Dependency) 虚线+箭头"></a>1. 依赖 (Dependency) 虚线+箭头</h2><p>A依赖了B，A使用了B</p>
<h3 id="体现："><a href="#体现：" class="headerlink" title="体现："></a>体现：</h3><p>类A使用到了类B：如A中某个函数的参数！</p>
<p>通过函数里局部变量</p>
<p>通过静态变量发生依赖</p>
<h2 id="2-关联-Association-实线-箭头"><a href="#2-关联-Association-实线-箭头" class="headerlink" title="2. 关联 (Association) 实线+箭头"></a>2. 关联 (Association) 实线+箭头</h2><p>关联关系的定义为：对于两个相对独立的对象，当一个对象的实例与另一个对象的一些特定实例存在固定的对应关系时，这两个对象之间为关联关系。</p>
<p>它体现的两个类中一种强依赖关系，比如我和我的朋友，这种关系比依赖更强，不存在依赖关系中的偶然性，关系也不是临时的，一般是长期性的。</p>
<p>关联关系分为单向关联和双向关联：</p>
<ol>
<li>在 Java 中，单向关联表现为：<strong>类 A 当中使用了 类 B，其中类 B 是作为类 A 的成员变量。</strong></li>
<li>双向关联表现为: 类 A 当中使用类 B 作为成员变量，同时类 B 中也使用了类 A 作为成员变量。</li>
</ol>
<h2 id="3-聚合-Aggregation-空心菱形，实线，箭头"><a href="#3-聚合-Aggregation-空心菱形，实线，箭头" class="headerlink" title="3.聚合 (Aggregation) 空心菱形，实线，箭头"></a>3.聚合 (Aggregation) 空心菱形，实线，箭头</h2><p>has -a 的关系</p>
<p>聚合关系是关联关系的一种，耦合度强于关联，他们的代码表现是相同的，仅仅是在语义上有所区别：关联关系的对象间是相互独立的，而聚合关系的对象之间存在着包容关系，他们之间是“整体-个体”的相互关系。</p>
<p>聚合关系中作为成员变量的类一般使用 set 方法赋值。</p>
<blockquote>
<p>司机与车，司机有辆车，司机聚合了车，司机知道车，车不知到司机，setCar</p>
<p>司机 空心菱形，实线，箭头 车</p>
</blockquote>
<h2 id="4-组合-Composition-实心菱形，实线，箭头"><a href="#4-组合-Composition-实心菱形，实线，箭头" class="headerlink" title="4. 组合 (Composition)实心菱形，实线，箭头"></a>4. 组合 (Composition)实心菱形，实线，箭头</h2><p>contain a</p>
<p>相比于聚合，组合是一种耦合度更强的关联关系。存在组合关系的类表示“整体-部分”的关联关系，“整体”负责“部分”的生命周期，他们之间是共生共死的；并且“部分”单独存在时没有任何意义。</p>
<p>对比与聚合关系，我们可以将前面的例子变为下面的场景：</p>
<ol>
<li>车是一辆私家车，是司机财产的一部分，<strong>强调的是人财产的部分性</strong>，则相同的代码即可表示聚合关系。</li>
<li>车是司机必须有的财产，要想成为一个司机必须要现有财产，车要是没了，司机也不想活了。而且司机要是不干司机了，这车也就没了。</li>
</ol>
<p><strong>所以，关联、聚合、组合只能配合语义，结合上下文才能够判断出来，而只给出一段代码让我们判断是关联，聚合，还是组合关系，则是无法判断的。</strong></p>
<blockquote>
<p>司机与车，司机有辆车，司机组合了车，司机知道车，车不知到司机</p>
<p>司机 实心菱形，实线，箭头 车</p>
<p>人：脑子，肚子，心胀 人与他们的关系是组合</p>
</blockquote>
<h3 id="聚合和组合的区别"><a href="#聚合和组合的区别" class="headerlink" title="聚合和组合的区别"></a>聚合和组合的区别</h3><p>这两个比较难理解，重点说一下。聚合和组合的区别在于：<strong>聚合关系是“has-a”关系，组合关系是“contains-a”关系</strong>；聚合关系表示整体与部分的关系比较弱，而组合比较强；聚合关系中代表部分事物的对象与代表聚合事物的对象的生存期无关，一旦删除了聚合对象不一定就删除了代表部分事物的对象。组合中一旦删除了组合对象，同时也就删除了代表部分事物的对象。</p>
<h2 id="5-继承-Generalization-实线，三角形"><a href="#5-继承-Generalization-实线，三角形" class="headerlink" title="5. 继承 (Generalization) 实线，三角形"></a>5. 继承 (Generalization) 实线，三角形</h2><p>继承表示类与类 (或者接口与接口) 之间的父子关系。在 Java 中，用关键字 extends 表示继承关系。</p>
<h2 id="6-实现-Implementation-虚线-，三角形"><a href="#6-实现-Implementation-虚线-，三角形" class="headerlink" title="6. 实现 (Implementation)虚线 ，三角形"></a>6. 实现 (Implementation)虚线 ，三角形</h2><p>表示一个类实现一个或多个接口的方法。接口定义好操作的集合，由实现类去完成接口的具体操作, 在 Java 中使用 implements 表示。在 Java 中，如果实现了某个接口，那么就必须实现接口中所有的方法。</p>
<p>比如一个人可以吃饭和学习，那么就可以定义一个人的接口。让具体的人去实现它。</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><img src="/images/uml/a1.jpg"></p>
]]></content>
      <tags>
        <tag>招聘</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟现实时代——读后感</title>
    <url>/2018/05/01/%E8%99%9A%E6%8B%9F%E7%8E%B0%E5%AE%9E%E6%97%B6%E4%BB%A3%E2%80%94%E2%80%94%E8%AF%BB%E5%90%8E%E6%84%9F/</url>
    <content><![CDATA[<p>机械工业出版社<br>《虚拟现实时代》<br>王莉，杨明辉著</p>
<a id="more"></a>

<h1 id="大事迹"><a href="#大事迹" class="headerlink" title="大事迹"></a>大事迹</h1><p>Facebook斥资20亿收购Oculus VR</p>
<p>VR:  借助计算机及传感器技术生成一个三维环境，创建一种暂新得人机交互状态。<br>AR：让现实世界中不存在得物体和现实世界得物体融合在一起得交互</p>
<p>统称虚拟现实类技术</p>
<h1 id="VR-AR"><a href="#VR-AR" class="headerlink" title="VR,AR"></a>VR,AR</h1><p>VR:  Virtual Reality  得缩写  于20世纪六十年代首次被提出<br>VR：Argumented Reality  增强现实</p>
<h1 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h1><p>概念：来于小说家  Stanley G.Weinbaum   1935年<br>《Pygmalion’s Spectacles》——虚拟现实眼镜。。。</p>
<p>1957年：<br>电影摄影师 Morton Heilig 发明了名为Sensorama得虚拟现实仿真模拟器。。。</p>
<p>1968年：  头戴式显示器出现<br>Ivan Sutherland———–》计算机科学家<br>“达摩克利斯之剑”<br>。。。。。<br>。。。。。。。<br>。。。。</p>
<h1 id="摘抄"><a href="#摘抄" class="headerlink" title="摘抄"></a>摘抄</h1><p>VR眩晕与晕船晕车没太大区别—》人耳朵里的前庭系统所感受到的运动状态和视觉系统不一致，就会在大脑里打架。。你就感受到晕晕的了</p>
<h1 id="人机交互的三个革命性历程"><a href="#人机交互的三个革命性历程" class="headerlink" title="人机交互的三个革命性历程"></a>人机交互的三个革命性历程</h1><ul>
<li>鼠标</li>
<li>多点触控</li>
<li>体感技术</li>
</ul>
<h1 id="动作捕捉"><a href="#动作捕捉" class="headerlink" title="动作捕捉"></a>动作捕捉</h1><ul>
<li>光学式动作捕捉：通过对目标上特定光点的监视和跟踪来完成运动捕捉的任务。</li>
<li>惯性导航式动作捕捉： 在运动物体的重要节点佩戴集成加速计，陀螺仪和磁力计等惯性传感设备。。。。</li>
<li>手势跟踪</li>
<li>眼球跟踪</li>
</ul>
<h1 id="产品"><a href="#产品" class="headerlink" title="产品"></a>产品</h1><p>谷歌： cardboard</p>
]]></content>
      <tags>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>网络资源</title>
    <url>/2020/04/04/%E7%BD%91%E7%BB%9C%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<p>网络学习资源</p>
<p>博客等</p>
<a id="more"></a>


<h1 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h1><p>信息安全 python 爬虫<br><a href="https://thief.one/">https://thief.one/</a></p>
<p>Spirng 家<br><a href="http://www.itmuch.com/">http://www.itmuch.com/</a></p>
<p><a href="https://blog.wuwii.com/">https://blog.wuwii.com/</a></p>
<p><a href="https://yelog.org/">https://yelog.org/</a></p>
<h2 id="响应式编程"><a href="#响应式编程" class="headerlink" title="响应式编程"></a>响应式编程</h2><p><a href="https://blog.51cto.com/liukang/2090163">https://blog.51cto.com/liukang/2090163</a></p>
<h1 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h1><p>Spring 实战(第 5 版)<br><a href="https://potoyang.gitbook.io/spring-in-action-v5/">https://potoyang.gitbook.io/spring-in-action-v5/</a></p>
]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机_兴趣小知识</title>
    <url>/2018/06/06/%E8%AE%A1%E7%AE%97%E6%9C%BA-%E5%85%B4%E8%B6%A3%E5%B0%8F%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p>碰到的一些小东西</p>
<a id="more"></a>

<h1 id="键盘上的符号"><a href="#键盘上的符号" class="headerlink" title="键盘上的符号"></a>键盘上的符号</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Key&#x2F;Symbol	Explanation</span><br><span class="line">Windows	PC keyboards have a Windows key that looks like a four-pane window</span><br><span class="line">Command	Apple Mac computers have a command key.</span><br><span class="line">Menu	PC keyboards also have a Menu key that looks like a cursor pointing to a menu.</span><br><span class="line">Esc	Esc (Escape) key</span><br><span class="line">F1 - F12	Information about the F1 through F12 keyboard keys.</span><br><span class="line">F13 - F24	Information about the F13 through F24 keyboard keys.</span><br><span class="line">Tab	Tab key</span><br><span class="line">Caps lock	Caps lock key</span><br><span class="line">Shift	Shift key</span><br><span class="line">Ctrl	Ctrl (Control) key</span><br><span class="line">Fn	Fn (Function) key</span><br><span class="line">Alt	Alt (Alternate) key (PC Only; Mac users have Option key)</span><br><span class="line">Spacebar	Spacebar key</span><br><span class="line">Arrows	Up, Down, Left, Right Arrow keys</span><br><span class="line">Back Space	Back space (or Backspace) key</span><br><span class="line">Delete	Delete or Del key</span><br><span class="line">Enter	Enter key</span><br><span class="line">Prt Scrn	Print screen key</span><br><span class="line">Scroll lock	Scroll lock key</span><br><span class="line">Pause	Pause key</span><br><span class="line">Break	Break key</span><br><span class="line">Insert	Insert key</span><br><span class="line">Home	Home key</span><br><span class="line">Page up	Page up or pg up key</span><br><span class="line">Page down	Page down or pg dn key</span><br><span class="line">End	End key</span><br><span class="line">Num Lock	Num Lock key</span><br><span class="line">~	Tilde</span><br><span class="line">&#96;	Acute, Back quote, grave, grave accent, left quote, open quote, or a push</span><br><span class="line">!	Exclamation mark, Exclamation point, or Bang</span><br><span class="line">@	Ampersat, Arobase, Asperand, At, or At symbol</span><br><span class="line">#	Octothorpe, Number, Pound, sharp, or Hash</span><br><span class="line">£	Pounds Sterling or Pound symbol</span><br><span class="line">€	Euro</span><br><span class="line">$	Dollar sign or generic currency</span><br><span class="line">¢	Cent sign</span><br><span class="line"></span><br><span class="line">¥	Chinese&#x2F;Japenese Yuan</span><br><span class="line">§	Micro or Section</span><br><span class="line">%	Percent</span><br><span class="line">°	Degree</span><br><span class="line">^	Caret or Circumflex</span><br><span class="line">&amp;	Ampersand, Epershand, or And</span><br><span class="line">*	Asterisk, mathematical multiplication symbol, and sometimes referred to as star.</span><br><span class="line">(	Open parenthesis</span><br><span class="line">)	Close parenthesis</span><br><span class="line">-	Hyphen, Minus or Dash</span><br><span class="line">_	Underscore</span><br><span class="line">+	Plus</span><br><span class="line">&#x3D;	Equal</span><br><span class="line">&#123;	Open Brace, squiggly brackets, or curly bracket</span><br><span class="line">&#125;	Close Brace, squiggly brackets, or curly bracket</span><br><span class="line">[	Open bracket</span><br><span class="line">]	Closed bracket</span><br><span class="line">|	Pipe, Or, or Vertical bar</span><br><span class="line">\	Backslash or Reverse Solidus</span><br><span class="line">&#x2F;	Forward slash, Solidus, Virgule, Whack, and mathematical division symbol</span><br><span class="line">:	Colon</span><br><span class="line">;	Semicolon</span><br><span class="line">&quot;	Quote, Quotation mark, or Inverted commas</span><br><span class="line">&#39;	Apostrophe or Single Quote</span><br><span class="line">&lt;	Less Than or Angle brackets</span><br><span class="line">&gt;	Greater Than or Angle brackets</span><br><span class="line">,	Comma</span><br><span class="line">.	Period, dot or Full Stop</span><br><span class="line">?	Question Mark</span><br></pre></td></tr></table></figure>


<h1 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h1><h2 id="批量命令文件"><a href="#批量命令文件" class="headerlink" title="批量命令文件"></a>批量命令文件</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><ul>
<li>好多文件在某个文件夹中</li>
<li>选中</li>
<li>第一个 按 F2键</li>
<li>输入a，1等</li>
</ul>
<h2 id="查看曾经连接过的wifi密码"><a href="#查看曾经连接过的wifi密码" class="headerlink" title="查看曾经连接过的wifi密码"></a>查看曾经连接过的wifi密码</h2><p><a href="https://www.ithome.com/html/win10/219839.htm">https://www.ithome.com/html/win10/219839.htm</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netsh wlan show profile </span><br><span class="line"></span><br><span class="line">netsh wlan show profile name&#x3D;&quot;xxx&quot; key&#x3D;clear</span><br></pre></td></tr></table></figure>

<h2 id="关闭windows快速启动"><a href="#关闭windows快速启动" class="headerlink" title="关闭windows快速启动"></a>关闭windows快速启动</h2><p>管理员命令提示符下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">开启：</span><br><span class="line"> powercfg &#x2F;h on</span><br><span class="line">关闭：</span><br><span class="line"> powercfg &#x2F;h off</span><br></pre></td></tr></table></figure>

<blockquote>
<p>控制面板，电源选项，电源按钮功能，关机设置</p>
</blockquote>
<h3 id="打开powershell命令行"><a href="#打开powershell命令行" class="headerlink" title="打开powershell命令行"></a>打开powershell命令行</h3><p>shift+右键</p>
<h2 id="office"><a href="#office" class="headerlink" title="office"></a>office</h2><h3 id="word"><a href="#word" class="headerlink" title="word"></a>word</h3><h3 id="一行的尾部是空格的话无法加下划线"><a href="#一行的尾部是空格的话无法加下划线" class="headerlink" title="一行的尾部是空格的话无法加下划线"></a>一行的尾部是空格的话无法加下划线</h3><p><a href="https://blog.csdn.net/civilman/article/details/43229935">https://blog.csdn.net/civilman/article/details/43229935</a></p>
<blockquote>
<p><strong>我使用这种方式解决了</strong></p>
<p>方法1：在最后插入一个非间断性空格(Ctrl + Shift + Space)即可。</p>
</blockquote>
<blockquote>
<p>方法2：使用 Tab 键并将下划线格式应用于制表符</p>
</blockquote>
<h3 id="office-激活信息查看"><a href="#office-激活信息查看" class="headerlink" title="office 激活信息查看"></a>office 激活信息查看</h3><blockquote>
<p>安装目录下,office14(数字) cmd<br>cscript ospp.vbs /dstatus</p>
</blockquote>
<p>未解决，找不到适合的激活工具。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PS E:\aaaa\office&gt;                                                                                                      PS E:\aaaa\office&gt;                                                                                                      PS E:\aaaa\office&gt; cscript ospp.vbs &#x2F;dstatus                                                                            Microsoft (R) Windows Script Host Version 5.812                                                                         版权所有(C) Microsoft Corporation。保留所有权利。                                                                                                                                                                                               输入错误: 无法找到脚本文件“E:\aaaa\office\ospp.vbs”。                                                                 PS E:\aaaa\office&gt; dir                                                                                                                                                                                                                                                                                                                                                      目录: E:\aaaa\office                                                                                                                                                                                                                                                                                                                                                Mode                LastWriteTime         Length Name                                                                   ----                -------------         ------ ----                                                                   d-----        2018&#x2F;8&#x2F;27     11:18                CLIPART                                                                d-----        2018&#x2F;8&#x2F;27     11:19                Document Themes 14                                                     d-----        2018&#x2F;8&#x2F;27     11:15                MEDIA                                                                  d-----        2018&#x2F;8&#x2F;27     11:19                Office14                                                               d-----        2018&#x2F;8&#x2F;27     11:16                Stationery                                                             d-----        2018&#x2F;8&#x2F;27     11:18                Templates                                                                                                                                                                                                                                                                                                              PS E:\aaaa\office&gt; cd .\Office14\                                                                                       PS E:\aaaa\office\Office14&gt; ospp.vbs &#x2F;dstatus                                                                           ospp.vbs : 无法将“ospp.vbs”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。请检查名称的拼写，如果包括路径，请确保  路径正确，然后再试一次。                                                                                                所在位置 行:1 字符: 1                                                                                                   + ospp.vbs &#x2F;dstatus                                                                                                     + ~~~~~~~~                                                                                                                  + CategoryInfo          : ObjectNotFound: (ospp.vbs:String) [], CommandNotFoundException                                + FullyQualifiedErrorId : CommandNotFoundException                                                                                                                                                                                                                                                                                                                  Suggestion [3,General]: 找不到命令 ospp.vbs，但它确实存在于当前位置。默认情况下，Windows PowerShell 不会从当前位置加载命令。如果信任此命令，请改为键入“.\ospp.vbs”。有关详细信息，请参阅 &quot;get-help about_Command_Precedence&quot;。                PS E:\aaaa\office\Office14&gt; cscript ospp.vbs &#x2F;dstatus                                                                   Microsoft (R) Windows Script Host Version 5.812                                                                         版权所有(C) Microsoft Corporation。保留所有权利。                                                                                                                                                                                               ---Processing--------------------------                                                                                 ---------------------------------------                                                                                 SKU ID: b6d2565c-341d-4768-ad7d-addbe00bb5ce                                                                            LICENSE NAME: Office 14, OfficeStandardMSDN-Retail edition                                                              LICENSE DESCRIPTION: Office 14, RETAIL channel                                                                          LICENSE STATUS:  ---OOB_GRACE---                                                                                        ERROR CODE: 0x4004F00C                                                                                                  ERROR DESCRIPTION: The Software Licensing Service reported that the application is running within the valid grace period.                                                                                                                       Last 5 characters of installed product key: VY2XW                                                                       REMAINING GRACE: 30 days  (43192 minute(s) before expiring)                                                             ---------------------------------------                                                                                 ---------------------------------------                                                                                 ---Exiting-----------------------------                                                                                 PS E:\aaaa\office\Office14&gt;</span><br></pre></td></tr></table></figure>



<h2 id="查看系统激活信息"><a href="#查看系统激活信息" class="headerlink" title="查看系统激活信息"></a>查看系统激活信息</h2><h3 id="slmgr-vbs"><a href="#slmgr-vbs" class="headerlink" title="slmgr.vbs"></a>slmgr.vbs</h3><p><a href="https://jingyan.baidu.com/article/48206aead03c57216bd6b369.html">https://jingyan.baidu.com/article/48206aead03c57216bd6b369.html</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">slmgr.vbs -xpr  &#x2F;&#x2F;显示当前操作系统是否为永久激活。如果不是，则给出截止日期。</span><br><span class="line">slmgr.vbs -dlv  &#x2F;&#x2F;列出详细的激活信息，含激活ID、安装ID、激活截止日期。</span><br><span class="line">slmgr.vbs -dli   &#x2F;&#x2F;列出当前操作系统的版本、一部分产品密钥、激活类型以及许可证状态</span><br></pre></td></tr></table></figure>

<blockquote>
<p>命令提示符，管理员下</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">slmgr vbs &#x2F;upk  &#x2F;&#x2F;卸载之前的密钥</span><br><span class="line">slmgr &#x2F;ipk *****-*****....</span><br><span class="line">slmgr &#x2F;skms 服务器</span><br></pre></td></tr></table></figure>


<h2 id="linux-ubuntu-无法调节亮度"><a href="#linux-ubuntu-无法调节亮度" class="headerlink" title="linux ubuntu 无法调节亮度"></a>linux ubuntu 无法调节亮度</h2><p><a href="https://www.cnblogs.com/xu-neal/p/3940393.html">https://www.cnblogs.com/xu-neal/p/3940393.html</a></p>
<blockquote>
<p>sudo vim /etc/default/grub<br>在打开文件中找到</p>
</blockquote>
<p>GRUB_CMDLINE_LINUX=””</p>
<p>改成</p>
<p>GRUB_CMDLINE_LINUX=”acpi_backlight=vendor“</p>
<p>改好后保存即可</p>
<blockquote>
<p>sudo update-grub<br>终端输入代码:</p>
</blockquote>
<p>sudo vim /etc/rc.local</p>
<p>在打开文件里增加一句（加在exit 0之前）</p>
<p>echo 500 &gt; /sys/class/backlight/intel_backlight/brightness</p>
<p>然后保存即可</p>
<h2 id="ubuntu-宽带链接"><a href="#ubuntu-宽带链接" class="headerlink" title="ubuntu 宽带链接"></a>ubuntu 宽带链接</h2><blockquote>
<p>安装 pppoecof<br>sudo apt-get install pppoeconf</p>
</blockquote>
<blockquote>
<p>配置<br>pppoeconf<br>开始配置</p>
</blockquote>
<p>最后会显示plugin rp-pppoe.so loaded 说明链接成功。</p>
<blockquote>
<p>关闭链接<br>poff dsl-provider</p>
</blockquote>
<blockquote>
<p>下次开系统<br>pon dsl-proveder即可。</p>
</blockquote>
<h2 id="护眼色"><a href="#护眼色" class="headerlink" title="护眼色"></a>护眼色</h2><p>RGB值为（199，237，204）</p>
]]></content>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础</title>
    <url>/2018/05/04/python%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>本文大部分来自　崇天版python<br>不涉及面向对象</p>
<a id="more"></a>

<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ul>
<li>python 软件基金会： (Python Software Foudation,PSF)</li>
<li>开源社区：(<a href="https://opensource.org/">https://opensource.org</a>)</li>
<li>Guido van Rossum  1989年12月开始，1990年诞生</li>
</ul>
<h2 id="BMI指数"><a href="#BMI指数" class="headerlink" title="BMI指数"></a>BMI指数</h2><p>Body Mass Index  身体质量指数<br>体重（kg）/（身高(m)的平方）<br>2008年，python3的第一个版本正式发布<br>2016年3.6版本发布</p>
<h3 id="向后兼容-Backward-Compatibility-也称向下兼容"><a href="#向后兼容-Backward-Compatibility-也称向下兼容" class="headerlink" title="向后兼容(Backward Compatibility),也称向下兼容"></a>向后兼容(Backward Compatibility),也称向下兼容</h3><h2 id="版本-3于2的一些语法区别，可参考Guido的"><a href="#版本-3于2的一些语法区别，可参考Guido的" class="headerlink" title="版本 3于2的一些语法区别，可参考Guido的"></a>版本 3于2的一些语法区别，可参考Guido的</h2><p><a href="https://docs.python.org/3/whatsnew/3.0.html"></a></p>
<blockquote>
<p>几个语法点<br>3.x默认UTF-8编码<br>print()代替了print语句<br>用exec（）替代了exec语句<br>去掉&lt;&gt;  用!=表示不等于<br>int类型无取值范围限制<br>整数除法(//)   ；而(/) 返回浮点数<br>修改八进制格式，用0o,而不用0开头<br>用input()代替raw_input()<br>range()不再返回一个列表，要转换成列表用  list()函数。。</p>
</blockquote>
<h1 id="pyinstaller库"><a href="#pyinstaller库" class="headerlink" title="pyinstaller库"></a>pyinstaller库</h1><p>对python源程序打包，以在windows,linux，Mac OSX等操作系统下使用。。。<br>安装：<code>pip install pyinstaller</code><br>官网：<a href="http://www.pyinstaller.org/">http://www.pyinstaller.org/</a></p>
<p><code>pyinstaller D:\a\aa.py    </code>会生成<br>dist和build两个文件夹<br>build：目录放存储临时文件的目录，可删除<br>dist：打包程序存放在其下dpython文件夹里，目录中其他文件是可执行文件dpython.exe的动态链接库</p>
<p>生成独立可执行文件：<br><code>pyinstaller -F b.py</code></p>
<h1 id="pip工具"><a href="#pip工具" class="headerlink" title="pip工具"></a>pip工具</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip -h    帮助</span><br><span class="line"></span><br><span class="line">pip install 库名</span><br><span class="line"></span><br><span class="line">pip install -U 库名  更新库</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pip uninstall 库名   卸载库</span><br><span class="line"></span><br><span class="line">pip list  列出当前已安装库</span><br><span class="line"></span><br><span class="line">pip show 库名   列出已安装库的详细信息</span><br><span class="line"></span><br><span class="line">pip download 库名   下载但是不安装</span><br><span class="line"></span><br><span class="line">pip search 关键字     查询相关库</span><br></pre></td></tr></table></figure>

<h2 id="自定义安装"><a href="#自定义安装" class="headerlink" title="自定义安装"></a>自定义安装</h2><p>xxxx.whl</p>
<p>pip install xxxx.whl</p>
<h1 id="语法小说明"><a href="#语法小说明" class="headerlink" title="语法小说明"></a>语法小说明</h1><ul>
<li>单行注释： <code>#</code></li>
<li>多行注释：三个单引号<code>&#39;&#39;&#39;</code></li>
<li>字符串的使用：<br> <img src="/images/python/a5.jpg"><br>字符串访问方式：a[:-1]  不包括-1小标，前面可留空</li>
</ul>
<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><table>
<thead>
<tr>
<th>进制</th>
<th>引导符号</th>
</tr>
</thead>
<tbody><tr>
<td>十进制</td>
<td>无</td>
</tr>
<tr>
<td>二进制</td>
<td>0b,0B</td>
</tr>
<tr>
<td>八进制</td>
<td>0o,0O</td>
</tr>
<tr>
<td>十六进制</td>
<td>0x,0X</td>
</tr>
</tbody></table>
<h3 id="浮点"><a href="#浮点" class="headerlink" title="浮点"></a>浮点</h3><ul>
<li><p>科学计数：  ae-3  </p>
<p>  import sys<br>  print(sys.float_info)<br>  #查看浮点各项参数</p>
</li>
<li><p>高精度浮点运算：使用  Decimal库</p>
</li>
</ul>
<h3 id="复数类型"><a href="#复数类型" class="headerlink" title="复数类型"></a>复数类型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">J或j</span><br><span class="line">实部：z.real</span><br><span class="line">虚部：z.imag</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>复数的几何表示：<br><img src="/images/python/a11.jpg"><br>旋转角度而得的一个（a，b）</p>
<h2 id="九个数字类型操作符"><a href="#九个数字类型操作符" class="headerlink" title="九个数字类型操作符"></a>九个数字类型操作符</h2><blockquote>
<h2 id=""><a href="#" class="headerlink" title="+"></a>+</h2><p>*<br>/<br>//<br>%<br>-(x)<br>+(x)<br>x**y</p>
</blockquote>
<p>宽度：整数《浮点《复数</p>
<h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><table>
<thead>
<tr>
<th>函数</th>
<th>简述</th>
</tr>
</thead>
<tbody><tr>
<td>abs(x)</td>
<td>x的绝对值</td>
</tr>
<tr>
<td>divmod(x,y)</td>
<td>输出(x//y,x%y)，二元组</td>
</tr>
<tr>
<td>pow(x,y[,z])</td>
<td>(x**y)%z</td>
</tr>
<tr>
<td>round(x,[,ndigits])</td>
<td>对x四舍五入，保留ndigits位小数，round(x)表示返回整数</td>
</tr>
<tr>
<td>max(a,b,c,d)</td>
<td>中的最大指</td>
</tr>
<tr>
<td>min(x1,x2,x3,x4,x5)</td>
<td>中的最小值</td>
</tr>
</tbody></table>
<h2 id="数字类型的相互转换"><a href="#数字类型的相互转换" class="headerlink" title="数字类型的相互转换"></a>数字类型的相互转换</h2><p>int(x):x可以是浮点，字符串<br>float(x)：可以是整数或字符串<br>complex(re[,im])：实数部分为re，虚数部分为im   re可以是整数，浮点，字符串  rm 不能为字符串</p>
<h2 id="math库"><a href="#math库" class="headerlink" title="math库"></a>math库</h2><h3 id="常用math库函数常数："><a href="#常用math库函数常数：" class="headerlink" title="常用math库函数常数："></a>常用math库函数常数：</h3><p>math.pi<br>math.e<br>math.inf   正无穷大   -math.inf 负无穷大<br>math.nan    NaN  not a number</p>
<h3 id="math库几个函数"><a href="#math库几个函数" class="headerlink" title="math库几个函数"></a>math库几个函数</h3><p>math.fsum([x,y,…])   求和</p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><p>x+y<br>x<em>n  或 n</em>x<br>x in s   若x是n的子串则返回true  否则返回false<br>str[i]<br>str[N:M]</p>
<h3 id="内置字符串处理函数"><a href="#内置字符串处理函数" class="headerlink" title="内置字符串处理函数"></a>内置字符串处理函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">len(x)   返回字符串的长度，有几个字符就返回几</span><br><span class="line">str(x)   	返回任意类型的字符串格式</span><br><span class="line">chr(x)		x是对应的Unicode编码，返回单字符</span><br><span class="line">ord(x)		x是单字符，返回Unicode编码</span><br><span class="line">hex(x)		x是整数，返回十六进制</span><br><span class="line">oct(x)		x是整数，返回八进制</span><br></pre></td></tr></table></figure>
<h3 id="内置的字符串处理方法"><a href="#内置的字符串处理方法" class="headerlink" title="内置的字符串处理方法"></a>内置的字符串处理方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str.lower()</span><br><span class="line">str.upper()</span><br><span class="line">str.islower()</span><br><span class="line">str.isprintable()</span><br><span class="line">str.isnumeric()</span><br><span class="line">str.isspace()</span><br><span class="line">str.endswith(suffix[,start[,end]])</span><br><span class="line">str.startswith(prefix[,start[,end]])</span><br><span class="line">str.split(sep=<span class="literal">None</span>,maxsplit=<span class="number">-1</span>)</span><br><span class="line">str.count(sub[,start[,end]])</span><br><span class="line">str.replace(old,new[,count])</span><br><span class="line">str.center(width[,fillchar])</span><br><span class="line">str.strip([chars])</span><br><span class="line">str.join(iterable)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="字符串类型的格式化-format"><a href="#字符串类型的格式化-format" class="headerlink" title="字符串类型的格式化  format()"></a>字符串类型的格式化  format()</h3><p>其实输出有两种：<br>1.%<br><img src="/images/python/a12.png"><br>2.format()<br><img src="/images/python/a13.png"></p>
<p><em>这里主要介绍format（）</em></p>
<p>槽的顺序：<br><img src="/images/python/f2.jpg"></p>
<p>槽中相应的字段<br><img src="/images/python/f1.png"></p>
<p>介绍一下：&lt;类型&gt;</p>
<ul>
<li><p>整数类型<br>b:整数的二进制<br>c：整数对应的Unicode<br>d:十进制<br>o: 整数对应的八进制<br>x： 小写的十六进制<br>X： 大写的十六进制</p>
</li>
<li><p>浮点类型<br>e:  指数  科学计算<br>E:   大写<br>f：标准浮点数<br>%：百分形式</p>
</li>
</ul>
<h3 id="字符串和字节流"><a href="#字符串和字节流" class="headerlink" title="字符串和字节流"></a>字符串和字节流</h3><p>字节:8个比特组成，以构成字节流<br>字符串由编码字符的序列组成，根据编码不同，长度也不同<br>所以，从存储空间来看，字符串和字节流不同。。。</p>
<p>字符值在内存中形成，由字节流经过编码后产生。。<br>硬盘上所有的文件都是以字节形式存储。。。</p>
<h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><p>可以：<br>x,y=10,12   逗号分隔，一一对应即可<br>x.y=y,x    也不用担心中间变量问题</p>
<h2 id="input（）"><a href="#input（）" class="headerlink" title="input（）"></a>input（）</h2><p>返回的是<strong>字符串</strong>，配合eval()函数才能变为相应类型。。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>help(input)</span><br><span class="line">Help on built-<span class="keyword">in</span> function input <span class="keyword">in</span> module builtins:</span><br><span class="line"></span><br><span class="line">input(prompt=<span class="literal">None</span>, /)</span><br><span class="line">    Read a string <span class="keyword">from</span> standard input.  The trailing newline <span class="keyword">is</span> stripped.</span><br><span class="line">    </span><br><span class="line">    The prompt string, <span class="keyword">if</span> given, <span class="keyword">is</span> printed to standard output without a</span><br><span class="line">    trailing newline before reading input.</span><br><span class="line">    </span><br><span class="line">    If the user hits EOF (*nix: Ctrl-D, Windows: Ctrl-Z+Return), <span class="keyword">raise</span> EOFError.</span><br><span class="line">    On *nix systems, readline <span class="keyword">is</span> used <span class="keyword">if</span> available.</span><br></pre></td></tr></table></figure>
<h3 id="eval-去掉变量的引号"><a href="#eval-去掉变量的引号" class="headerlink" title="eval()  去掉变量的引号"></a>eval()  去掉变量的引号</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>help(eval)</span><br><span class="line">Help on built-<span class="keyword">in</span> function eval <span class="keyword">in</span> module builtins:</span><br><span class="line"></span><br><span class="line">eval(source, globals=<span class="literal">None</span>, locals=<span class="literal">None</span>, /)</span><br><span class="line">    Evaluate the given source <span class="keyword">in</span> the context of globals <span class="keyword">and</span> locals.</span><br><span class="line">    </span><br><span class="line">    The source may be a string representing a Python expression</span><br><span class="line">    <span class="keyword">or</span> a code object <span class="keyword">as</span> returned by compile().</span><br><span class="line">    The globals must be a dictionary <span class="keyword">and</span> locals can be any mapping,</span><br><span class="line">    defaulting to the current globals <span class="keyword">and</span> locals.</span><br><span class="line">    If only globals <span class="keyword">is</span> given, locals defaults to it.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="print-函数"><a href="#print-函数" class="headerlink" title="print 函数"></a>print 函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>help(<span class="keyword">print</span>)</span><br><span class="line">Help on built-<span class="keyword">in</span> function <span class="keyword">print</span> <span class="keyword">in</span> module builtins:</span><br><span class="line"></span><br><span class="line">print(...)</span><br><span class="line">    print(value, ..., sep=<span class="string">&#x27; &#x27;</span>, end=<span class="string">&#x27;\n&#x27;</span>, file=sys.stdout, flush=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    Prints the values to a stream, <span class="keyword">or</span> to sys.stdout by default.</span><br><span class="line">    Optional keyword arguments:</span><br><span class="line">    file:  a file-like object (stream); defaults to the current sys.stdout.</span><br><span class="line">    sep:   string inserted between values, default a space.</span><br><span class="line">    end:   string appended after the last value, default a newline.</span><br><span class="line">    flush: whether to forcibly flush the stream.</span><br></pre></td></tr></table></figure>
<p>print(“”.format())  函数里面接format格式化字符串。。。<br>详询格式化字符串的format的使用方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>help(format)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>help(str.format)</span><br><span class="line">Help on method_descriptor:</span><br><span class="line"></span><br><span class="line">format(...)</span><br><span class="line">    S.format(*args, **kwargs) -&gt; str</span><br><span class="line">    </span><br><span class="line">    Return a formatted version of S, using substitutions <span class="keyword">from</span> args <span class="keyword">and</span> kwargs.</span><br><span class="line">    The substitutions are identified by braces (<span class="string">&#x27;&#123;&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;&#125;&#x27;</span>).</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="程序的控制结构"><a href="#程序的控制结构" class="headerlink" title="程序的控制结构"></a>程序的控制结构</h2><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><ul>
<li><p>if<br>  if … :</p>
<pre><code>  ....</code></pre>
</li>
<li><p>if-else:<br>  if … :</p>
<pre><code>  ....</code></pre>
<p>  else:</p>
<pre><code>  ...</code></pre>
</li>
</ul>
<p>也可以写在一行里：<br><code>&lt;expression1&gt; if &lt;condition&gt; else &lt;expression2&gt;</code></p>
<ul>
<li>if elif else<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ... :</span><br><span class="line">	...</span><br><span class="line"><span class="keyword">elif</span> ... :</span><br><span class="line">	....</span><br><span class="line"><span class="keyword">elif</span> ... :</span><br><span class="line">	...</span><br><span class="line">	...</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	.....</span><br></pre></td></tr></table></figure>
<h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3>for i in xx:<br>  …</li>
</ul>
<p>常用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> file:   </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> string:</span><br><span class="line"></span><br><span class="line">列表:</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> list:</span><br></pre></td></tr></table></figure>
<p>有一种配合  else：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> .. <span class="keyword">in</span> ..:</span><br><span class="line">	...</span><br><span class="line">	..</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	...</span><br><span class="line">只在<span class="keyword">for</span>正常执行并结束后才执行<span class="keyword">else</span>后的语句。。。</span><br></pre></td></tr></table></figure>


<h3 id="while-无限循环"><a href="#while-无限循环" class="headerlink" title="while  无限循环"></a>while  无限循环</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> &lt;条件&gt;:</span><br><span class="line">	....</span><br><span class="line"></span><br><span class="line">----------------------</span><br><span class="line"><span class="keyword">while</span> &lt;条件&gt;:</span><br><span class="line">	....</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	....</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="break-continue"><a href="#break-continue" class="headerlink" title="break, continue"></a>break, continue</h3><p>break：跳出最内层for或while<br>continue：结束本轮循环</p>
<p><strong>continue 对循环的扩展用法else 没有影响</strong><br><strong>break   ………………………………………..有影响</strong></p>
<h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><p>两种引入方式</p>
<ul>
<li>one<br>from [库]  import a ,b,c,d<br>from [库] import *  通配符</li>
<li>two<br>import [库]    但是这种方式要加库名  turtle.a()</li>
</ul>
<h1 id="内建函数"><a href="#内建函数" class="headerlink" title="内建函数"></a>内建函数</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">all()			</span><br><span class="line">any()</span><br><span class="line">hash()</span><br><span class="line">id()</span><br><span class="line">reversed() 逆序</span><br><span class="line">sorted()</span><br><span class="line">type()</span><br></pre></td></tr></table></figure>

<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="定义一个函数"><a href="#定义一个函数" class="headerlink" title="定义一个函数"></a>定义一个函数</h2><ul>
<li>def关键字</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> &lt;函数名&gt;(<span class="params">&lt;参数列表&gt;</span>):</span></span><br><span class="line">	&lt;函数体&gt;</span><br><span class="line">	<span class="keyword">return</span> &lt;返回值列表&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>lambda 函数<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;函数名&gt; = <span class="keyword">lambda</span> &lt;参数列表&gt;:&lt;表达式&gt; </span><br><span class="line"><span class="comment">#这样只需一行即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#等价于：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> 函数名(<span class="params">参数列表</span>)：</span></span><br><span class="line"><span class="function">	<span class="title">return</span> 表达式</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="参数的传递"><a href="#参数的传递" class="headerlink" title="参数的传递"></a>参数的传递</h2><h3 id="有些参数可选"><a href="#有些参数可选" class="headerlink" title="有些参数可选"></a>有些参数可选</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#默认值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fa</span>(<span class="params">str,nu=<span class="number">2</span></span>):</span></span><br><span class="line">	....</span><br><span class="line">--------------</span><br><span class="line">由于函数调用时是按顺序输入参数，可选参数必须定义在非可选参数后面。。。</span><br></pre></td></tr></table></figure>
<h3 id="可变数量参数"><a href="#可变数量参数" class="headerlink" title="可变数量参数"></a>可变数量参数</h3><ul>
<li>这里指元组   加个* 号<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">v</span>(<span class="params">a,*b</span>)：</span></span><br><span class="line"><span class="function">	<span class="title">print</span>(<span class="params">type(<span class="params">b</span>)</span>)</span></span><br><span class="line"><span class="function">	<span class="title">for</span> <span class="title">n</span> <span class="title">in</span> <span class="title">b</span>:</span></span><br><span class="line">		a+=n</span><br><span class="line">	<span class="keyword">return</span> a</span><br><span class="line">---------------------</span><br><span class="line"><span class="comment">#调用：</span></span><br><span class="line">v(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#在参数前加*号，此参数必须放在参数列表的最后</span></span><br><span class="line"><span class="comment">#调用时，这些参数会被当作元组类型传递到函数当中。。</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="参数位置和名称传递"><a href="#参数位置和名称传递" class="headerlink" title="参数位置和名称传递"></a>参数位置和名称传递</h2><ul>
<li>按照形参名称输入，则可换位置<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">func(a,b,c)</span><br><span class="line"></span><br><span class="line">nu=func(b=<span class="number">1</span>,c=<span class="number">3</span>,b=<span class="number">46</span>)</span><br></pre></td></tr></table></figure>
<h2 id="函数可以没有-return"><a href="#函数可以没有-return" class="headerlink" title="函数可以没有 return"></a>函数可以没有 return</h2></li>
</ul>
<h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><blockquote>
<p>全局变量，局部变量</p>
</blockquote>
<ul>
<li><p>首先，函数内的变量是局部变量</p>
</li>
<li><p>函数外的变量是全局变量</p>
</li>
<li><p>要想在函数内使用全局变量，得使用 global a  声明你要引用外面的全局变量，并且改变它的值。。。</p>
</li>
</ul>
<blockquote>
<p>函数空间，在内存里单独开辟<br>函数内可以到函数空间外寻找列表等组合数据类型并引用它，从而修改它们的值<br>无需使用 global 关键字。。。</p>
</blockquote>
<blockquote>
<p>而函数内创建的组合类型数据（比如列表）则会在函数执行完而消失，不会保存，是局部变量。。。</p>
</blockquote>
<h1 id="python中的引用与创建：组合类型数据"><a href="#python中的引用与创建：组合类型数据" class="headerlink" title="python中的引用与创建：组合类型数据"></a>python中的引用与创建：组合类型数据</h1><p>** 比如说列表等组合类型变量**  </p>
<blockquote>
<p>只有当赋值时使用[],才有列表被真实创建，否则只是对之前创建好的列表的一次引用。。。</p>
</blockquote>
<h1 id="组合数据类型"><a href="#组合数据类型" class="headerlink" title="组合数据类型"></a>组合数据类型</h1><p>先看下分类：<br><img src="/images/python/z1.png"></p>
<h2 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h2><p>常用：成员关系操作符(in),长度计算函数len()  ,分片：[]<br><strong>元组生成后是固定的</strong></p>
<ul>
<li>只要是序列类型就可以使用索引体系</li>
<li>12个通用操作符和函数：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x in s</span><br><span class="line">x not in s</span><br><span class="line">s+t</span><br><span class="line">s*n 或 n*s</span><br><span class="line">s[i]</span><br><span class="line">s[i:j]</span><br><span class="line">s[i:j:k]  步长为k</span><br><span class="line">len(s)</span><br><span class="line">min(s)   最小元素</span><br><span class="line">max(s)		最大元素</span><br><span class="line">s.index(x[,i[,j]])  i到j位置，第一次出现x元素的位置。。</span><br><span class="line">s.count(x)   出现x的总次数</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><ul>
<li>无序</li>
<li>元素不可重复</li>
<li>只能是固定的数据类型，不能是列表，字典，集合</li>
<li>set(x)生成集合  {}</li>
</ul>
<h3 id="集合类型的操作符"><a href="#集合类型的操作符" class="headerlink" title="集合类型的操作符"></a>集合类型的操作符</h3><p>&amp; 交集<br>| 并集<br>- 差集<br>^ 补集</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">S-T或S.difference(T)</span><br><span class="line"></span><br><span class="line">S-&#x3D;T或S.difference_update(T)</span><br><span class="line"></span><br><span class="line">S&amp;T或S.intersection(T)</span><br><span class="line"></span><br><span class="line">S&amp;&#x3D;T或S.intersection_update(T)</span><br><span class="line"></span><br><span class="line">S^T或S.symmetric_difference(T)   返回一个新集合，包括S和T中的元素，但是不包括同时在内的元素</span><br><span class="line"></span><br><span class="line">S^T或S.symmetric_dirrerence_update(T)  更新集合</span><br><span class="line"></span><br><span class="line">S|T或S.union(T)</span><br><span class="line"></span><br><span class="line">S&#x3D;|T或S.update(T)</span><br><span class="line"></span><br><span class="line">S&lt;&#x3D;T 或 S.issubset(T)</span><br><span class="line"></span><br><span class="line">S&gt;&#x3D;T或S.issuperset(T)</span><br></pre></td></tr></table></figure>

<h3 id="集合类型的操作函数或方法"><a href="#集合类型的操作函数或方法" class="headerlink" title="集合类型的操作函数或方法"></a>集合类型的操作函数或方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">S.add(x)</span><br><span class="line">S.clear()</span><br><span class="line">S.copy()  </span><br><span class="line">S.pop()  随机返回S中的一个元素</span><br><span class="line">S.discard(x)  如果x在S中，移除x，不在的话没关系</span><br><span class="line">S.remove(x)</span><br><span class="line">S.isdisjoint(T)	   返回 <span class="literal">True</span> <span class="literal">False</span>   如果X和T没有相同的元素则<span class="literal">True</span></span><br><span class="line">len(S)</span><br><span class="line">x <span class="keyword">in</span> S</span><br><span class="line">x <span class="keyword">not</span> <span class="keyword">in</span> S</span><br></pre></td></tr></table></figure>

<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul>
<li>可比较，&lt; ….等，实际是列表元素的逐一比较。。</li>
<li>list()</li>
</ul>
<h3 id="列表跟数组（C）"><a href="#列表跟数组（C）" class="headerlink" title="列表跟数组（C）"></a>列表跟数组（C）</h3><ol>
<li>数组需要预先分配大小</li>
<li>数组要求元素类型一致</li>
</ol>
<h3 id="列表特有的函数或方法"><a href="#列表特有的函数或方法" class="headerlink" title="列表特有的函数或方法"></a>列表特有的函数或方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ls[i]=x</span><br><span class="line"></span><br><span class="line">ls[i:j]=lt</span><br><span class="line"></span><br><span class="line">ls[i:j:k]=lt</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> ls[i:j]</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> ls[i:j:k]</span><br><span class="line"></span><br><span class="line">ls+=lt或ls.extend(lt)</span><br><span class="line"></span><br><span class="line">ls*=n</span><br><span class="line"></span><br><span class="line">ls.append(x)</span><br><span class="line"></span><br><span class="line">ls.clear()</span><br><span class="line"></span><br><span class="line">ls.copy()</span><br><span class="line"></span><br><span class="line">ls.insert(i,x)</span><br><span class="line"></span><br><span class="line">ls.pop(i)   删除i位置元素</span><br><span class="line"></span><br><span class="line">ls.remove(x)</span><br><span class="line"></span><br><span class="line">ls.reverse(x)</span><br></pre></td></tr></table></figure>

<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>&lt;键&gt;:内容</p>
<ul>
<li>可以把字典看成集合</li>
<li>键值 ：  {}</li>
<li>值=变量[键]<br>&lt;a&gt;.&lt;b&gt;<h3 id="函数或方法"><a href="#函数或方法" class="headerlink" title="函数或方法"></a>函数或方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;dict&gt;.keys()</span><br><span class="line"></span><br><span class="line">&lt;dict&gt;.values()</span><br><span class="line"></span><br><span class="line">&lt;dict&gt;.items()  返回所有的键值对</span><br><span class="line"></span><br><span class="line">&lt;dict&gt;.get(&lt;key&gt;,&lt;default&gt;)    键存在则返回相应值，否则返回默认值</span><br><span class="line"></span><br><span class="line">&lt;dict&gt;.pop(&lt;key&gt;,&lt;default&gt;)    删除</span><br><span class="line"></span><br><span class="line">&lt;dict&gt;.popitem()   取出，并返回元组</span><br><span class="line"></span><br><span class="line">&lt;dict&gt;.clear()</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> &lt;dict&gt;[&lt;key&gt;]</span><br><span class="line"></span><br><span class="line">&lt;key&gt; <span class="keyword">in</span> &lt;dict&gt;</span><br></pre></td></tr></table></figure>
往字典加元素：<br><code>&lt;dict&gt;[&#39;a&#39;]=&#39;okok&#39;</code></li>
</ul>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><blockquote>
<p>按照一定顺序检索内容的体系<br>两类：数字索引（位置索引);字符索引（单词索引）<br>字典采用字符索引</p>
</blockquote>
<h2 id="python中界定是否是固定类型"><a href="#python中界定是否是固定类型" class="headerlink" title="python中界定是否是固定类型"></a>python中界定是否是固定类型</h2><p>是看其是否能进行哈希运算，能的话就是固定类型</p>
<h3 id="哈希运算"><a href="#哈希运算" class="headerlink" title="哈希运算"></a>哈希运算</h3><blockquote>
<p>将任意长度的二进制值映射为较短的固定长度的二进制值，这个固定长度的二进制值称为哈希值。。<br>哈希值是对数据的一种有损且紧凑的表示形式。<br>hash(x)</p>
</blockquote>
<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>try-except</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	...</span><br><span class="line"><span class="keyword">except</span> &lt;异常类型&gt;</span><br><span class="line">	...</span><br></pre></td></tr></table></figure>

<p>高级用法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	...</span><br><span class="line"><span class="keyword">except</span> &lt;exception1&gt;:</span><br><span class="line">	...</span><br><span class="line"><span class="keyword">except</span> &lt;exception2&gt;:</span><br><span class="line">	...</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">	...</span><br></pre></td></tr></table></figure>
<p><em>可加finally  或 else 使用</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	...</span><br><span class="line"><span class="keyword">except</span> &lt;类型<span class="number">1</span>&gt;:</span><br><span class="line">	...</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	...</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">	...</span><br></pre></td></tr></table></figure>
<p>当try语句后的没有异常，则执行else语句，<br>而finally后的语句则不管出不出异常都会执行。。。<br>常见异常类型：<br><img src="/images/python/e1.png"></p>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><ul>
<li><p>计算圆面积</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">radius=<span class="number">25</span></span><br><span class="line">area=<span class="number">3.14</span>*radius*radius</span><br><span class="line">print(area)</span><br><span class="line">print(<span class="string">&quot;&#123;:.2f&#125;&quot;</span>.format(area))</span><br></pre></td></tr></table></figure>
<p>print函数的用法<br>格式化输出</p>
</li>
<li><p>简单的人名对话</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=input(<span class="string">&quot;输入姓名:&quot;</span>)</span><br><span class="line">print(<span class="string">&quot;&#123;&#125;同学，学好python&quot;</span>.format(name))</span><br><span class="line">print(<span class="string">&quot;&#123;&#125;同学，学好python&quot;</span>.format(name[<span class="number">0</span>]))</span><br><span class="line">print(<span class="string">&quot;&#123;&#125;同学，学好python&quot;</span>.format(name[<span class="number">1</span>:]))</span><br></pre></td></tr></table></figure>
<p>还是格式化输出</p>
</li>
<li><p>斐波那契数列 Fibonacci Sequence,又称为黄金分割数列，<br>F(n):    F(0)=0,F(1)=1,F(n)=F(n-2)+F(n-1)</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a,b=<span class="number">0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> a &lt;<span class="number">1000</span>:</span><br><span class="line">    print(a,end=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    a,b=b,a+b</span><br></pre></td></tr></table></figure>
<p><code>0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,</code></p>
<ul>
<li><p>同切圆的绘制：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle  </span><br><span class="line">turtle.pensize(<span class="number">2</span>)  <span class="comment">#设置画笔大小</span></span><br><span class="line">turtle.circle(<span class="number">10</span>)	<span class="comment">#画半径位10像素的圆</span></span><br><span class="line">turtle.circle(<span class="number">40</span>)</span><br><span class="line">turtle.circle(<span class="number">80</span>)</span><br><span class="line">turtle.circle(<span class="number">160</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/images/python/a1.gif"></p>
</li>
<li><p>日期和时间的输出<br>输出当前计算机系统的日期和时间</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">now=datetime.now()   <span class="comment">#获得当前日期和时间</span></span><br><span class="line">print(now)			</span><br><span class="line">print(now.strftime(<span class="string">&quot;%x&quot;</span>))		<span class="comment">#输出其中的日期部分</span></span><br><span class="line">print(now.strftime(<span class="string">&quot;%x&quot;</span>))		<span class="comment">#输出其中的时间部分</span></span><br></pre></td></tr></table></figure>
<p>关于strftime(“%x”) 我也不是很清楚</p>
<ul>
<li>画五角星<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> *</span><br><span class="line">fillcolor(<span class="string">&quot;red&quot;</span>)</span><br><span class="line">begin_fill()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    forward(<span class="number">200</span>)</span><br><span class="line">    right(<span class="number">144</span>)</span><br><span class="line">    <span class="keyword">if</span> abs(pos())&lt;<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">end_fill()</span><br></pre></td></tr></table></figure></li>
<li>太阳花<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> *</span><br><span class="line">color(<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;yellow&#x27;</span>)</span><br><span class="line">begin_fill()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    forward(<span class="number">200</span>)</span><br><span class="line">    right(<span class="number">170</span>)</span><br><span class="line">    <span class="keyword">if</span> abs(pos())&lt;<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">end_fill()</span><br><span class="line">done()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<img src="/images/python/a3.gif"></li>
</ul>
<h2 id="温度转换"><a href="#温度转换" class="headerlink" title="温度转换"></a>温度转换</h2><ul>
<li>摄氏度(Celsius) 结冰点 0  沸点100 </li>
<li>华氏度(Fabrenheit) 结冰点 32  沸点212</li>
</ul>
<p>** C=(F=32)/1.8**<br>*<em>F=C</em>1.8 +32**</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">TempStr=input(<span class="string">&quot;请输入带有符号的温度值： &quot;</span>)</span><br><span class="line"><span class="keyword">if</span> TempStr[<span class="number">-1</span>] <span class="keyword">in</span> [<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;f&#x27;</span>]:</span><br><span class="line">    C=(eval(TempStr[<span class="number">0</span>:<span class="number">-1</span>])<span class="number">-32</span>)/<span class="number">1.8</span></span><br><span class="line">    print(<span class="string">&quot;转换后的温度位：&#123;:.2f&#125;C&quot;</span>.format(C))</span><br><span class="line"><span class="keyword">elif</span> TempStr[<span class="number">-1</span>] <span class="keyword">in</span> [<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]:</span><br><span class="line">          F=<span class="number">1.8</span>*eval(TempStr[:<span class="number">-1</span>]) +<span class="number">32</span></span><br><span class="line">          print(<span class="string">&quot;转换后的温度位：&#123;:.2f&#125;&quot;</span>.format(F))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">&quot;error input&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="/images/python/a4.gif"></p>
<h1 id="文件和数据格式化"><a href="#文件和数据格式化" class="headerlink" title="文件和数据格式化"></a>文件和数据格式化</h1><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><blockquote>
<p>文本，视频，图片等</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text=open(<span class="string">&quot;a.txt&quot;</span>,<span class="string">&quot;rt&quot;</span>)</span><br><span class="line">print(text.readline())</span><br><span class="line">text.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>文件的打开和关闭：<br>open()<br>……<br>…..<br>close()</p>
<p><code>&lt;变量名&gt;=open(&lt;文件名&gt;,&lt;打开模式&gt;)</code></p>
<p>文件的打开模式有七个：<br>|打开模式|含义|<br>|—|—|<br>|’r’|只读，默认，不存在则返回异常|<br>|’w’|覆盖写模式，存在也完全覆盖|<br>|’x’|创建写模式，存在返回异常|<br>|’a’|追加写模式|<br>|’b’|二进制|<br>|’t’|文本文件模式，默认|<br>|’+’|与r w x a一起使用，在原功能的同时基础上增加读写功能|</p>
<h2 id="文件内容读写"><a href="#文件内容读写" class="headerlink" title="文件内容读写"></a>文件内容读写</h2><ul>
<li>读:python将文件本身作为一个行序列<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;file&gt;.readall()</span><br><span class="line"></span><br><span class="line">&lt;file&gt;.read(size=<span class="number">-1</span>)  size 表示长度</span><br><span class="line"></span><br><span class="line">&lt;file&gt;.readline(size=<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">&lt;file&gt;.readlines(hint=<span class="number">-1</span>)  读入hint行，以每行为元素形成一个列表，默认则读入全部行</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>写：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;file&gt;.write(s)    </span><br><span class="line">&lt;file&gt;.writelines(lines)</span><br><span class="line">&lt;file&gt;.seek(offset)   改变当前文件操作符指针的位置， offset的值：<span class="number">0</span>为文件开头，<span class="number">1</span>为当前位置，<span class="number">2</span>为文件结尾</span><br></pre></td></tr></table></figure>
<h1 id="PIL库"><a href="#PIL库" class="headerlink" title="PIL库"></a>PIL库</h1>python image library<br><code>pip install pillow</code>  安装</li>
</ul>
<p>主要处理：</p>
<ul>
<li>图像归档</li>
<li>图像处理<h2 id="Image类"><a href="#Image类" class="headerlink" title="Image类"></a>Image类</h2></li>
</ul>
<p>图像文件<br>图像文件头部的元素剧信息，这部分信息包括图像的格式，颜色，大小等。。。</p>
<ul>
<li><p>图像的读取和创建：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Image.open(filename)</span><br><span class="line"></span><br><span class="line">Image.new(mode,size,color)</span><br><span class="line"></span><br><span class="line">Image.open(StringIO,StringIO(buffer))</span><br><span class="line"></span><br><span class="line">Image.frombytes(mode,size,data)</span><br><span class="line"></span><br><span class="line">Image.verify()</span><br></pre></td></tr></table></figure>
</li>
<li><p>常用属性：</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Image.format</span><br><span class="line">表识图像格式或来源，如果图像不是从文件读取，则为none</span><br><span class="line">Image.mode</span><br><span class="line">图像的色彩模式，L为灰度图像，RGB，CMYK</span><br><span class="line">Image.size</span><br><span class="line">返回元组，（宽，高）像素</span><br><span class="line">Image.palette</span><br><span class="line">调色板属性</span><br></pre></td></tr></table></figure>

<h3 id="读取动态图：gif-fli-flc-tiff等"><a href="#读取动态图：gif-fli-flc-tiff等" class="headerlink" title="读取动态图：gif  fli flc tiff等"></a>读取动态图：gif  fli flc tiff等</h3><p>open()自动加载第一帧</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Image.seek(frame)</span><br><span class="line">跳装并返回指定帧</span><br><span class="line"></span><br><span class="line">Image.tell()</span><br><span class="line">返回单前帧序号</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="图像转换和保存"><a href="#图像转换和保存" class="headerlink" title="图像转换和保存"></a>图像转换和保存</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Image.save(filename,format)</span><br><span class="line">format是图片格式</span><br><span class="line"></span><br><span class="line">Image.convert(mode)</span><br><span class="line">新的模式</span><br><span class="line"></span><br><span class="line">Image.thumbnail(size)</span><br><span class="line">创建图像缩略图  size 是二元组</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="图像旋转和缩放"><a href="#图像旋转和缩放" class="headerlink" title="图像旋转和缩放"></a>图像旋转和缩放</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Image.resize(size)</span><br><span class="line">按size大小调整图像，生成副本</span><br><span class="line"></span><br><span class="line">Image.rotate(angle)</span><br><span class="line">按angle角度旋转图像，生成副本</span><br></pre></td></tr></table></figure>
<h3 id="对通道进行操作"><a href="#对通道进行操作" class="headerlink" title="对通道进行操作"></a>对通道进行操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Image.point(func)</span><br><span class="line"></span><br><span class="line">Image.split()</span><br><span class="line">提取RGB图像的每个颜色通道，返回图像副本</span><br><span class="line"></span><br><span class="line">Image.merge(mode,bands)</span><br><span class="line">合并通道，mode表示色彩，bands表示新的色彩通道</span><br><span class="line"></span><br><span class="line">Image.blend(im1,im2,alpha)</span><br></pre></td></tr></table></figure>

<h3 id="ImageFilter类"><a href="#ImageFilter类" class="headerlink" title="ImageFilter类"></a>ImageFilter类</h3><h3 id="ImageEnhance类"><a href="#ImageEnhance类" class="headerlink" title="ImageEnhance类"></a>ImageEnhance类</h3><h2 id="字符画"><a href="#字符画" class="headerlink" title="字符画"></a>字符画</h2><p>ASCII 字符可模拟黑，白，灰<br>所以对每个色彩设定一个值得灰度对应字符。。。<br><code>ascii_char=list(&quot;akjdfjafj35#^&amp;$^**$^&quot;)</code></p>
<p>定义色彩向灰度转化公式：<br><code>Gray=R*0.2126+G*0.7152+B*0.0722</code>  R G B 是颜色值，256种灰度</p>
<p>RGB与字符集对应关系：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_char</span>(<span class="params">r,b,g,alpha=<span class="number">256</span></span>):</span></span><br><span class="line">	<span class="keyword">if</span> alpha==<span class="number">0</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">	gray=int(r*<span class="number">0.2126</span>+g*<span class="number">0.7152</span>+b*<span class="number">0.0722</span>)</span><br><span class="line">	unit=<span class="number">256</span>/len(ascii_char)<span class="comment">#一个字符代表一段取值</span></span><br><span class="line">	<span class="keyword">return</span> ascii_char[gray//unit]一个字符代表一些灰度值</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#e12.1DrawCharImage</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">ascii_char = list(<span class="string">&#x27;&quot;$%_&amp;WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\|()1&#123;&#125;[]?-/+@&lt;&gt;i!;:,\^`.&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_char</span>(<span class="params">r, b, g, alpha=<span class="number">256</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> alpha == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27; &#x27;</span></span><br><span class="line">    gray = int(<span class="number">0.2126</span> * r + <span class="number">0.7152</span> * g + <span class="number">0.0722</span> * b)</span><br><span class="line">    unit = <span class="number">256</span> / len(ascii_char)</span><br><span class="line">    <span class="keyword">return</span> ascii_char[int(gray//unit)]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    im = Image.open(<span class="string">&#x27;astro.jpg&#x27;</span>)</span><br><span class="line">    WIDTH, HEIGHT = <span class="number">100</span>, <span class="number">60</span></span><br><span class="line">    im = im.resize((WIDTH, HEIGHT))</span><br><span class="line">    txt = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(HEIGHT):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(WIDTH):</span><br><span class="line">            txt += get_char(*im.getpixel((j, i)))</span><br><span class="line">        txt += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    fo = open(<span class="string">&quot;pic_char.txt&quot;</span>,<span class="string">&quot;w&quot;</span>)</span><br><span class="line">    fo.write(txt)</span><br><span class="line">    fo.close()</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>
<h1 id="turtle库"><a href="#turtle库" class="headerlink" title="turtle库"></a>turtle库</h1><h2 id="先画个蟒蛇"><a href="#先画个蟒蛇" class="headerlink" title="先画个蟒蛇"></a>先画个蟒蛇</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">turtle.setup(<span class="number">600</span>,<span class="number">600</span>,<span class="number">600</span>,<span class="number">600</span>)  <span class="comment">#绘制一个坐标，(长，宽，开始位置x,开始位置y)</span></span><br><span class="line"></span><br><span class="line">turtle.penup()				</span><br><span class="line"><span class="comment">#turtle.penup()别名 turtle.pu(),turtle.up()</span></span><br><span class="line"><span class="comment">#抬起画笔，也就是不能画，但是可以移动</span></span><br><span class="line"><span class="comment">#与之对应的是turtle.pendown()</span></span><br><span class="line"><span class="comment">#别名 turtle.pd(),turtle.down()  </span></span><br><span class="line"><span class="comment">#放下画笔，这个时候移到的话就会绘制了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">turtle.fd(<span class="number">-250</span>)</span><br><span class="line"><span class="comment">#往一个方向移到多少距离</span></span><br><span class="line"><span class="comment">#别名  .forward()  参数是可正可负的，负：相反方向而已</span></span><br><span class="line"></span><br><span class="line">turtle.pendown()</span><br><span class="line"></span><br><span class="line">turtle.pensize(<span class="number">25</span>)</span><br><span class="line"><span class="comment">#设置画笔尺寸，线条宽度，若无则返回当前画笔宽度</span></span><br><span class="line"><span class="comment">#别名  .width()</span></span><br><span class="line"></span><br><span class="line">turtle.pencolor(<span class="string">&quot;purple&quot;</span>)</span><br><span class="line"><span class="comment">#给画笔设置颜色，可用(r,g,b)</span></span><br><span class="line"></span><br><span class="line">turtle.seth(<span class="number">-40</span>)</span><br><span class="line"><span class="comment">#参数要个角度值,要转方向，没移动，此角度指以正东为绝对0度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    turtle.circle(<span class="number">40</span>,<span class="number">80</span>)</span><br><span class="line">    turtle.circle(<span class="number">-40</span>,<span class="number">80</span>)</span><br><span class="line"><span class="comment">#turtle.circle(radius,extent=none) 用来绘制一个弧形，none的话为整个圆。</span></span><br><span class="line"><span class="comment">#(半径，扇形的角度)正值与负值的区别。。。</span></span><br><span class="line">turtle.circle(<span class="number">40</span>,<span class="number">80</span>/<span class="number">2</span>)</span><br><span class="line">turtle.fd(<span class="number">40</span>)</span><br><span class="line">turtle.circle(<span class="number">16</span>,<span class="number">180</span>)</span><br><span class="line">turtle.fd(<span class="number">40</span>*<span class="number">2</span>/<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/images/python/a6.gif"></p>
<p>turtle.setup:<br><img src="/images/python/a7.jpg"><br>方向：<br><img src="/images/python/a8.png"><br>注意使用(r,g,b)时，不是所有的颜色都有,会有异常的：<br><img src="/images/python/a9.gif"></p>
<p>turtle.seth():<br><img src="/images/python/a10.png"></p>
<h1 id="random库"><a href="#random库" class="headerlink" title="random库"></a>random库</h1><p>** python 的random库采用梅森旋转法(Mersenne Twister)生成。**<br><em>其最基本的函数是random.random()</em></p>
<h2 id="随机数，与伪随机数"><a href="#随机数，与伪随机数" class="headerlink" title="随机数，与伪随机数"></a>随机数，与伪随机数</h2><p>计算机是按一定的算法产生随机数的。。。是伪随机数。。</p>
<h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><p><img src="/images/python/s1.gif"></p>
<p>seed():<br><img src="/images/python/s2.gif"></p>
<p>随机种子：默认当前系统时间，只要种子相同，每次生成的随机数列也相同。。。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> random</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.seed(<span class="number">55</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.randint(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.randint(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.randint(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.randint(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.seed(<span class="number">55</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.randint(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.randint(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.randint(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.randint(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>
<h2 id="计算-π-值"><a href="#计算-π-值" class="headerlink" title="计算 π 值"></a>计算 π 值</h2><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><ul>
<li>迄今为止最好的计算π 值得方法  是 BBP公式：<br><img src="/images/python/s4.jpg"></li>
</ul>
<p>而由于计算机得出现，使得另一种方法：<br>蒙特卡洛：(Monte Carlo)<br>试验的方法，圆内点/总的点数就是π值，因为半径为1<br><img src="/images/python/s3.gif"><br>利用公式 π<em>r</em>r</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> clock</span><br><span class="line">DARTS=<span class="number">10000</span></span><br><span class="line">hits=<span class="number">0.0</span></span><br><span class="line">clock()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,DARTS+<span class="number">1</span>):</span><br><span class="line">    x,y=random(),random()</span><br><span class="line">    dist=sqrt(x**<span class="number">2</span>+y**<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> dist&lt;=<span class="number">1.0</span>:</span><br><span class="line">        hits=hits+<span class="number">1</span></span><br><span class="line">pi=<span class="number">4</span>*(hits/DARTS)</span><br><span class="line">print(<span class="string">&quot;pi值是&#123;&#125;.&quot;</span>.format(pi))</span><br><span class="line">print(<span class="string">&quot;运行时间是：&#123;:8.7&#125;s&quot;</span>.format(clock()))</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Warning (<span class="keyword">from</span> warnings module):</span><br><span class="line">  File <span class="string">&quot;F:/U/software/py/a2.py&quot;</span>, line <span class="number">6</span></span><br><span class="line">    clock()</span><br><span class="line">DeprecationWarning: time.clock has been deprecated <span class="keyword">in</span> Python <span class="number">3.3</span> <span class="keyword">and</span> will be removed <span class="keyword">from</span> Python <span class="number">3.8</span>: use time.perf_counter <span class="keyword">or</span> time.process_time instead</span><br><span class="line">pi值是<span class="number">3.1432</span>.</span><br><span class="line"></span><br><span class="line">Warning (<span class="keyword">from</span> warnings module):</span><br><span class="line">  File <span class="string">&quot;F:/U/software/py/a2.py&quot;</span>, line <span class="number">14</span></span><br><span class="line">    print(<span class="string">&quot;运行时间是：&#123;:8.7&#125;s&quot;</span>.format(clock()))</span><br><span class="line">DeprecationWarning: time.clock has been deprecated <span class="keyword">in</span> Python <span class="number">3.3</span> <span class="keyword">and</span> will be removed <span class="keyword">from</span> Python <span class="number">3.8</span>: use time.perf_counter <span class="keyword">or</span> time.process_time instead</span><br><span class="line">运行时间是：<span class="number">0.5633718</span>s</span><br></pre></td></tr></table></figure>
<p>第一次掉用clock()启动计时器，第二次返回启动计时器的时间。。。<br>这里它跟我说，python 3.8将把clock（）移除。。。</p>
<h1 id="datetime-库"><a href="#datetime-库" class="headerlink" title="datetime 库"></a>datetime 库</h1><blockquote>
<p>处理时间日期格式化<br>以格林威治时间为基础<br>两常量  datetime.MINYEAR  datetime.MAXYEAR   最小与最大年份  1,  9999<br>UNIX 标准时间从格林威治时间  1970年1月1日 00：00：00 精确到秒</p>
</blockquote>
<p>datetime库里有这么几个东西：<br>datetime.date        日期表示类<br>datetime.time        时间表示类，至毫秒<br>datetime.datetime        日期和时间的表示类，覆盖date和time类<br>datetime.timedelta        与时间间隔有关的类<br>datetime.tzinfo            与时区有关的类</p>
<blockquote>
<p>我们主要使用datetime库里的datetime类</p>
</blockquote>
<p>所以大概这么：<code>from datetime import datetime</code>可以少写一点东西。。。</p>
<h2 id="使用datetime-datetime类"><a href="#使用datetime-datetime类" class="headerlink" title="使用datetime.datetime类"></a>使用datetime.datetime类</h2><p>使用datetime对象，来显示时间<br>创建的方法：  datetime.now(),datetime.utcnoe()  datetime.datetime()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">today=datetime.utcnow()</span><br><span class="line">返回一个datetime类型。。。</span><br></pre></td></tr></table></figure>

<p>或者直接使用datetime类里的构造方法：datetime()<br> <code>datetime(year,month,day[,hour[,minute[,second[,microsecond[,tzinfo]]]]])</code>来构造一个日期。。。</p>
<p>datetime类的常用属性：<br>|属性|描述|<br>|—|—|<br>|today.min|返回datetime的最小时间对象,datetime(1,1,1,0,0)|<br>|today.max|返回datetime的最大时间对象，datetime(9999,12,31,23,59,59,999999)|<br>|today.year|年份|<br>|today.month|月份|<br>|today.day|日期|<br>|today.hour|小时|<br>|today.minute|分钟|<br>|today.second|秒|<br>|today.microsecond|微秒|</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>today=datetime.now()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>today.day</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>today.min</span><br><span class="line">datetime.datetime(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>today.second</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>today.microsecond</span><br><span class="line"><span class="number">336519</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>
<h3 id="datetime-常用的时间格式化方法"><a href="#datetime-常用的时间格式化方法" class="headerlink" title="datetime 常用的时间格式化方法"></a>datetime 常用的时间格式化方法</h3><table>
<thead>
<tr>
<th>名字</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>today.isoformat()</td>
<td>ISO 8601 标准先显示时间</td>
</tr>
<tr>
<td>today.isoweekday()</td>
<td>ISO 1~7,星期</td>
</tr>
<tr>
<td>today.strftime(format)</td>
<td>格式化字符串format()进行格式化，自定义</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>today.isoformat()</span><br><span class="line"><span class="string">&#x27;2018-05-05T13:59:02.336519&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>today.isoweekday()</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure>

<ul>
<li>自定义显示 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>today.strftime(<span class="string">&quot;%Y-%m&quot;</span>)`</span><br><span class="line"><span class="string">&#x27;2018-05&#x27;</span>`</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>strftime()的格式参数：<br><img src="/images/python/d3.jpg"></p>
<table>
<thead>
<tr>
<th>格式化字符串</th>
<th>意义</th>
</tr>
</thead>
<tbody><tr>
<td>%Y</td>
<td>年份</td>
</tr>
<tr>
<td>%m</td>
<td>月</td>
</tr>
<tr>
<td>%B</td>
<td>月名</td>
</tr>
<tr>
<td>%b</td>
<td>月名缩写</td>
</tr>
<tr>
<td>%d</td>
<td>日期</td>
</tr>
<tr>
<td>%A</td>
<td>星期</td>
</tr>
<tr>
<td>%a</td>
<td>星期缩写</td>
</tr>
<tr>
<td>%H</td>
<td>24小时</td>
</tr>
<tr>
<td>%I</td>
<td>12小时</td>
</tr>
<tr>
<td>%p</td>
<td>上下午</td>
</tr>
<tr>
<td>%M</td>
<td>分钟</td>
</tr>
<tr>
<td>%S</td>
<td>秒</td>
</tr>
</tbody></table>
<h2 id="绘制数码管"><a href="#绘制数码管" class="headerlink" title="绘制数码管"></a>绘制数码管</h2><p><img src="/images/python/d3.jpg"></p>
<h3 id="怎么绘：大概如此，顺序可换"><a href="#怎么绘：大概如此，顺序可换" class="headerlink" title="怎么绘：大概如此，顺序可换"></a>怎么绘：大概如此，顺序可换</h3><p><img src="/images/python/d4.gif"></p>
<h3 id="先绘制一个当前系统时间"><a href="#先绘制一个当前系统时间" class="headerlink" title="先绘制一个当前系统时间"></a>先绘制一个当前系统时间</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle,datetime</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawLine</span>(<span class="params">draw</span>):</span><span class="comment">#一笔管</span></span><br><span class="line">    turtle.pendown() <span class="keyword">if</span> draw <span class="keyword">else</span> turtle.penup()</span><br><span class="line">    turtle.fd(<span class="number">40</span>)</span><br><span class="line">    turtle.right(<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawDigit</span>(<span class="params">d</span>):</span></span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> d <span class="keyword">in</span> [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>) <span class="comment">#第一笔</span></span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> d <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> d <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> d <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    turtle.left(<span class="number">90</span>)<span class="comment">#往左转回去的意思！！！</span></span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> d <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> d <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> d <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    turtle.left(<span class="number">180</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.fd(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawDate</span>(<span class="params">date</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> date:</span><br><span class="line">        drawDigit(eval(i))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    turtle.setup(<span class="number">800</span>,<span class="number">350</span>,<span class="number">200</span>,<span class="number">200</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.pencolor(<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">    turtle.fd(<span class="number">-300</span>)</span><br><span class="line">    turtle.pensize(<span class="number">5</span>)</span><br><span class="line">    drawDate(datetime.datetime.now().strftime(<span class="string">&#x27;%Y%m%d&#x27;</span>))</span><br><span class="line">    turtle.hideturtle()</span><br><span class="line">main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="/images/python/d5.gif"></p>
<h2 id="注意问题来了"><a href="#注意问题来了" class="headerlink" title="注意问题来了"></a>注意问题来了</h2><p>if 与elif问题导致出错：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle,datetime</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawGap</span>():</span><span class="comment">#绘制数码管间隔</span></span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.fd(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawLine</span>(<span class="params">draw</span>):</span><span class="comment">#一笔管</span></span><br><span class="line">    drawGap()</span><br><span class="line">    turtle.pendown() <span class="keyword">if</span> draw <span class="keyword">else</span> turtle.penup()</span><br><span class="line">    turtle.fd(<span class="number">40</span>)</span><br><span class="line">    drawGap()</span><br><span class="line">    turtle.right(<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawDigit</span>(<span class="params">d</span>):</span></span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> d <span class="keyword">in</span> [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>) <span class="comment">#第一笔</span></span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> d <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> d <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> d <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    turtle.left(<span class="number">90</span>)<span class="comment">#往左转回去的意思！！！</span></span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> d <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> d <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> d <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    turtle.left(<span class="number">180</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.fd(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawDate</span>(<span class="params">date</span>):</span></span><br><span class="line">    turtle.pencolor(<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> date:</span><br><span class="line">        <span class="keyword">if</span> i== <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            turtle.write(<span class="string">&#x27;年&#x27;</span>,font=(<span class="string">&quot;Arial&quot;</span>,<span class="number">18</span>,<span class="string">&quot;normal&quot;</span>))</span><br><span class="line">            turtle.pencolor(<span class="string">&#x27;green&#x27;</span>)</span><br><span class="line">            turtle.fd(<span class="number">40</span>)</span><br><span class="line">        <span class="keyword">if</span> i== <span class="string">&#x27;=&#x27;</span>:</span><br><span class="line">            turtle.write(<span class="string">&#x27;月&#x27;</span>,font=(<span class="string">&quot;Arial&quot;</span>,<span class="number">18</span>,<span class="string">&quot;normal&quot;</span>))</span><br><span class="line">            turtle.pencolor(<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">            turtle.fd(<span class="number">40</span>)</span><br><span class="line">        <span class="keyword">if</span> i== <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">            turtle.write(<span class="string">&#x27;日&#x27;</span>,font=(<span class="string">&quot;Arial&quot;</span>,<span class="number">18</span>,<span class="string">&quot;normal&quot;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            drawDigit(eval(i))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    turtle.setup(<span class="number">800</span>,<span class="number">350</span>,<span class="number">200</span>,<span class="number">200</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line"><span class="comment">#    turtle.pencolor(&#x27;blue&#x27;)</span></span><br><span class="line">    turtle.fd(<span class="number">-350</span>)</span><br><span class="line">    turtle.pensize(<span class="number">5</span>)</span><br><span class="line">    drawDate(datetime.datetime.now().strftime(<span class="string">&#x27;%Y-%m=%d+&#x27;</span>))</span><br><span class="line">    turtle.hideturtle()</span><br><span class="line">main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>错误反馈：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;F:/U/software/py/a2.py&quot;</span>, line <span class="number">52</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    main()</span><br><span class="line">  File <span class="string">&quot;F:/U/software/py/a2.py&quot;</span>, line <span class="number">50</span>, <span class="keyword">in</span> main</span><br><span class="line">    drawDate(datetime.datetime.now().strftime(<span class="string">&#x27;%Y-%m=%d+&#x27;</span>))</span><br><span class="line">  File <span class="string">&quot;F:/U/software/py/a2.py&quot;</span>, line <span class="number">42</span>, <span class="keyword">in</span> drawDate</span><br><span class="line">    drawDigit(eval(i))</span><br><span class="line">  File <span class="string">&quot;&lt;string&gt;&quot;</span>, line <span class="number">1</span></span><br><span class="line">    -</span><br><span class="line">    ^</span><br><span class="line">SyntaxError: unexpected EOF <span class="keyword">while</span> parsing</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>

<p>正确的是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#e7.2DrawSevenSegDisplay.py</span></span><br><span class="line"><span class="keyword">import</span> turtle, datetime</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawGap</span>():</span> <span class="comment">#绘制数码管间隔</span></span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.fd(<span class="number">5</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawLine</span>(<span class="params">draw</span>):</span>   <span class="comment">#绘制单段数码管</span></span><br><span class="line">    drawGap()</span><br><span class="line">    turtle.pendown() <span class="keyword">if</span> draw <span class="keyword">else</span> turtle.penup()</span><br><span class="line">    turtle.fd(<span class="number">40</span>)</span><br><span class="line">    drawGap()    </span><br><span class="line">    turtle.right(<span class="number">90</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawDigit</span>(<span class="params">d</span>):</span> <span class="comment">#根据数字绘制七段数码管</span></span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> d <span class="keyword">in</span> [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> d <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> d <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> d <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    turtle.left(<span class="number">90</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> d <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> d <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> d <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    turtle.left(<span class="number">180</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.fd(<span class="number">20</span>) </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawDate</span>(<span class="params">date</span>):</span></span><br><span class="line">    turtle.pencolor(<span class="string">&quot;red&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> date:</span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            turtle.write(<span class="string">&#x27;年&#x27;</span>,font=(<span class="string">&quot;Arial&quot;</span>, <span class="number">18</span>, <span class="string">&quot;normal&quot;</span>))</span><br><span class="line">            turtle.pencolor(<span class="string">&quot;green&quot;</span>)</span><br><span class="line">            turtle.fd(<span class="number">40</span>) </span><br><span class="line">        <span class="keyword">elif</span> i == <span class="string">&#x27;=&#x27;</span>:</span><br><span class="line">            turtle.write(<span class="string">&#x27;月&#x27;</span>,font=(<span class="string">&quot;Arial&quot;</span>, <span class="number">18</span>, <span class="string">&quot;normal&quot;</span>))</span><br><span class="line">            turtle.pencolor(<span class="string">&quot;blue&quot;</span>)</span><br><span class="line">            turtle.fd(<span class="number">40</span>)</span><br><span class="line">        <span class="keyword">elif</span> i == <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">            turtle.write(<span class="string">&#x27;日&#x27;</span>,font=(<span class="string">&quot;Arial&quot;</span>, <span class="number">18</span>, <span class="string">&quot;normal&quot;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            drawDigit(eval(i))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    turtle.setup(<span class="number">800</span>, <span class="number">350</span>, <span class="number">200</span>, <span class="number">200</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.fd(<span class="number">-350</span>)</span><br><span class="line">    turtle.pensize(<span class="number">5</span>)</span><br><span class="line">    drawDate(datetime.datetime.now().strftime(<span class="string">&#x27;%Y-%m=%d+&#x27;</span>))</span><br><span class="line">    turtle.hideturtle()</span><br><span class="line">main()    </span><br></pre></td></tr></table></figure>
<p><img src="/images/python/d6.gif"></p>
<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>n的阶乘：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span>(<span class="params">n</span>):</span></span><br><span class="line">	<span class="keyword">if</span> n==<span class="number">0</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="keyword">return</span> n*fact(n<span class="number">-1</span>)</span><br><span class="line">num=eval(input(<span class="string">&quot;请输入一个整数: &quot;</span>))</span><br><span class="line">print(fact(abs(int(num))))</span><br></pre></td></tr></table></figure>
<p>主要是return语句的使用。。。<br>当然也可以没有return语句。。</p>
<h2 id="科赫曲线"><a href="#科赫曲线" class="headerlink" title="科赫曲线"></a>科赫曲线</h2><p>n阶科赫曲线</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">koch</span>(<span class="params">size,n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">0</span>:</span><br><span class="line">        turtle.fd(size)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> angle <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">60</span>,<span class="number">-120</span>,<span class="number">60</span>]:</span><br><span class="line">            turtle.left(angle)</span><br><span class="line">            koch(size/<span class="number">3</span>,n<span class="number">-1</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    turtle.setup(<span class="number">800</span>,<span class="number">400</span>)</span><br><span class="line">    turtle.speed(<span class="number">0</span>)<span class="comment">#绘制速度</span></span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(<span class="number">-300</span>,<span class="number">-50</span>)</span><br><span class="line">    turtle.pendown()</span><br><span class="line">    turtle.pensize(<span class="number">2</span>)</span><br><span class="line">    koch(<span class="number">600</span>,<span class="number">3</span>)<span class="comment"># 长度，阶数</span></span><br><span class="line">    turtle.hideturtle()</span><br><span class="line">main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="/images/python/d7.gif"></p>
<h3 id="画个雪花"><a href="#画个雪花" class="headerlink" title="画个雪花"></a>画个雪花</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">koch</span>(<span class="params">size,n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">0</span>:</span><br><span class="line">        turtle.fd(size)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> angle <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">60</span>,<span class="number">-120</span>,<span class="number">60</span>]:</span><br><span class="line">            turtle.left(angle)</span><br><span class="line">            koch(size/<span class="number">3</span>,n<span class="number">-1</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    turtle.setup(<span class="number">600</span>,<span class="number">600</span>)</span><br><span class="line">    turtle.speed(<span class="number">-5</span>)<span class="comment">#绘制速度</span></span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(<span class="number">-200</span>,<span class="number">100</span>)</span><br><span class="line">    turtle.pendown()</span><br><span class="line">    turtle.pensize(<span class="number">2</span>)</span><br><span class="line">    level=<span class="number">5</span></span><br><span class="line">    koch(<span class="number">400</span>,level)</span><br><span class="line">    turtle.right(<span class="number">120</span>)</span><br><span class="line">    koch(<span class="number">400</span>,level)</span><br><span class="line">    turtle.right(<span class="number">120</span>)</span><br><span class="line">    koch(<span class="number">400</span>,level)<span class="comment"># 长度，阶数</span></span><br><span class="line">    turtle.hideturtle()</span><br><span class="line">main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="/images/python/d8.gif"><br>好好理解递归思想！！！</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> &gt;&gt;&gt; help(datetime)</span><br><span class="line">Help on <span class="class"><span class="keyword">class</span> <span class="title">datetime</span> <span class="title">in</span> <span class="title">module</span> <span class="title">datetime</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">datetime</span>(<span class="params">date</span>)</span></span><br><span class="line"><span class="class"> |  <span class="title">datetime</span>(<span class="params">year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]]</span>)</span></span><br><span class="line"><span class="class"> |  </span></span><br><span class="line"> |  The year, month and day arguments are required. tzinfo may be None, or an</span><br><span class="line"> |  instance of a tzinfo subclass. The remaining arguments may be ints.</span><br><span class="line"> |  </span><br><span class="line"> |  Method resolution order:</span><br><span class="line"> |      datetime</span><br><span class="line"> |      date</span><br><span class="line"> |      builtins.object</span><br><span class="line"> |  </span><br><span class="line"> |  Methods defined here:</span><br><span class="line"> |  </span><br><span class="line"> |  __add__(self, value, /)</span><br><span class="line"> |      Return self+value.</span><br><span class="line"> |  </span><br><span class="line"> |  __eq__(self, value, /)</span><br><span class="line"> |      Return self==value.</span><br><span class="line"> |  </span><br><span class="line"> |  __ge__(self, value, /)</span><br><span class="line"> |      Return self&gt;=value.</span><br><span class="line"> |  </span><br><span class="line"> |  __getattribute__(self, name, /)</span><br><span class="line"> |      Return getattr(self, name).</span><br><span class="line"> |  </span><br><span class="line"> |  __gt__(self, value, /)</span><br><span class="line"> |      Return self&gt;value.</span><br><span class="line"> |  </span><br><span class="line"> |  __hash__(self, /)</span><br><span class="line"> |      Return hash(self).</span><br><span class="line"> |  </span><br><span class="line"> |  __le__(self, value, /)</span><br><span class="line"> |      Return self&lt;=value.</span><br><span class="line"> |  </span><br><span class="line"> |  __lt__(self, value, /)</span><br><span class="line"> |      Return self&lt;value.</span><br><span class="line"> |  </span><br><span class="line"> |  __ne__(self, value, /)</span><br><span class="line"> |      Return self!=value.</span><br><span class="line"> |  </span><br><span class="line"> |  __radd__(self, value, /)</span><br><span class="line"> |      Return value+self.</span><br><span class="line"> |  </span><br><span class="line"> |  __reduce__(...)</span><br><span class="line"> |      __reduce__() -&gt; (cls, state)</span><br><span class="line"> |  </span><br><span class="line"> |  __reduce_ex__(...)</span><br><span class="line"> |      __reduce_ex__(proto) -&gt; (cls, state)</span><br><span class="line"> |  </span><br><span class="line"> |  __repr__(self, /)</span><br><span class="line"> |      Return repr(self).</span><br><span class="line"> |  </span><br><span class="line"> |  __rsub__(self, value, /)</span><br><span class="line"> |      Return value-self.</span><br><span class="line"> |  </span><br><span class="line"> |  __str__(self, /)</span><br><span class="line"> |      Return str(self).</span><br><span class="line"> |  </span><br><span class="line"> |  __sub__(self, value, /)</span><br><span class="line"> |      Return self-value.</span><br><span class="line"> |  </span><br><span class="line"> |  astimezone(...)</span><br><span class="line"> |      tz -&gt; convert to local time in new timezone tz</span><br><span class="line"> |  </span><br><span class="line"> |  ctime(...)</span><br><span class="line"> |      Return ctime() style string.</span><br><span class="line"> |  </span><br><span class="line"> |  date(...)</span><br><span class="line"> |      Return date object <span class="keyword">with</span> same year, month <span class="keyword">and</span> day.</span><br><span class="line"> |  </span><br><span class="line"> |  dst(...)</span><br><span class="line"> |      Return self.tzinfo.dst(self).</span><br><span class="line"> |  </span><br><span class="line"> |  isoformat(...)</span><br><span class="line"> |      [sep] -&gt; string in ISO 8601 format, YYYY-MM-DDT[HH[:MM[:SS[.mmm[uuu]]]]][+HH:MM].</span><br><span class="line"> |      sep <span class="keyword">is</span> used to separate the year <span class="keyword">from</span> the time, <span class="keyword">and</span> defaults to <span class="string">&#x27;T&#x27;</span>.</span><br><span class="line"> |      timespec specifies what components of the time to include (allowed values are <span class="string">&#x27;auto&#x27;</span>, <span class="string">&#x27;hours&#x27;</span>, <span class="string">&#x27;minutes&#x27;</span>, <span class="string">&#x27;seconds&#x27;</span>, <span class="string">&#x27;milliseconds&#x27;</span>, <span class="keyword">and</span> <span class="string">&#x27;microseconds&#x27;</span>).</span><br><span class="line"> |  </span><br><span class="line"> |  replace(...)</span><br><span class="line"> |      Return datetime <span class="keyword">with</span> new specified fields.</span><br><span class="line"> |  </span><br><span class="line"> |  time(...)</span><br><span class="line"> |      Return time object <span class="keyword">with</span> same time but <span class="keyword">with</span> tzinfo=<span class="literal">None</span>.</span><br><span class="line"> |  </span><br><span class="line"> |  timestamp(...)</span><br><span class="line"> |      Return POSIX timestamp <span class="keyword">as</span> float.</span><br><span class="line"> |  </span><br><span class="line"> |  timetuple(...)</span><br><span class="line"> |      Return time tuple, compatible <span class="keyword">with</span> time.localtime().</span><br><span class="line"> |  </span><br><span class="line"> |  timetz(...)</span><br><span class="line"> |      Return time object <span class="keyword">with</span> same time <span class="keyword">and</span> tzinfo.</span><br><span class="line"> |  </span><br><span class="line"> |  tzname(...)</span><br><span class="line"> |      Return self.tzinfo.tzname(self).</span><br><span class="line"> |  </span><br><span class="line"> |  utcoffset(...)</span><br><span class="line"> |      Return self.tzinfo.utcoffset(self).</span><br><span class="line"> |  </span><br><span class="line"> |  utctimetuple(...)</span><br><span class="line"> |      Return UTC time tuple, compatible <span class="keyword">with</span> time.localtime().</span><br><span class="line"> |  </span><br><span class="line"> |  ----------------------------------------------------------------------</span><br><span class="line"> |  Class methods defined here:</span><br><span class="line"> |  </span><br><span class="line"> |  combine(...) <span class="keyword">from</span> builtins.type</span><br><span class="line"> |      date, time -&gt; datetime with same date and time fields</span><br><span class="line"> |  </span><br><span class="line"> |  fromisoformat(...) <span class="keyword">from</span> builtins.type</span><br><span class="line"> |      string -&gt; datetime from datetime.isoformat() output</span><br><span class="line"> |  </span><br><span class="line"> |  fromtimestamp(...) <span class="keyword">from</span> builtins.type</span><br><span class="line"> |      timestamp[, tz] -&gt; tz&#x27;s local time from POSIX timestamp.</span><br><span class="line"> |  </span><br><span class="line"> |  now(tz=<span class="literal">None</span>) <span class="keyword">from</span> builtins.type</span><br><span class="line"> |      Returns new datetime object representing current time local to tz.</span><br><span class="line"> |      </span><br><span class="line"> |        tz</span><br><span class="line"> |          Timezone object.</span><br><span class="line"> |      </span><br><span class="line"> |      If no tz <span class="keyword">is</span> specified, uses local timezone.</span><br><span class="line"> |  </span><br><span class="line"> |  strptime(...) <span class="keyword">from</span> builtins.type</span><br><span class="line"> |      string, format -&gt; new datetime parsed from a string (like time.strptime()).</span><br><span class="line"> |  </span><br><span class="line"> |  utcfromtimestamp(...) <span class="keyword">from</span> builtins.type</span><br><span class="line"> |      Construct a naive UTC datetime <span class="keyword">from</span> a POSIX timestamp.</span><br><span class="line"> |  </span><br><span class="line"> |  utcnow(...) <span class="keyword">from</span> builtins.type</span><br><span class="line"> |      Return a new datetime representing UTC day <span class="keyword">and</span> time.</span><br><span class="line"> |  </span><br><span class="line"> |  ----------------------------------------------------------------------</span><br><span class="line"> |  Static methods defined here:</span><br><span class="line"> |  </span><br><span class="line"> |  __new__(*args, **kwargs) <span class="keyword">from</span> builtins.type</span><br><span class="line"> |      Create <span class="keyword">and</span> <span class="keyword">return</span> a new object.  See help(type) <span class="keyword">for</span> accurate signature.</span><br><span class="line"> |  </span><br><span class="line"> |  ----------------------------------------------------------------------</span><br><span class="line"> |  Data descriptors defined here:</span><br><span class="line"> |  </span><br><span class="line"> |  fold</span><br><span class="line"> |  </span><br><span class="line"> |  hour</span><br><span class="line"> |  </span><br><span class="line"> |  microsecond</span><br><span class="line"> |  </span><br><span class="line"> |  minute</span><br><span class="line"> |  </span><br><span class="line"> |  second</span><br><span class="line"> |  </span><br><span class="line"> |  tzinfo</span><br><span class="line"> |  </span><br><span class="line"> |  ----------------------------------------------------------------------</span><br><span class="line"> |  Data <span class="keyword">and</span> other attributes defined here:</span><br><span class="line"> |  </span><br><span class="line"> |  max = datetime.datetime(<span class="number">9999</span>, <span class="number">12</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>, <span class="number">999999</span>)</span><br><span class="line"> |  </span><br><span class="line"> |  min = datetime.datetime(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"> |  </span><br><span class="line"> |  resolution = datetime.timedelta(microseconds=<span class="number">1</span>)</span><br><span class="line"> |  </span><br><span class="line"> |  ----------------------------------------------------------------------</span><br><span class="line"> |  Methods inherited <span class="keyword">from</span> date:</span><br><span class="line"> |  </span><br><span class="line"> |  __format__(...)</span><br><span class="line"> |      Formats self <span class="keyword">with</span> strftime.</span><br><span class="line"> |  </span><br><span class="line"> |  isocalendar(...)</span><br><span class="line"> |      Return a <span class="number">3</span>-tuple containing ISO year, week number, <span class="keyword">and</span> weekday.</span><br><span class="line"> |  </span><br><span class="line"> |  isoweekday(...)</span><br><span class="line"> |      Return the day of the week represented by the date.</span><br><span class="line"> |      Monday == <span class="number">1</span> ... Sunday == <span class="number">7</span></span><br><span class="line"> |  </span><br><span class="line"> |  strftime(...)</span><br><span class="line"> |      format -&gt; strftime() style string.</span><br><span class="line"> |  </span><br><span class="line"> |  toordinal(...)</span><br><span class="line"> |      Return proleptic Gregorian ordinal.  January <span class="number">1</span> of year <span class="number">1</span> <span class="keyword">is</span> day <span class="number">1.</span></span><br><span class="line"> |  </span><br><span class="line"> |  weekday(...)</span><br><span class="line"> |      Return the day of the week represented by the date.</span><br><span class="line"> |      Monday == <span class="number">0</span> ... Sunday == <span class="number">6</span></span><br><span class="line"> |  </span><br><span class="line"> |  ----------------------------------------------------------------------</span><br><span class="line"> |  Class methods inherited <span class="keyword">from</span> date:</span><br><span class="line"> |  </span><br><span class="line"> |  fromordinal(...) <span class="keyword">from</span> builtins.type</span><br><span class="line"> |      int -&gt; date corresponding to a proleptic Gregorian ordinal.</span><br><span class="line"> |  </span><br><span class="line"> |  today(...) <span class="keyword">from</span> builtins.type</span><br><span class="line"> |      Current date <span class="keyword">or</span> datetime:  same <span class="keyword">as</span> self.__class__.fromtimestamp(time.time()).</span><br><span class="line"> |  </span><br><span class="line"> |  ----------------------------------------------------------------------</span><br><span class="line"> |  Data descriptors inherited <span class="keyword">from</span> date:</span><br><span class="line"> |  </span><br><span class="line"> |  day</span><br><span class="line"> |  </span><br><span class="line"> |  month</span><br><span class="line"> |  </span><br><span class="line"> |  year</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>

<h1 id="jieba库"><a href="#jieba库" class="headerlink" title="jieba库"></a>jieba库</h1><blockquote>
<p>第三方中文分词函数库<br>把一大段话分解为一个个词或字</p>
</blockquote>
<p><strong>使用pip工具安装</strong><br><code>pip install jieba</code></p>
<p>结巴库分三种模式：</p>
<ol>
<li>精确模式  精确的分开</li>
<li>全模式   速度块  </li>
<li>搜索引擎模式   在精确的模式上再次切分</li>
</ol>
<h2 id="常用分词函数"><a href="#常用分词函数" class="headerlink" title="常用分词函数"></a>常用分词函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">jieba.cut(s)  精确模式，返回一个迭代类型</span><br><span class="line"></span><br><span class="line">jieba.cut(s,cut_all=<span class="literal">True</span>)   全模式</span><br><span class="line"></span><br><span class="line">jieba.cut_for_search(s)			搜索引擎模式</span><br><span class="line"></span><br><span class="line">jieba.lcut(s)				精确模式，但是返回列表类型</span><br><span class="line"></span><br><span class="line">jieba.lcut(s,cut_all=Ture)			全模式，返回列表</span><br><span class="line"></span><br><span class="line">jieba.lcut_for_search(s)       搜索引擎模式，返回一个列表</span><br><span class="line"></span><br><span class="line">jieba.add_word(w)		向分词词典中增加一个新词 w</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="文本词频统计"><a href="#文本词频统计" class="headerlink" title="文本词频统计"></a>文本词频统计</h2><h3 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cal hamlet numbers</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getText</span>():</span></span><br><span class="line">    txt=open(<span class="string">&quot;ss.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>).read()</span><br><span class="line">    txt=txt.lower()</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> <span class="string">&#x27;!&quot;#$%&amp;*()+_-,.-/:;&lt;=&gt;?@[\\]^`~&#x27;</span>:</span><br><span class="line">        txt=txt.replace(ch,<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> txt</span><br><span class="line">hamletTxt=getText()</span><br><span class="line">words=hamletTxt.split()</span><br><span class="line">counts = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">    counts[word]=counts.get(word,<span class="number">0</span>)+<span class="number">1</span></span><br><span class="line">items =list(counts.items())</span><br><span class="line">items.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>],reverse=<span class="literal">True</span>)<span class="comment">#匿名函数，key：排序方式，reverse:是否反序</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">10</span>):</span><br><span class="line">    word,count=items[i]</span><br><span class="line">    print(<span class="string">&quot;&#123;0:&lt;10&#125;&#123;1:&gt;5&#125;&quot;</span>.format(word,count))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line">====================== RESTART: F:/U/software/py/a2.py ======================</span><br><span class="line">the        <span class="number">1137</span></span><br><span class="line"><span class="keyword">and</span>         <span class="number">965</span></span><br><span class="line">to          <span class="number">754</span></span><br><span class="line">of          <span class="number">667</span></span><br><span class="line">you         <span class="number">550</span></span><br><span class="line">a           <span class="number">542</span></span><br><span class="line">i           <span class="number">541</span></span><br><span class="line">my          <span class="number">514</span></span><br><span class="line">hamlet      <span class="number">461</span></span><br><span class="line"><span class="keyword">in</span>          <span class="number">436</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>

<h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><p>使用jieba库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#e10.4CalThreeKingdoms.py</span></span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line">excludes = &#123;<span class="string">&quot;将军&quot;</span>,<span class="string">&quot;却说&quot;</span>,<span class="string">&quot;荆州&quot;</span>,<span class="string">&quot;二人&quot;</span>,<span class="string">&quot;不可&quot;</span>,<span class="string">&quot;不能&quot;</span>,<span class="string">&quot;如此&quot;</span>&#125;</span><br><span class="line">txt = open(<span class="string">&quot;三国演义.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>).read()</span><br><span class="line">words  = jieba.lcut(txt)</span><br><span class="line">counts = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">    <span class="keyword">if</span> len(word) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">elif</span> word == <span class="string">&quot;诸葛亮&quot;</span> <span class="keyword">or</span> word == <span class="string">&quot;孔明曰&quot;</span>:</span><br><span class="line">        rword = <span class="string">&quot;孔明&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> word == <span class="string">&quot;关公&quot;</span> <span class="keyword">or</span> word == <span class="string">&quot;云长&quot;</span>:</span><br><span class="line">        rword = <span class="string">&quot;关羽&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> word == <span class="string">&quot;玄德&quot;</span> <span class="keyword">or</span> word == <span class="string">&quot;玄德曰&quot;</span>:</span><br><span class="line">        rword = <span class="string">&quot;刘备&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> word == <span class="string">&quot;孟德&quot;</span> <span class="keyword">or</span> word == <span class="string">&quot;丞相&quot;</span>:</span><br><span class="line">        rword = <span class="string">&quot;曹操&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rword = word</span><br><span class="line">    counts[rword] = counts.get(rword,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> excludes:</span><br><span class="line">    <span class="keyword">del</span>(counts[word])</span><br><span class="line">items = list(counts.items())</span><br><span class="line">items.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>], reverse=<span class="literal">True</span>) </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    word, count = items[i]</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">&quot;&#123;0:&lt;10&#125;&#123;1:&gt;5&#125;&quot;</span>.format(word, count))</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python程序设计进阶</title>
    <url>/2018/05/12/python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p>面向python 3.5.x 3.6.x</p>
<p>python 进阶</p>
<a id="more"></a>



<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="if-name-‘main‘-如何正确理解"><a href="#if-name-‘main‘-如何正确理解" class="headerlink" title="if name == ‘main‘ 如何正确理解?"></a>if <strong>name</strong> == ‘<strong>main</strong>‘ 如何正确理解?</h2><p><a href="https://www.zhihu.com/question/49136398">https://www.zhihu.com/question/49136398</a></p>
<h2 id="链接mysql"><a href="#链接mysql" class="headerlink" title="链接mysql"></a>链接mysql</h2><p><a href="https://taizilongxu.gitbooks.io/stackoverflow-about-python/content/80/README.html">https://taizilongxu.gitbooks.io/stackoverflow-about-python/content/80/README.html</a></p>
<h2 id="pip升级到18-出现不能安装库"><a href="#pip升级到18-出现不能安装库" class="headerlink" title="pip升级到18 出现不能安装库"></a>pip升级到18 出现不能安装库</h2><blockquote>
<p>Traceback (most recent call last):<br>File “/usr/bin/pip”, line 11, in<code> &lt;module&gt;</code><br> <code> sys.exit(__main__.main())</code><br>AttributeError: ‘module’ object has no attribute ‘main’</p>
</blockquote>
<p>网上找了说改成<code>__main__.main()</code>还是不行</p>
<p>于是降级成9<br><a href="https://stackoverflow.com/questions/49839610/attributeerror-module-pip-has-no-attribute-mainpip">https://stackoverflow.com/questions/49839610/attributeerror-module-pip-has-no-attribute-mainpip</a> </p>
<p>学到个东西：<code>python -m pip install....</code><br>与<code>pip install ...</code> 有什么区别</p>
<p>之后又出现下载超时，只得先下载到本地然后使用本地安装了<br><code>python -m pip install pip...</code></p>
<h1 id="python-练手项目"><a href="#python-练手项目" class="headerlink" title="python 练手项目"></a>python 练手项目</h1><p><a href="https://www.zhihu.com/question/29372574">https://www.zhihu.com/question/29372574</a></p>
<h1 id="一些说明"><a href="#一些说明" class="headerlink" title="一些说明"></a>一些说明</h1><h2 id="Argument-Clinic-概念"><a href="#Argument-Clinic-概念" class="headerlink" title="Argument Clinic 概念"></a>Argument Clinic 概念</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Help on built-in function sum in module builtins:</span><br><span class="line"></span><br><span class="line">sum(iterable, start&#x3D;0, &#x2F;)</span><br><span class="line">    Return the sum of a &#39;start&#39; value (default: 0) plus an iterable of numbers</span><br><span class="line">    </span><br><span class="line">    When the iterable is empty, return the start value.</span><br><span class="line">    This function is intended specifically for use with numeric values and may</span><br><span class="line">    reject non-numeric types.</span><br></pre></td></tr></table></figure>
<p>当看到<code>sum(iterable,start=0,/)</code>时，最后一个参数是<code>/</code>，这个东西表示此函数只接受位置参数，而不接受关键参数的形式传值。</p>
<blockquote>
<p>｀sum([1,2,3],start=11)<code>是错误的，这个就叫做关键参数。 </code>sum([1,2,3],11)`这才是对的，位置参数<br>这样的函数是用Ｃ语言开发的，但不允许你在ｐｙｔｈｏｎ里这样定义参数。。</p>
</blockquote>
<blockquote>
<p>在python中无需声明变量名及其类型。。</p>
</blockquote>
<blockquote>
<p>是强类型语言，判断其类型使用的是状态机！！<br>分清引用与修改变量的区别</p>
</blockquote>
<blockquote>
<p>数字类型，整型：其大小与机器有关，无上限</p>
</blockquote>
<blockquote>
<p>有字符串类型的常量与变量</p>
<blockquote>
<p>没有字符的常量与变量</p>
<blockquote>
<p>单个字符也是字符串</p>
</blockquote>
</blockquote>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">+  只可用在同类型</span><br><span class="line">*  字典与集合不可与整数相乘</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python的IDLE里，下划线_  表示最近一次运行的正确结果。</span><br></pre></td></tr></table></figure>

<h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><blockquote>
<p>函数式编程把问题分解为一系列的函数操作，依次流入和流出一系列函数。</p>
</blockquote>
<p><code>map()</code></p>
<h2 id="in-与is"><a href="#in-与is" class="headerlink" title="in 与is"></a>in 与is</h2><blockquote>
<p>in 与is<br>in是成员测试符<br>is  是同一性测试运算符：  是否为相同地址,同一块区域。<br>例：</p>
</blockquote>
<h2 id="位运算符：运用于整数"><a href="#位运算符：运用于整数" class="headerlink" title="位运算符：运用于整数"></a>位运算符：运用于整数</h2><blockquote>
<p>将整数转换为二进制  再右对齐，左补0  然后按位运算。。再转回十进制</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">#&amp; | ^ &lt;&lt;  &gt;&gt;</span></span><br><span class="line"><span class="comment">#都是给整数哦</span></span><br><span class="line"><span class="comment">#  对于左移与右移的运算符  扩大&lt;&lt;     缩小&gt;&gt;  一位就2倍的关系</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>&amp;<span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0</span>&amp;<span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>&amp;<span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0</span>&amp;<span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>|<span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0</span>|<span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0</span>|<span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>^<span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0</span>&amp;<span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>^<span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0</span>^<span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span>|<span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>&lt;&lt;<span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span>&lt;&lt;<span class="number">2</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>&gt;&gt;<span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span>&gt;&gt;<span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span>&gt;&gt;<span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>


<h2 id="and-or"><a href="#and-or" class="headerlink" title="and or"></a>and or</h2><blockquote>
<p>运算符and  or  一般用于条件表达式中<br>and or 的返回值：最后一个被计算的表达式的值</p>
</blockquote>
<blockquote>
<p>python中不支持++   –  所表达的意思<br>它表示的是<code>正正得正,负负得负</code></p>
</blockquote>
<h2 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h2><blockquote>
<p>当你看到某个函数的使用位<br><code>sum(a,b,c,/)</code>  最后一个<code>/</code>表示这个函数只接受位置参数，而不允许以关键参数的形式进行传值。。</p>
</blockquote>
<blockquote>
<p>eval:对字符串求值。。。</p>
</blockquote>
<h2 id="对缓冲区的操作"><a href="#对缓冲区的操作" class="headerlink" title="对缓冲区的操作"></a>对缓冲区的操作</h2><blockquote>
<p>python 的标准库sys   下的  <code>read()  及readline()</code>函数</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sys.stdin.read(<span class="number">5</span>)  <span class="comment">#从缓冲区中读取5个字符</span></span><br><span class="line">sys.stdin.readline(<span class="number">4</span>) <span class="comment"># 读取第4行内容</span></span><br></pre></td></tr></table></figure>

<h2 id="惰性求值"><a href="#惰性求值" class="headerlink" title="惰性求值"></a>惰性求值</h2><p>惰性求值（英语：Lazy Evaluation）也称为传需求调用（call-by-need）它的目的是要最小化计算机要做的工作。它有两个相关而又有区别的含意，可以表示为“延迟求值”和“最小化求值”，</p>
<blockquote>
<p>惰性求值，也就是延迟求值，表达式不会在它被绑定到变量之后就立即求值，而是等用到时再求值。这个特性可以解决一些巨大甚至无限的集合列表，如菲波那切数列、几十G的文件等等。延迟求值的一个好处是能够建立可计算的无限列表而没有妨碍计算的无限循环或大小问题。</p>
</blockquote>
<h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><p>wiki:<br>迭代器（iterator）有时又称游标（cursor）是程式设计的软件设计模式，可在容器物件（container，例如链表或阵列）上遍访的界面，设计人员无需关心容器物件的内存分配的实现细节。</p>
<p>各种语言实作迭代器的方式皆不尽同，有些面向对象语言像Java, C#, Ruby, Python, Delphi都已将迭代器的特性内建语言当中，完美的跟语言整合，我们称之隐式迭代器（implicit iterator），但像是C++语言本身就没有迭代器的特色，但STL仍利用模板实作了功能强大的迭代器。STL容器的数据的内存地址可能会重新分配（reallocate），与容器绑定的迭代器仍然可以定位到重新分配后的正确的内存地址。</p>
<p>迭代器另一方面还可以整合生成器（generator）。有些语言将二者视为同一界面，有些语言则将之独立化。</p>
<blockquote>
<p>我们已经知道，可以直接作用于for循环的数据类型有以下几种：<br>一类是集合数据类型，如list / tuple / dict / set / str /等;<br>一类是generator，包括生成器和带yield的generator function。<br>这些可以直接作用于for循环的对象统称为可迭代对象：Iterable。<br>可以使用isinstance()判断一个对象是否是Iterable对象：</p>
</blockquote>
<blockquote>
<p>Python的Iterator对象表示的是一个数据流，Iterator对象可以被next()函数调用并不断返回下一个数据，直到没有数据时抛出StopIteration错误。可以把这个数据流看作是一个有序序列，但我们却不能提前知道序列的长度，只能不断通过next()函数实现按需计算下一个数据，所以Iterator的计算是惰性的，只有在需要返回下一个数据时它才会计算。</p>
</blockquote>
<p><a href="https://blog.csdn.net/yizheyouye/article/details/50649974">https://blog.csdn.net/yizheyouye/article/details/50649974</a></p>
<blockquote>
<p>Python中任意的对象，只要它定义了可以返回一个迭代器的__iter__方法，或者定义了可以支持下标索引的__getitem__方法(这些双下划线方法会在其他章节中全面解释)，那么它就是一个可迭代对象。简单说，可迭代对象就是能提供迭代器的任意对象。</p>
</blockquote>
<blockquote>
<p>任意对象，只要定义了next(Python2) 或者__next__方法，它就是一个迭代器。就这么简单。现在我们来理解迭代(iteration)</p>
</blockquote>
<blockquote>
<p>用简单的话讲，它就是从某个地方（比如一个列表）取出一个元素的过程。当我们使用一个循环来遍历某个东西时，这个过程本身就叫迭代。<br>生成器也是一种迭代器，但是你只能对其迭代一次。这是因为它们并没有把所有的值存在内存中，而是在运行时生成值。你通过遍历来使用它们，要么用一个“for”循环，要么将它们传递给任意可以进行迭代的函数和结构。大多数时候生成器是以函数来实现的。然而，它们并不返回一个值，而是yield(暂且译作“生出”)一个值</p>
</blockquote>
<p><a href="https://eastlakeside.gitbooks.io/interpy-zh/content/Generators/Iterator.html">https://eastlakeside.gitbooks.io/interpy-zh/content/Generators/Iterator.html</a></p>
<p>个人博客：python 中的可迭代对象(iterable)、迭代器(iterator)与生成器(generator)<br><a href="http://wulc.me/2016/09/08/python%20%E4%B8%AD%E7%9A%84%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1(iterable)%E3%80%81%E8%BF%AD%E4%BB%A3%E5%99%A8(iterator)%E4%B8%8E%E7%94%9F%E6%88%90%E5%99%A8(generator)/">http://wulc.me/2016/09/08/python%20%E4%B8%AD%E7%9A%84%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1(iterable)%E3%80%81%E8%BF%AD%E4%BB%A3%E5%99%A8(iterator)%E4%B8%8E%E7%94%9F%E6%88%90%E5%99%A8(generator)/</a></p>
<p>官方：<a href="https://docs.python.org/3/tutorial/classes.html#iterators">https://docs.python.org/3/tutorial/classes.html#iterators</a></p>
<h1 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h1><h2 id="枚举与迭代"><a href="#枚举与迭代" class="headerlink" title="枚举与迭代"></a>枚举与迭代</h2><p>enumerate:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">enumerate()   枚举可迭代对象中的元素返回enumerate对象，其中每个元素都是包含索引和值的元组</span><br><span class="line"></span><br><span class="line">enumerate()还支持一个参数，start来开始索引起始值</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(enumerate(<span class="string">&#x27;abcd&#x27;</span>))</span><br><span class="line">	      </span><br><span class="line">[(<span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>), (<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;d&#x27;</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(enumerate(s))</span><br><span class="line">	      </span><br><span class="line">[(<span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>), (<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(enumerate(s.items()))</span><br><span class="line">	      </span><br><span class="line">[(<span class="number">0</span>, (<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>)), (<span class="number">1</span>, (<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>)), (<span class="number">2</span>, (<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>))]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(enumerate(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;))</span><br><span class="line">	      </span><br><span class="line">[(<span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>), (<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> enumerate(range(<span class="number">5</span>),<span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> item <span class="keyword">in</span> enumerate(range(<span class="number">5</span>),<span class="number">6</span>):</span><br><span class="line">	      print(item,end=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="number">6</span>, <span class="number">0</span>),(<span class="number">7</span>, <span class="number">1</span>),(<span class="number">8</span>, <span class="number">2</span>),(<span class="number">9</span>, <span class="number">3</span>),(<span class="number">10</span>, <span class="number">4</span>),</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"></span><br><span class="line">​````</span><br><span class="line"></span><br><span class="line">iter():</span><br><span class="line">&gt;返回对象的迭代器</span><br><span class="line">&gt;两种用法 `iter(iterable)  iter(callable,sentinel)`</span><br><span class="line">&gt;iter(iterable)要求参数必须有自己的迭代器</span><br><span class="line">&gt;iter(callable,sentinel)会持续调用callable直至其返回sentinel</span><br><span class="line"></span><br><span class="line">next()函数用来返回可迭代对象中的下一个元素，适用于生成器对象及 zip 等对象，等价于这些对象的`__next__()`方法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## map()  reduce()  filter()</span></span><br><span class="line">&gt;`map()`把一个函数 func() 依次映射到序列或迭代器对象的每个元素上，并返回一个可迭代map对象作为结果</span><br><span class="line">&gt;也就是经过func()操作过的元素，不修改原可迭代对象。。</span><br><span class="line">​``` python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(map(str,range(<span class="number">5</span>)))</span><br><span class="line">[<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">add5</span>(<span class="params">v</span>):</span></span><br><span class="line">	<span class="keyword">return</span> v+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(map(add5,range(<span class="number">10</span>)))</span><br><span class="line">[<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(map(<span class="keyword">lambda</span> x,y:x+y,range(<span class="number">5</span>),range(<span class="number">5</span>,<span class="number">10</span>)))</span><br><span class="line">[<span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">map(func, *iterables) --&gt; map object</span><br><span class="line"></span><br><span class="line"> Make an iterator that computes the function using arguments <span class="keyword">from</span></span><br><span class="line"> |  each of the iterables.  Stops when the shortest iterable <span class="keyword">is</span> exhausted.</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p>在python 3中，reduce 函数不是内置函数，而是放到<code>functools</code>里了。<br><code>from functools import reduce</code></p>
</blockquote>
<p><code>reduce()</code>：将一个接受两个参数的函数以迭代累积的方式从左到右依次作用到一个序列或迭代器对象的所有元素上，<strong>并且允许指定一个初始值。</strong>初始值也是会传入函数里的，作为第一个参数。。</p>
<blockquote>
<p>如：<code>reduce(lambda x,y:x+y,[1,2,3,4,5])</code><br>计算过程为:<code>((((1+2)+3)+4)+5)</code></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; help(reduce)</span><br><span class="line">Help on built-in function reduce in module _functools:</span><br><span class="line"></span><br><span class="line">reduce(...)</span><br><span class="line">    reduce(function, sequence[, initial]) -&gt; value</span><br><span class="line">    </span><br><span class="line">    Apply a function of two arguments cumulatively to the items of a sequence,</span><br><span class="line">    from left to right, so as to reduce the sequence to a single value.</span><br><span class="line">    For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates</span><br><span class="line">    ((((1+2)+3)+4)+5).  If initial is present, it is placed before the items</span><br><span class="line">    of the sequence in the calculation, and serves as a default when the</span><br><span class="line">    sequence is empty.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>seq=list(range(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(<span class="keyword">lambda</span> x,y:x+y,seq)</span><br><span class="line"><span class="number">45</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> operator</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>operator.add(<span class="number">4</span>,<span class="number">4</span>)</span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(operator.add,seq)</span><br><span class="line"><span class="number">45</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(operator.mul,seq,<span class="number">1</span>)</span><br><span class="line"><span class="number">362880</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(operator.add,[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>]],[])<span class="comment">#最后的那个[]为初始值。</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">计算元素出现个数：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst=[randint(<span class="number">1</span>,<span class="number">10</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(tjNum,lst,&#123;&#125;)</span><br><span class="line">&#123;<span class="number">9</span>: <span class="number">5</span>, <span class="number">2</span>: <span class="number">3</span>, <span class="number">5</span>: <span class="number">7</span>, <span class="number">6</span>: <span class="number">5</span>, <span class="number">8</span>: <span class="number">5</span>, <span class="number">7</span>: <span class="number">7</span>, <span class="number">10</span>: <span class="number">9</span>, <span class="number">1</span>: <span class="number">6</span>, <span class="number">3</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">tjNum</span>(<span class="params">dic,k</span>):</span></span><br><span class="line">	print(dic,k)</span><br><span class="line">	<span class="keyword">if</span> k <span class="keyword">in</span> dic:</span><br><span class="line">		dic[k]+=<span class="number">1</span></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		dic[k]=<span class="number">1</span></span><br><span class="line">	<span class="keyword">return</span> dic</span><br><span class="line"></span><br><span class="line">	   </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(tjNum,[<span class="number">1</span>,<span class="number">1</span>],&#123;&#125;)</span><br><span class="line">	   </span><br><span class="line">&#123;&#125; <span class="number">1</span></span><br><span class="line">&#123;<span class="number">1</span>: <span class="number">1</span>&#125; <span class="number">1</span></span><br><span class="line">&#123;<span class="number">1</span>: <span class="number">2</span>&#125;<span class="comment">#这是return来的。。。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>filter():</p>
<blockquote>
<p>将一个单参函数作用到一个序列上，返回该序列中使得该函数返回true的那些元素组成的filter()对象，如果指定函数为None,则返回序列中等价于true的元素</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>seq=[<span class="string">&#x27;foo&#x27;</span>,<span class="string">&#x27;x41&#x27;</span>,<span class="string">&#x27;?!&#x27;</span>,<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;* * *&#x27;</span>]</span><br><span class="line">	      </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">x</span>):</span></span><br><span class="line">	      <span class="keyword">return</span> x.isalnum()<span class="comment">#是否为数字或字母</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>filter(func,seq)</span><br><span class="line">	      </span><br><span class="line">&lt;filter object at <span class="number">0x032E1230</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(_)</span><br><span class="line">	      </span><br><span class="line">[<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;x41&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(filter(<span class="literal">None</span>,[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">12</span>]))</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">12</span>]</span><br></pre></td></tr></table></figure>

<h2 id="类型转换与类型判断"><a href="#类型转换与类型判断" class="headerlink" title="类型转换与类型判断"></a>类型转换与类型判断</h2><p><code>bin()  oct()  hex()</code>  参数都是整数！！！</p>
<h2 id="int"><a href="#int" class="headerlink" title="int()"></a>int()</h2><p><code>int()</code></p>
<blockquote>
<p>隐含进制：<code>0x  0b  0o </code></p>
</blockquote>
<blockquote>
<p>字符串没有隐含进制，所以需要说明是什么进制   范围：或<code>0</code>             <code>2~36</code></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Help on <span class="class"><span class="keyword">class</span> <span class="title">int</span> <span class="title">in</span> <span class="title">module</span> <span class="title">builtins</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">int</span>(<span class="params">object</span>)</span></span><br><span class="line"><span class="class"> |  <span class="title">int</span>(<span class="params">[x]</span>) -&gt; integer</span></span><br><span class="line"><span class="class"> |  int(x, base=10) -&gt; integer</span></span><br><span class="line"><span class="class"> |  </span></span><br><span class="line"><span class="class"> |  Convert a number or string to an integer, or return 0 if no arguments</span></span><br><span class="line"><span class="class"> |  are given.  If x is a number, return x.__int__().  For floating point</span></span><br><span class="line"><span class="class"> |  numbers, this truncates towards zero.</span></span><br><span class="line"><span class="class"> |  </span></span><br><span class="line"><span class="class"> |  If x is not a number or if base is given, then x must be a string,</span></span><br><span class="line"><span class="class"> |  bytes, or bytearray instance representing an integer literal in the</span></span><br><span class="line"><span class="class"> |  given base.  The literal can be preceded by &#x27;+&#x27; or &#x27;-&#x27; and be surrounded</span></span><br><span class="line"><span class="class"> |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.</span></span><br><span class="line"><span class="class"> |  Base 0 means to interpret the base from the string as an integer literal.</span></span><br><span class="line"><span class="class"> </span></span><br></pre></td></tr></table></figure>


<h2 id="float-complex"><a href="#float-complex" class="headerlink" title="float()  complex()"></a>float()  complex()</h2><p><code>float()</code></p>
<h2 id="ord-chr-str"><a href="#ord-chr-str" class="headerlink" title="ord()  chr()    str()"></a>ord()  chr()    str()</h2><p><code>ord()只节一个字符</code></p>
<h2 id="sorted-reversed"><a href="#sorted-reversed" class="headerlink" title="sorted()  reversed()"></a>sorted()  reversed()</h2><blockquote>
<p>sorted()对可迭代对象（列表，元组，字典，集合等）进行排序并返回新列表。<br>reversed（）：对可迭代对象（生成器对象和具有惰性求值特性的<code>zip  map  filter  enumerate等</code>类似对象<strong>除外</strong>）进行翻转并返回可迭代的reversed对象。</p>
</blockquote>
<h2 id="max-min-sum"><a href="#max-min-sum" class="headerlink" title="max() min() sum()"></a>max() min() sum()</h2><blockquote>
<p>计算可迭代对象的所有元素中的</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> random <span class="keyword">import</span> randint  <span class="comment">#包含１０个[1,100]之间的随机数列表。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[randint(<span class="number">1</span>,<span class="number">100</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(max(a),min(a),sum(a))</span><br><span class="line"><span class="number">93</span> <span class="number">9</span> <span class="number">599</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum(a)/len(a)<span class="comment">#求平均数。。</span></span><br><span class="line"><span class="number">59.9</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>max与min  都支持default参数和key参数，其中default参数用来指定可迭代对象为空时默认返回的最大值与最小值，而key参数用来指定比较大小的依据或规则。<br>sum还支持start参数，用来控制求和的初始值。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>max([<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;111&#x27;</span>])</span><br><span class="line"><span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>max([<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;111&#x27;</span>],key=len)</span><br><span class="line"><span class="string">&#x27;111&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(max([],default=<span class="literal">None</span>))<span class="comment">#对空列表求最大值，返回空值ＮＯＮＥ</span></span><br><span class="line"><span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst=[[randint(<span class="number">1</span>,<span class="number">50</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>) ] <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">30</span>)]　　　<span class="comment">#生产包含３０个子列表的列表。。每个子列表包含５个介于【１，５０】区间的整数。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst</span><br><span class="line">[[<span class="number">26</span>, <span class="number">46</span>, <span class="number">13</span>, <span class="number">50</span>, <span class="number">29</span>], [<span class="number">35</span>, <span class="number">13</span>, <span class="number">34</span>, <span class="number">47</span>, <span class="number">27</span>], [<span class="number">1</span>, <span class="number">32</span>, <span class="number">17</span>, <span class="number">31</span>, <span class="number">3</span>], [<span class="number">14</span>, <span class="number">10</span>, <span class="number">47</span>, <span class="number">4</span>, <span class="number">22</span>], [<span class="number">29</span>, <span class="number">17</span>, <span class="number">22</span>, <span class="number">34</span>, <span class="number">50</span>], [<span class="number">29</span>, <span class="number">22</span>, <span class="number">39</span>, <span class="number">34</span>, <span class="number">14</span>], [<span class="number">21</span>, <span class="number">46</span>, <span class="number">31</span>, <span class="number">46</span>, <span class="number">32</span>], [<span class="number">6</span>, <span class="number">28</span>, <span class="number">16</span>, <span class="number">27</span>, <span class="number">30</span>], [<span class="number">39</span>, <span class="number">32</span>, <span class="number">3</span>, <span class="number">16</span>, <span class="number">14</span>], [<span class="number">9</span>, <span class="number">28</span>, <span class="number">35</span>, <span class="number">42</span>, <span class="number">23</span>], [<span class="number">41</span>, <span class="number">21</span>, <span class="number">7</span>, <span class="number">22</span>, <span class="number">5</span>], [<span class="number">1</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">46</span>, <span class="number">17</span>], [<span class="number">22</span>, <span class="number">17</span>, <span class="number">12</span>, <span class="number">50</span>, <span class="number">16</span>], [<span class="number">22</span>, <span class="number">48</span>, <span class="number">26</span>, <span class="number">12</span>, <span class="number">21</span>], [<span class="number">30</span>, <span class="number">40</span>, <span class="number">47</span>, <span class="number">34</span>, <span class="number">45</span>], [<span class="number">15</span>, <span class="number">20</span>, <span class="number">29</span>, <span class="number">20</span>, <span class="number">9</span>], [<span class="number">12</span>, <span class="number">20</span>, <span class="number">33</span>, <span class="number">38</span>, <span class="number">7</span>], [<span class="number">24</span>, <span class="number">31</span>, <span class="number">50</span>, <span class="number">29</span>, <span class="number">15</span>], [<span class="number">43</span>, <span class="number">11</span>, <span class="number">37</span>, <span class="number">5</span>, <span class="number">21</span>], [<span class="number">10</span>, <span class="number">41</span>, <span class="number">6</span>, <span class="number">46</span>, <span class="number">37</span>], [<span class="number">44</span>, <span class="number">21</span>, <span class="number">4</span>, <span class="number">29</span>, <span class="number">13</span>], [<span class="number">18</span>, <span class="number">10</span>, <span class="number">41</span>, <span class="number">17</span>, <span class="number">10</span>], [<span class="number">19</span>, <span class="number">38</span>, <span class="number">8</span>, <span class="number">25</span>, <span class="number">6</span>], [<span class="number">23</span>, <span class="number">47</span>, <span class="number">12</span>, <span class="number">33</span>, <span class="number">9</span>], [<span class="number">6</span>, <span class="number">29</span>, <span class="number">42</span>, <span class="number">29</span>, <span class="number">41</span>], [<span class="number">4</span>, <span class="number">18</span>, <span class="number">25</span>, <span class="number">13</span>, <span class="number">33</span>], [<span class="number">29</span>, <span class="number">38</span>, <span class="number">4</span>, <span class="number">32</span>, <span class="number">1</span>], [<span class="number">18</span>, <span class="number">29</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">44</span>], [<span class="number">15</span>, <span class="number">50</span>, <span class="number">45</span>, <span class="number">31</span>, <span class="number">37</span>], [<span class="number">48</span>, <span class="number">45</span>, <span class="number">18</span>, <span class="number">4</span>, <span class="number">36</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>max(*lst,key=sum)<span class="comment">#返回元素之和最大的子列表，略去结果。</span></span><br><span class="line">[<span class="number">30</span>, <span class="number">40</span>, <span class="number">47</span>, <span class="number">34</span>, <span class="number">45</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>max(lst,key=sum)＃同上</span><br><span class="line">[<span class="number">30</span>, <span class="number">40</span>, <span class="number">47</span>, <span class="number">34</span>, <span class="number">45</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>max(lst,key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])</span><br><span class="line">[<span class="number">15</span>, <span class="number">50</span>, <span class="number">45</span>, <span class="number">31</span>, <span class="number">37</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum(range(<span class="number">11</span>))＃　ｓｔａｒｔ参数默认是０</span><br><span class="line"><span class="number">55</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum(range(<span class="number">1</span>,<span class="number">11</span>),<span class="number">5</span>)＃　给ｓｔａｒｔ赋值５</span><br><span class="line"><span class="number">60</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,],[<span class="number">4</span>]],[])＃　占用空间大，慎用</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum(<span class="number">2</span>**i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>))＃等比数列前ｎ项和<span class="number">2</span>**i</span><br><span class="line"><span class="number">1606938044258990275541962092341162602522202993782792835301375</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">&#x27;1&#x27;</span>*<span class="number">200</span>,<span class="number">2</span>)<span class="comment">#等价于上一个操作，但是速度快</span></span><br><span class="line"><span class="number">1606938044258990275541962092341162602522202993782792835301375</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">&#x27;1&#x27;</span>*<span class="number">200</span>,<span class="number">7</span>)＃　比值ｑ为<span class="number">2</span>~<span class="number">36</span>的都可以这样做</span><br><span class="line"><span class="number">1743639715219059529169816601969468943303198091695038943325023347339187627904043708629063769151560675048844208042091052362343863390613931864691792377889969422439576020000</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum(range(<span class="number">101</span>))</span><br><span class="line"><span class="number">5050</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">101</span>*<span class="number">100</span>//<span class="number">2</span></span><br><span class="line"><span class="number">5050</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h2><blockquote>
<p>把多个可迭代对象中的元素压缩到一起，返回一个可迭代的zip对象，其中每个元素都是包含原来的多个可迭代对象对应位置上的元素的元组，最终结果包含的元素个数取决于所有参数序列或可迭代对象中最短的那个。<br>左对齐，拉链</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(zip(<span class="string">&#x27;abcde&#x27;</span>))</span><br><span class="line">	      </span><br><span class="line">[(<span class="string">&#x27;a&#x27;</span>,), (<span class="string">&#x27;b&#x27;</span>,), (<span class="string">&#x27;c&#x27;</span>,), (<span class="string">&#x27;d&#x27;</span>,), (<span class="string">&#x27;e&#x27;</span>,)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(zip([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="string">&#x27;abc&#x27;</span>,(<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>)))</span><br><span class="line">	      </span><br><span class="line">[(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">11</span>), (<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">22</span>), (<span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>, <span class="number">33</span>)]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z=zip(<span class="string">&#x27;111&#x27;</span>,<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">	      </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(z)</span><br><span class="line">	      </span><br><span class="line">[(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;a&#x27;</span>), (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;a&#x27;</span>), (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;a&#x27;</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(z)</span><br><span class="line">	      </span><br><span class="line">[]</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="序列结构"><a href="#序列结构" class="headerlink" title="序列结构"></a>序列结构</h1><blockquote>
<p>分类</p>
<blockquote>
<p>可变序列，不可变序列<br>有序序列，无序序列</p>
</blockquote>
</blockquote>
<blockquote>
<p>双向索引</p>
</blockquote>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>开销大，功能强大。。</p>
<blockquote>
<p>包含若干元素的有序连续内存空间。。<br>当列表增加或删除元素时，<strong>列表对象自动进行内车的扩展或收缩</strong><br>从而保证相邻元素没有缝隙。。<br>但插入和删除非尾部元素时涉及大量元素的移到。。<br><code>[]</code><br>列表中可以放入任意对象</p>
</blockquote>
<blockquote>
<p>python采用基于值的自动内存管理模式，变量并不直接存储值<br>而是存储值得引用，所以列表中可以是不同类型的数据。。</p>
</blockquote>
<h3 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h3><p><code>a=[a,b]</code><br><code>a=[]</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(<span class="string">&#x27;qwert yy&#x27;</span>)</span><br><span class="line">[<span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;y&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(<span class="number">12345</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#26&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    list(<span class="number">12345</span>)</span><br><span class="line">TypeError: <span class="string">&#x27;int&#x27;</span> object <span class="keyword">is</span> <span class="keyword">not</span> iterable</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(range(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>))</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure>


<p><code>list()</code>将可迭代对象转化为列表</p>
<blockquote>
<p>把字典转化为列表时，默认是将 “键”转化为列表</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=&#123;<span class="number">1</span>:<span class="number">2</span>,<span class="number">2</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(a)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>而想将字典的键值转化为列表，需要使用<code>dict.items()</code></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="number">1</span>: <span class="number">2</span>, <span class="number">2</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(a.items())</span><br><span class="line">[(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">3</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>当你想删除某个对象时，<code>del</code><br>del 并不删除变量对应的值，只是删除变量并解除和值的绑定。<br>涉及  引用计数器的知识。<br>python内部每个值都维护一个计数器，每当有新的变量引用该值时，其引用计数器加一，当该变量被删除或不再引用该值时其引用计数器减一，<br>当某个值得引用计数器变为0时，则由垃圾回收器负责清理和删除。<br>当然，这由系统决定，如果要手动立马回收，可使用<code>gc</code>模块的<code>collect()</code>方法。。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gc</span><br><span class="line">gc.collect()<span class="comment">#立即进行垃圾回收</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.getrefcount(<span class="number">1</span>) <span class="comment">#查看 值 1 的引用计数</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.getrefcount(<span class="number">1</span>)</span><br><span class="line"><span class="number">831</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y=<span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.getrefcount(<span class="number">1</span>)</span><br><span class="line"><span class="number">832</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z=<span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.getrefcount(<span class="number">1</span>)</span><br><span class="line"><span class="number">833</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.getrefcount(<span class="number">1</span>)</span><br><span class="line"><span class="number">832</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> z</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.getrefcount(<span class="number">1</span>)</span><br><span class="line"><span class="number">831</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> gc</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>gc.cllect()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>gc.collect()</span><br><span class="line"><span class="number">199</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.getrefcount(<span class="number">1</span>)</span><br><span class="line"><span class="number">833</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>gc.collect(<span class="number">1</span>)</span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.getrefcount(<span class="number">1</span>)</span><br><span class="line"><span class="number">833</span></span><br></pre></td></tr></table></figure>
<h3 id="元素访问"><a href="#元素访问" class="headerlink" title="元素访问"></a>元素访问</h3><blockquote>
<p>双向索引</p>
</blockquote>
<h3 id="列表常用方法"><a href="#列表常用方法" class="headerlink" title="列表常用方法"></a>列表常用方法</h3><ol>
<li><code>append() insert()  extend()</code></li>
</ol>
<blockquote>
<p>都是添加元素<br>append()尾部    insert()插入    extend()将另一个列表中的所有元素追加至当前列表尾部<br>都属于 <strong>原地操作</strong>，不影响列表对象在内存中的起始地址。</p>
</blockquote>
<blockquote>
<p>想在列表头加入多个元素时，Insert（）效率低<br>可以先向尾部加入，再使用<code>reverse()</code>方法进行反转，当然，这恐怕不好。<br>或者使用标准库，<code>collections</code>里的双队列<code>deque</code>对象的<code>appendleft()</code>方法</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>w</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(w)<span class="comment"># 查看内存地址</span></span><br><span class="line"><span class="number">45630528</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>w.insert(<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>w</span><br><span class="line">[<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>w.extend([<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>w</span><br><span class="line">[<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>w.append([<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>w</span><br><span class="line">[<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, [<span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(w)</span><br><span class="line"><span class="number">45630528</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>pop()  remove()  clear()</code><br>都属于原地操作。。<blockquote>
<p>pop：删除并返回指定位置（默认是最后一个）&gt;pop：删除并返回指定位置（默认是最后一个）元素，位置非法，或对空列表使用会出异常。<br>remove(x)：删除列表中第一个与x相等的元素，若无x值，则异常<br>clear（）：清空列表的所有元素。</p>
</blockquote>
</li>
</ol>
<blockquote>
<p>也可以使用del删除位置的元素，也属于原地操作</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>w</span><br><span class="line">[<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, [<span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>w.pop(<span class="number">1</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>w</span><br><span class="line">[<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, [<span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>w.remove(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>w</span><br><span class="line">[<span class="number">2</span>, <span class="number">2</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, [<span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> w[<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>w</span><br><span class="line">[<span class="number">2</span>, <span class="number">2</span>, <span class="number">33</span>, <span class="number">44</span>, [<span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>w.clear()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>w</span><br><span class="line">[]</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><code>count()  index()</code></li>
</ol>
<blockquote>
<p>count(x):指定元素出现的次数<br>index(x):指定元素，首次出现的下标位置，如果不存在则抛出异常。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>w</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>w.count(<span class="number">2</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>w.count(<span class="number">1</span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>w.index(<span class="number">2</span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>w.index(<span class="number">1</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#87&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    w.index(<span class="number">1</span>)</span><br><span class="line">ValueError: <span class="number">1</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> list</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><code>sort() reverse()</code></li>
</ol>
<blockquote>
<p>sort():按指定规则对所有元素进行排序，默认规则是从小到大,原地排序(in-place sorting)<br>reverse（）；将所有元素逆序或翻转,原地逆序<br><strong>原地</strong>：列表首地址不变</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=list(range(<span class="number">11</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> random</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.shuffle(x)<span class="comment">#将列表中的元素随机乱序。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="number">7</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.sort(key=<span class="keyword">lambda</span> item:len(str(item)),reverse=<span class="literal">True</span>)<span class="comment">#转换为字符串后按长度降序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="number">10</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.sort(key=str)<span class="comment">#转换为字符串后按大小升序。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.reverse()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="number">10</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>排后，列表的原来位置全部丢失，若不想丢失原来的顺序，而只是返回一个新列表，可使用<br><code>内置函数：sorted()   reversed()</code><br>sorted:key与sort一样</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#实现复杂的排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>gameresult= [[<span class="string">&#x27;Bob&#x27;</span>,<span class="number">95.0</span>,<span class="string">&#x27;A&#x27;</span>],</span><br><span class="line">		 [<span class="string">&#x27;Alan&#x27;</span>,<span class="number">86.0</span>,<span class="string">&#x27;C&#x27;</span>],</span><br><span class="line">		 [<span class="string">&#x27;Mandy&#x27;</span>,<span class="number">83.5</span>,<span class="string">&#x27;A&#x27;</span>],</span><br><span class="line">		 [<span class="string">&#x27;Rob&#x27;</span>,<span class="number">89.3</span>,<span class="string">&#x27;E&#x27;</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(gameresult,key=itemgetter(<span class="number">2</span>))<span class="comment">#按子列表，第三个元素进行升序</span></span><br><span class="line">[[<span class="string">&#x27;Bob&#x27;</span>, <span class="number">95.0</span>, <span class="string">&#x27;A&#x27;</span>], [<span class="string">&#x27;Mandy&#x27;</span>, <span class="number">83.5</span>, <span class="string">&#x27;A&#x27;</span>], [<span class="string">&#x27;Alan&#x27;</span>, <span class="number">86.0</span>, <span class="string">&#x27;C&#x27;</span>], [<span class="string">&#x27;Rob&#x27;</span>, <span class="number">89.3</span>, <span class="string">&#x27;E&#x27;</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(gameresult,key=itemgetter(<span class="number">2</span>,<span class="number">0</span>),reverse=<span class="literal">True</span>)<span class="comment">#先按第三个元素升序，再按第一个元素升序</span></span><br><span class="line">[[<span class="string">&#x27;Rob&#x27;</span>, <span class="number">89.3</span>, <span class="string">&#x27;E&#x27;</span>], [<span class="string">&#x27;Alan&#x27;</span>, <span class="number">86.0</span>, <span class="string">&#x27;C&#x27;</span>], [<span class="string">&#x27;Mandy&#x27;</span>, <span class="number">83.5</span>, <span class="string">&#x27;A&#x27;</span>], [<span class="string">&#x27;Bob&#x27;</span>, <span class="number">95.0</span>, <span class="string">&#x27;A&#x27;</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1=[<span class="string">&quot;what&quot;</span>,<span class="string">&quot;i&#x27;m&quot;</span>,<span class="string">&quot;sorting&quot;</span>,<span class="string">&quot;by&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list2=[<span class="string">&quot;something&quot;</span>,<span class="string">&quot;else&quot;</span>,<span class="string">&quot;to&quot;</span>,<span class="string">&quot;sort&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pairs=zip(list1,list2)<span class="comment">#把两个列表中的内容配对</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[item[<span class="number">1</span>] <span class="keyword">for</span> item <span class="keyword">in</span> sorted (pairs,key=<span class="keyword">lambda</span> x:x[<span class="number">0</span>],reverse=<span class="literal">True</span>)]</span><br><span class="line">[<span class="string">&#x27;something&#x27;</span>, <span class="string">&#x27;to&#x27;</span>, <span class="string">&#x27;else&#x27;</span>, <span class="string">&#x27;sort&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(x,key=<span class="keyword">lambda</span> item:(item[<span class="number">1</span>],-item[<span class="number">2</span>]))<span class="comment">#以第2个元素升序，再以第三个元素降序</span></span><br><span class="line"><span class="comment">#这里负号只适用于数值型元素。。</span></span><br><span class="line">[[<span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=[<span class="string">&#x27;aaaa&#x27;</span>,<span class="string">&#x27;bc&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;ba&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(x,key=<span class="keyword">lambda</span> item:(len(item),item))<span class="comment">#先按长度排序，长度一样的正常排序</span></span><br><span class="line">[<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;ba&#x27;</span>, <span class="string">&#x27;bc&#x27;</span>, <span class="string">&#x27;aaaa&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="5">
<li><code>copy()</code></li>
</ol>
<blockquote>
<p>返回列表的浅复制。<br>浅复制：<strong>生成一个新的列表，并且把原列表中所有元素的引用都复制到新列表中</strong><br>如果原列表中只包含<em>整数，实数，复数等基本数据类型或元组，字符串这样的不可变数据类型的数据</em>，一般是没问题的。。<br>但如果原列表中包含列表之类可变的数据类型，由于浅复制时，只是把子列表的引用复制到新列表中，<br>于是修改两个列表中的任何一个都会影响到另外一个。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;ba&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y=x.copy()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">[<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;ba&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y[<span class="number">2</span>].append(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">[<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;ba&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;ba&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y[<span class="number">0</span>]=<span class="number">12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">[<span class="number">12</span>, <span class="string">&#x27;ba&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;ba&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(x)</span><br><span class="line"><span class="number">49351576</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(y)</span><br><span class="line"><span class="number">49306880</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(x[<span class="number">2</span>])</span><br><span class="line"><span class="number">49351096</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(y[<span class="number">2</span>])</span><br><span class="line"><span class="number">49351096</span></span><br></pre></td></tr></table></figure>

<p>列表对象的copy（）方法和切片操作，以及copy标准库中的copy()函数一样都是浅复制。</p>
<blockquote>
<p>想达到深复制：copy库中的<code>deepcopy()</code>实现。<br>深复制：对原列表中的元素进行递归，把所有的<strong>值</strong>都复制到新列表中，对嵌套的子列表不再是引用复制。。<br>原，新列表相互独立。。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;ba&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> copy</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y=copy.deepcopy(x)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">[<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;ba&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y[<span class="number">2</span>].append(<span class="number">22</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">[<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;ba&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">22</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;ba&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(y[<span class="number">2</span>])</span><br><span class="line"><span class="number">49307080</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(x[<span class="number">2</span>])</span><br><span class="line"><span class="number">49351096</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>

<p>列表对象的直接赋值：<br><code>x=[1,3,[1,2]]</code><br>与深复制或浅复制都不一样。。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y=[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(x[<span class="number">2</span>])</span><br><span class="line"><span class="number">49331816</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(y[<span class="number">2</span>])</span><br><span class="line"><span class="number">49351576</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>

<p><strong>列表变量赋值给另一个变量</strong>：引用,则做的任何修改都会相互影响。。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>w=x</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>w</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>w.append(<span class="number">222</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>w</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], <span class="number">222</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], <span class="number">222</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(x[<span class="number">1</span>])</span><br><span class="line"><span class="number">1685576224</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(w[<span class="number">1</span>])</span><br><span class="line"><span class="number">1685576224</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>
<h3 id="列表对象支持的运算符"><a href="#列表对象支持的运算符" class="headerlink" title="列表对象支持的运算符"></a>列表对象支持的运算符</h3><p><code>+</code>：不属于原地操作，而是返回新列表<br><code>+=</code>:复合赋值符与ａｐｐｅｎｄ（）一样高效，是原地操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=list(range(<span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(x)</span><br><span class="line"><span class="number">3069972716</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=x+[<span class="number">12</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">12</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(x)</span><br><span class="line"><span class="number">3066278412</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y=[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(y)</span><br><span class="line"><span class="number">3069972716</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y+=[<span class="number">22</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">22</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(y)</span><br><span class="line"><span class="number">3069972716</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>*</code>:序列重复，返回新列表<br><code>*=</code>:也是原地操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">12</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(x)</span><br><span class="line"><span class="number">3066278412</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=x*<span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">12</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(x)</span><br><span class="line"><span class="number">3070084876</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">12</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(x)</span><br><span class="line"><span class="number">3070084876</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x*=<span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">12</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(x)</span><br><span class="line"><span class="number">3070084876</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]*<span class="number">0</span>  <span class="comment">#清空列表元素</span></span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>
<p>当列表中元素储存的是地址而不是值时，情况就有些复杂了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=[[<span class="number">1</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[[<span class="number">1</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=x*<span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[[<span class="number">1</span>], [<span class="number">1</span>], [<span class="number">1</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(x)</span><br><span class="line"><span class="number">3066278380</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(x[<span class="number">0</span>])==id(x[<span class="number">1</span>])==id(x[<span class="number">2</span>])</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x[<span class="number">0</span>].append(<span class="number">11</span>)　　<span class="comment">##另外的两个子列表也会受影响</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[[<span class="number">1</span>, <span class="number">11</span>], [<span class="number">1</span>, <span class="number">11</span>], [<span class="number">1</span>, <span class="number">11</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(x[<span class="number">0</span>])</span><br><span class="line"><span class="number">3066278412</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(x[<span class="number">1</span>])</span><br><span class="line"><span class="number">3066278412</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(x[<span class="number">2</span>])</span><br><span class="line"><span class="number">3066278412</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[[<span class="number">1</span>, <span class="number">11</span>], [<span class="number">1</span>, <span class="number">11</span>], [<span class="number">1</span>, <span class="number">11</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x[<span class="number">0</span>]=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]　　<span class="comment">#这个叫直接赋值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">11</span>], [<span class="number">1</span>, <span class="number">11</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(x[<span class="number">0</span>])  <span class="comment">#地址变了</span></span><br><span class="line"><span class="number">3066278220</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(x[<span class="number">1</span>])</span><br><span class="line"><span class="number">3066278412</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(x[<span class="number">2</span>])</span><br><span class="line"><span class="number">3066278412</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>不过，列表推导式的情况又不同</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=[[] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>)] <span class="comment">#列表推导式</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[[], [], []]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(x[<span class="number">0</span>])</span><br><span class="line"><span class="number">3067213292</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(x[<span class="number">1</span>])</span><br><span class="line"><span class="number">3066273772</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(x[<span class="number">2</span>])</span><br><span class="line"><span class="number">3066279948</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>

<h3 id="使用列表模拟向量运算"><a href="#使用列表模拟向量运算" class="headerlink" title="使用列表模拟向量运算"></a>使用列表模拟向量运算</h3><blockquote>
<p>列表不支持与整数的加，减，除<br>也不支持列表间的　减，乘，除操作<br>列表之间的加，表示列表元素的合并，生产新列表。。</p>
</blockquote>
<blockquote>
<p>以ｐｙｔｈｏｎ的列表为向量时，则可以使用，内置函数，列表推导式，和标准库operator中的方法来实现。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line">x&gt;&gt;&gt; </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=[randint(<span class="number">1</span>,<span class="number">100</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">[<span class="number">94</span>, <span class="number">49</span>, <span class="number">99</span>, <span class="number">10</span>, <span class="number">84</span>, <span class="number">51</span>, <span class="number">40</span>, <span class="number">21</span>, <span class="number">17</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(map(<span class="keyword">lambda</span> i:i+<span class="number">5</span>,x)) <span class="comment">#所有元素同时加５</span></span><br><span class="line">[<span class="number">99</span>, <span class="number">54</span>, <span class="number">104</span>, <span class="number">15</span>, <span class="number">89</span>, <span class="number">56</span>, <span class="number">45</span>, <span class="number">26</span>, <span class="number">22</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[i+<span class="number">5</span> <span class="keyword">for</span> i <span class="keyword">in</span> x] <span class="comment">#使用列表推导式加５</span></span><br><span class="line">[<span class="number">99</span>, <span class="number">54</span>, <span class="number">104</span>, <span class="number">15</span>, <span class="number">89</span>, <span class="number">56</span>, <span class="number">45</span>, <span class="number">26</span>, <span class="number">22</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=[randint(<span class="number">1</span>,<span class="number">100</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y=[randint(<span class="number">1</span>,<span class="number">100</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="number">28</span>, <span class="number">56</span>, <span class="number">65</span>, <span class="number">29</span>, <span class="number">25</span>, <span class="number">30</span>, <span class="number">9</span>, <span class="number">55</span>, <span class="number">97</span>, <span class="number">70</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">[<span class="number">7</span>, <span class="number">99</span>, <span class="number">88</span>, <span class="number">45</span>, <span class="number">81</span>, <span class="number">95</span>, <span class="number">98</span>, <span class="number">14</span>, <span class="number">91</span>, <span class="number">33</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> operator</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum(map(operator.mul,x,y)) <span class="comment">#计算向量内积</span></span><br><span class="line"><span class="number">30429</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum((i*j <span class="keyword">for</span> i,j <span class="keyword">in</span> zip(x,y)))　<span class="comment">#使用列表推导式计算</span></span><br><span class="line"><span class="number">30429</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(map(operator.add,x,y)) <span class="comment">#计算对应元素相加</span></span><br><span class="line">[<span class="number">35</span>, <span class="number">155</span>, <span class="number">153</span>, <span class="number">74</span>, <span class="number">106</span>, <span class="number">125</span>, <span class="number">107</span>, <span class="number">69</span>, <span class="number">188</span>, <span class="number">103</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(map(<span class="keyword">lambda</span> i,j :i+j,x,y)) <span class="comment">#使用lambda</span></span><br><span class="line">[<span class="number">35</span>, <span class="number">155</span>, <span class="number">153</span>, <span class="number">74</span>, <span class="number">106</span>, <span class="number">125</span>, <span class="number">107</span>, <span class="number">69</span>, <span class="number">188</span>, <span class="number">103</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[i+j <span class="keyword">for</span> i,j <span class="keyword">in</span> zip(x,y)] <span class="comment">#使用列表推导式</span></span><br><span class="line">[<span class="number">35</span>, <span class="number">155</span>, <span class="number">153</span>, <span class="number">74</span>, <span class="number">106</span>, <span class="number">125</span>, <span class="number">107</span>, <span class="number">69</span>, <span class="number">188</span>, <span class="number">103</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h3><p>(list comprehensiion),也称列表解析式。。</p>
<blockquote>
<p>使用非常简洁的方式对列表，或其它可迭代对象的元素进行遍历，过滤，或再次计算，快速生成满足特定需求的新序列。。<br><code>aList=[x*x for x in range(10)]</code></p>
</blockquote>
<p>等价于：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aList&#x3D;[]</span><br><span class="line">for x in range(10):</span><br><span class="line">	aList.append(x*x)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>也可以借助ｐｙｔｈｏｎ函数式编程：<br><code>aList=list(map(lambda x:x*x,range(10)))</code><br><code>aList=list(map(lambda x:pow(x,2),range(10)))</code></p>
</blockquote>
<blockquote>
<p>或者不使用列表推导式，而使用函数式编程<br><code>aList=list(map(lambda x: x*x,range(10)))</code><br><code>aList=list(map(lambda x:pow(x,2),range(10)))</code></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList=[x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=list(map(<span class="keyword">lambda</span> x:x*x,range(<span class="number">10</span>)))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c=list(map(<span class="keyword">lambda</span> x:pow(x,<span class="number">2</span>),range(<span class="number">10</span>)))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>freshfruit=[<span class="string">&#x27;banana&#x27;</span>,<span class="string">&#x27;loganberry&#x27;</span>,<span class="string">&#x27;passion fruit&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>freshfruit</span><br><span class="line">[<span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;loganberry&#x27;</span>, <span class="string">&#x27;passion fruit&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=[w.strip() <span class="keyword">for</span> w <span class="keyword">in</span> freshfruit]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">[<span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;loganberry&#x27;</span>, <span class="string">&#x27;passion fruit&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="列表推导式应用"><a href="#列表推导式应用" class="headerlink" title="列表推导式应用"></a>列表推导式应用</h2><p>棋盘放大米问题：<br><code>sum([2**i for i in range(64)])</code></p>
<ul>
<li>实现嵌套列表的平铺</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>vec=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>vec</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[num <span class="keyword">for</span> elem <span class="keyword">in</span> vec <span class="keyword">for</span> num <span class="keyword">in</span> elem]<span class="comment">#其实是两层循环。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如何理解[num for elem in vec for num in elem]</span></span><br><span class="line">第一个num是最后要append的。</span><br><span class="line">于是看 <span class="keyword">for</span> elem <span class="keyword">in</span> vec  取出vec中的子列表</span><br><span class="line">然后再取出elem里的元素。。。</span><br><span class="line"></span><br><span class="line">等价于：</span><br><span class="line">vec=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line">result=[]</span><br><span class="line"><span class="keyword">for</span> elem <span class="keyword">in</span> vec:</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> elem:</span><br><span class="line">        result.append(num)</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果有多级嵌套或者子列表嵌套深度不同的话，就得使用函数递归了</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="如果有多级嵌套或者子列表嵌套深度不同的话，就得使用函数递归了"><a href="#如果有多级嵌套或者子列表嵌套深度不同的话，就得使用函数递归了" class="headerlink" title="如果有多级嵌套或者子列表嵌套深度不同的话，就得使用函数递归了"></a>如果有多级嵌套或者子列表嵌套深度不同的话，就得使用函数递归了</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def flatList(lst):</span><br><span class="line">	result&#x3D;[]   #存放最终结果的列表</span><br><span class="line">	def nested(lst):  #函数嵌套定义</span><br><span class="line">		for item in lst:</span><br><span class="line">			if isinstance(item,lst):</span><br><span class="line">				nested(item)   #递归子列表</span><br><span class="line">			else:</span><br><span class="line">				result.append(item)   #扁平化列表</span><br><span class="line">	nested(lst)  #掉用嵌套定义的函数</span><br><span class="line">	return result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def flatList(lst):</span><br><span class="line">    result&#x3D;[]</span><br><span class="line">#    print(&quot;hello&quot;)</span><br><span class="line">    def nested(lst):</span><br><span class="line">        for item in lst:</span><br><span class="line">            if isinstance(item,list):</span><br><span class="line">                nested(item)</span><br><span class="line">            else:</span><br><span class="line">                result.append(item)</span><br><span class="line">    nested(lst)</span><br><span class="line">    </span><br><span class="line">    return result</span><br><span class="line">a&#x3D;flatList([[1,2,3],[1,2,[3,4,5]]])</span><br><span class="line">#b&#x3D;[1,[1,2,3],[3,4]]</span><br><span class="line">#b&#x3D;[1,23]</span><br><span class="line">#a&#x3D;flatList(b)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<ul>
<li>过滤不符合条件的元素</li>
</ul>
<blockquote>
<p>在列表推导式中只在结果列表中保留符合条件的元素。</p>
</blockquote>
<blockquote>
<p>列出当前文件夹下所有python源文件：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">[filename <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(<span class="string">&#x27;.&#x27;</span>) <span class="keyword">if</span> filename.endswith((<span class="string">&#x27;.py&#x27;</span>,<span class="string">&#x27;.pyw&#x27;</span>))]</span><br><span class="line">       </span><br><span class="line">&gt;&gt;&gt;[<span class="string">&#x27;book1.py&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从列表中选择符合条件的元素组成新列表。。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList=[<span class="number">-1</span>,<span class="number">-4</span>,<span class="number">6</span>,<span class="number">7.5</span>,<span class="number">-3</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">-11</span>,<span class="number">23</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">-1</span>, <span class="number">-4</span>, <span class="number">6</span>, <span class="number">7.5</span>, <span class="number">-3</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">-11</span>, <span class="number">23</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[i <span class="keyword">for</span> i <span class="keyword">in</span> aList <span class="keyword">if</span> i&gt;<span class="number">0</span>]</span><br><span class="line">[<span class="number">6</span>, <span class="number">7.5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">23</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">＃查找列表中最大元素的所有位置</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=[randint(<span class="number">1</span>,<span class="number">10</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="number">8</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m=max(x)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[index <span class="keyword">for</span> index,value <span class="keyword">in</span> enumerate(x) <span class="keyword">if</span> value==m]</span><br><span class="line">[<span class="number">4</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li>同时遍历多个列表或可迭代对象</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[(x,y) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="keyword">for</span> y <span class="keyword">in</span> [<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>] <span class="keyword">if</span> x!=y]</span><br><span class="line">[(<span class="number">1</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">1</span>), (<span class="number">3</span>, <span class="number">4</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[(x,y) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="keyword">if</span> x==<span class="number">1</span> <span class="keyword">for</span> y <span class="keyword">in</span> [<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>] <span class="keyword">if</span> y!=x]</span><br><span class="line">[(<span class="number">1</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">4</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">#等价于</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result=[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> y <span class="keyword">in</span> [<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>]:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">if</span> x!=y:</span><br><span class="line"><span class="meta">... </span>                    result.append((x,y))</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result</span><br><span class="line">[(<span class="number">1</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">1</span>), (<span class="number">3</span>, <span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以发现，这是两个序列笛卡尔积的一部分，还有一种技巧：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> itertools</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(itertools.product([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>]))</span><br><span class="line">[(<span class="number">1</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">3</span>), (<span class="number">3</span>, <span class="number">1</span>), (<span class="number">3</span>, <span class="number">4</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(filter(<span class="keyword">lambda</span> x:x[<span class="number">0</span>]!=x[<span class="number">1</span>],itertools.product([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>])))</span><br><span class="line">[(<span class="number">1</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">1</span>), (<span class="number">3</span>, <span class="number">4</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li>矩阵转置<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>matrix=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[[row[i] <span class="keyword">for</span> row <span class="keyword">in</span> matrix] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line">[[<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>], [<span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>], [<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">#执行过程</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>matrix</span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], [<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result=[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(len(matrix[<span class="number">0</span>])):</span><br><span class="line"><span class="meta">... </span>    result.append([row[i] <span class="keyword">for</span> row <span class="keyword">in</span> matrix])</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result</span><br><span class="line">[[<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>], [<span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>], [<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 再拆开</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>matrix</span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], [<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result=[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(len(matrix[<span class="number">0</span>])):</span><br><span class="line"><span class="meta">... </span>    temp=[]</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> row <span class="keyword">in</span> matrix:</span><br><span class="line"><span class="meta">... </span>            temp.append(row[i])</span><br><span class="line"><span class="meta">... </span>    result.append(temp)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result</span><br><span class="line">[[<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>], [<span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>], [<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li>列表推导式中使用函数或复杂表达式</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">v</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> v%<span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>            v==v**<span class="number">2</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>            v=v+<span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> v</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print([f(v) <span class="keyword">for</span> v <span class="keyword">in</span> [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">-1</span>] <span class="keyword">if</span> v&gt;<span class="number">0</span>])</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print([v**<span class="number">2</span> <span class="keyword">if</span> v%<span class="number">2</span>==<span class="number">0</span> <span class="keyword">else</span> v+<span class="number">1</span> <span class="keyword">for</span> v <span class="keyword">in</span> [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">-1</span>] <span class="keyword">if</span> v&gt;<span class="number">0</span>])</span><br><span class="line">[<span class="number">4</span>, <span class="number">4</span>, <span class="number">16</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用列表推导式生成１００以内到的素数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[p <span class="keyword">for</span> p <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">100</span>) <span class="keyword">if</span> <span class="number">0</span> <span class="keyword">not</span> <span class="keyword">in</span> [p%d <span class="keyword">for</span> d <span class="keyword">in</span> range(<span class="number">2</span>,int(sqrt(p))+<span class="number">1</span>)]]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;listcomp&gt;</span><br><span class="line">NameError: name <span class="string">&#x27;sqrt&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[p <span class="keyword">for</span> p <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">100</span>) <span class="keyword">if</span> <span class="number">0</span> <span class="keyword">not</span> <span class="keyword">in</span> [p%d <span class="keyword">for</span> d <span class="keyword">in</span> range(<span class="number">2</span>,int(sqrt(p))+<span class="number">1</span>)]]</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">67</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">79</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">97</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="强大的切片功能"><a href="#强大的切片功能" class="headerlink" title="强大的切片功能"></a>强大的切片功能</h3><blockquote>
<p>列表，元组，字符串，range对象</p>
</blockquote>
<p><code>[start:end:step]</code> step默认为１，当start为０时可以省略，当ｅｎｄ为列表长度时可以省略</p>
<ol>
<li><p>使用切片获取列表元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst=list(range(<span class="number">12</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[::]</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[::<span class="number">-1</span>]</span><br><span class="line">[<span class="number">11</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[::<span class="number">2</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[<span class="number">1111</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">IndexError: list index out of range</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[<span class="number">1</span>:<span class="number">1111</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[<span class="number">-111</span>:<span class="number">2</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(lst)</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[<span class="number">2</span>:<span class="number">-11</span>:<span class="number">-1</span>]</span><br><span class="line">[<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[<span class="number">3</span>:<span class="number">-2</span>]</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用切片为列表增加元素</p>
<blockquote>
<p>属于原地操作<br>在列表任意位置插入新元素</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[len(lst):]</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[len(lst):]=[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>替换列表里的元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst</span><br><span class="line">[<span class="number">123</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[::<span class="number">2</span>]=[<span class="number">0</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError: attempt to assign sequence of size <span class="number">1</span> to extended slice of size <span class="number">7</span></span><br><span class="line">＃从上面可以看出，切片不连续时，等号两边列表长度必须相等。。。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[::<span class="number">2</span>]=[<span class="number">0</span>]*<span class="number">3</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError: attempt to assign sequence of size <span class="number">3</span> to extended slice of size <span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[::<span class="number">2</span>]=[<span class="number">0</span>]*<span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst</span><br><span class="line">[<span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst</span><br><span class="line">[<span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[::<span class="number">2</span>]=[<span class="string">&#x27;ab&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;r&#x27;</span>]<span class="comment">#隔一个，修改一个</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst</span><br><span class="line">[<span class="string">&#x27;ab&#x27;</span>, <span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;d&#x27;</span>, <span class="number">7</span>, <span class="string">&#x27;e&#x27;</span>, <span class="number">9</span>, <span class="string">&#x27;f&#x27;</span>, <span class="number">11</span>, <span class="string">&#x27;d&#x27;</span>, <span class="number">3</span>, <span class="string">&#x27;r&#x27;</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">#序列的解包用法</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[<span class="number">1</span>::<span class="number">2</span>]=range(<span class="number">7</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst</span><br><span class="line">[<span class="string">&#x27;ab&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;c&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;d&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;e&#x27;</span>, <span class="number">3</span>, <span class="string">&#x27;f&#x27;</span>, <span class="number">4</span>, <span class="string">&#x27;d&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;r&#x27;</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[<span class="number">1</span>::<span class="number">2</span>]=map(<span class="keyword">lambda</span> x:x!=<span class="number">5</span>,range(<span class="number">7</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst</span><br><span class="line">[<span class="string">&#x27;ab&#x27;</span>, <span class="literal">True</span>, <span class="string">&#x27;c&#x27;</span>, <span class="literal">True</span>, <span class="string">&#x27;d&#x27;</span>, <span class="literal">True</span>, <span class="string">&#x27;e&#x27;</span>, <span class="literal">True</span>, <span class="string">&#x27;f&#x27;</span>, <span class="literal">True</span>, <span class="string">&#x27;d&#x27;</span>, <span class="literal">False</span>, <span class="string">&#x27;r&#x27;</span>, <span class="literal">True</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># map filtet zip 都支持这样用</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[<span class="number">1</span>::<span class="number">2</span>]=zip(<span class="string">&#x27;abcdefg&#x27;</span>,range(<span class="number">7</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst</span><br><span class="line">[<span class="string">&#x27;ab&#x27;</span>, (<span class="string">&#x27;a&#x27;</span>, <span class="number">0</span>), <span class="string">&#x27;c&#x27;</span>, (<span class="string">&#x27;b&#x27;</span>, <span class="number">1</span>), <span class="string">&#x27;d&#x27;</span>, (<span class="string">&#x27;c&#x27;</span>, <span class="number">2</span>), <span class="string">&#x27;e&#x27;</span>, (<span class="string">&#x27;d&#x27;</span>, <span class="number">3</span>), <span class="string">&#x27;f&#x27;</span>, (<span class="string">&#x27;e&#x27;</span>, <span class="number">4</span>), <span class="string">&#x27;d&#x27;</span>, (<span class="string">&#x27;f&#x27;</span>, <span class="number">5</span>), <span class="string">&#x27;r&#x27;</span>, (<span class="string">&#x27;g&#x27;</span>, <span class="number">6</span>)]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li><p>使用切片删除列表元素</p>
<blockquote>
<p>可使用　del来删除不连续的元素</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst=list(range(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[:<span class="number">3</span>]=[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> lst[<span class="number">4</span>::<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>切片得到的是浅复制</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(lst)</span><br><span class="line"><span class="number">3069936012</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst2=lst[::]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst2</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(lst2)</span><br><span class="line"><span class="number">3070871788</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst==lst2   <span class="comment">#两列表对象值相等</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(lst[<span class="number">0</span>])==id(lst2[<span class="number">0</span>])　　　＃相同的值在内存中只有一份。。。</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=[[<span class="number">1</span>],[<span class="number">2</span>],[<span class="number">3</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[[<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y=x[:]　　＃切片赋值</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">[[<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y[<span class="number">0</span>]=[<span class="number">4</span>]　　＃直接赋值时，不影响x</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">[[<span class="number">4</span>], [<span class="number">2</span>], [<span class="number">3</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[[<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y[<span class="number">1</span>].append(<span class="number">5</span>)   <span class="comment">#原地增加元素时，影响x</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">[[<span class="number">4</span>], [<span class="number">2</span>, <span class="number">5</span>], [<span class="number">3</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[[<span class="number">1</span>], [<span class="number">2</span>, <span class="number">5</span>], [<span class="number">3</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>w=y  <span class="comment">#列表直接赋值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>w</span><br><span class="line">[[<span class="number">4</span>], [<span class="number">2</span>, <span class="number">5</span>], [<span class="number">3</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>w[<span class="number">0</span>]=[<span class="number">12</span>]　　　＃通过下标时，也影响y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>w</span><br><span class="line">[[<span class="number">12</span>], [<span class="number">2</span>, <span class="number">5</span>], [<span class="number">3</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">[[<span class="number">12</span>], [<span class="number">2</span>, <span class="number">5</span>], [<span class="number">3</span>]]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><blockquote>
<p>轻量级列表<br>由于不需要列表那么多功能，且列表开销又那么大<br>属于不可变(immutable)序列，不可以直接修改元组中元素的值。<br>要删除的话，只能删除整个元组。<br>所以元组也可以被认为是常量列表</p>
</blockquote>
<blockquote>
<p>ｐｙｔｈｏｎ对元组做了大量的优化，访问速度快。</p>
</blockquote>
<blockquote>
<p><code>()</code><br>但是元组是不可变的</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=(<span class="number">2</span>)  与　x=<span class="number">2</span> 是一样的</span><br><span class="line">x=(<span class="number">2</span>,)  才表示元组，所以　　单个元素时要加　　,</span><br><span class="line"></span><br><span class="line">x=()  空元组</span><br><span class="line"></span><br><span class="line">ｘ=tuple()  </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">tuple(range(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回元组的可迭代对象</span></span><br><span class="line">enumerate()   map()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(zip(range(<span class="number">3</span>),<span class="string">&#x27;abcd&#x27;</span>))</span><br><span class="line">[(<span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>), (<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>当元组里包含可变序列时，情况就复杂了：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=([<span class="number">1</span>,<span class="number">2</span>],<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(x)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">tuple</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">x</span>[0].<span class="title">append</span>(<span class="params"><span class="number">4</span></span>)  #子列表原地操作，可以</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">x</span></span></span><br><span class="line"><span class="class">(<span class="params">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>], <span class="number">3</span></span>)</span></span><br><span class="line">&gt;&gt;&gt; x[0][0]=12　　＃子列表直接赋值，也可以</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">([<span class="number">12</span>, <span class="number">2</span>, <span class="number">4</span>], <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x[<span class="number">0</span>]=[<span class="number">12</span>]　　＃　直接赋值，不可以，出异常</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">&#x27;tuple&#x27;</span> object does <span class="keyword">not</span> support item assignment</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">([<span class="number">12</span>, <span class="number">2</span>, <span class="number">4</span>], <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x[<span class="number">0</span>]+=[<span class="number">1111</span>]　　＃也会出异常，但是还是改变了值</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">&#x27;tuple&#x27;</span> object does <span class="keyword">not</span> support item assignment</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">([<span class="number">12</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1111</span>], <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">([<span class="number">12</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1111</span>], <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y=x[<span class="number">0</span>]　　＃指向同一个列表</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">[<span class="number">12</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1111</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y+=[<span class="number">1</span>]　　＃原地操作，会相互影响</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">[<span class="number">12</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1111</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">([<span class="number">12</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1111</span>, <span class="number">1</span>], <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y=y+[<span class="number">000</span>]＃不会相互影响</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">[<span class="number">12</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1111</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">([<span class="number">12</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1111</span>, <span class="number">1</span>], <span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>元组与整数，字符串一样，可以作为字典的键，也可以作为集合的元素。<br>可是列表永远都不能作为字典的键，也不能做集合的元素。<br><code>hash()哈希函数来判断一个对象是否可哈希</code></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">([<span class="number">12</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1111</span>, <span class="number">1</span>], <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hash(x)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: unhashable type: <span class="string">&#x27;list&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(x)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">tuple</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">hash</span>(<span class="params">(<span class="params"><span class="number">3</span>,<span class="number">4</span></span>)</span>)</span></span><br><span class="line"><span class="class">1699342716</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">hash</span>(<span class="params">(<span class="params">[<span class="number">1</span>],<span class="number">3</span></span>)</span>)</span></span><br><span class="line"><span class="class"><span class="title">Traceback</span> (<span class="params">most recent call last</span>):</span></span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: unhashable type: <span class="string">&#x27;list&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="生成器推导式"><a href="#生成器推导式" class="headerlink" title="生成器推导式"></a>生成器推导式</h3><blockquote>
<p>也叫生成器表达式 (generator expression)<br>界定符   圆括号(parentheses)  方括号(square brackets)  </p>
</blockquote>
<blockquote>
<p>生成器推导式的结果是一个生成器对象<br>你可以将生成器对象转化为列表或元组，也可以使用生成器对象的 <code>--next--()</code>方法或内置函数 next（）进行遍历。或是使用for循环来遍历</p>
<blockquote>
<p>但是，只能从前往后正向访问其中的元素，<strong>没有任何方法可以访问以访问过的元素</strong>，也没有下标访问，若要再次访问，则要重新生成  生成器对象。。<br><code>enumerate,filter,map,zip</code>等对象也有此特定</p>
</blockquote>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>g=((i+<span class="number">2</span>)**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g</span><br><span class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0x02CBB870</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(g)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">generator</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">tuple</span>(<span class="params">g</span>)  #用了一次</span></span><br><span class="line"><span class="class">(<span class="params"><span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>, <span class="number">121</span></span>)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">list</span>(<span class="params">g</span>)    #再次使用，由于遍历已结束，没有元素了</span></span><br><span class="line"><span class="class">[]</span></span><br><span class="line"><span class="class"></span></span><br><span class="line">&gt;&gt;&gt; g=((i+2)**2 for i in range(10))#重新生成</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g.--next--() <span class="comment">#生成器对象的__next__方法</span></span><br><span class="line">SyntaxError: invalid syntax</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g.__next__()</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g.__next__()</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(g) <span class="comment">#内置函数</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(g)  <span class="comment">#没访问过的元素</span></span><br><span class="line">[<span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>, <span class="number">121</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g=((i+<span class="number">2</span>)**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line"><span class="comment">#使用for循环来访问</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> item <span class="keyword">in</span> g:</span><br><span class="line">	print(item,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">4</span> <span class="number">9</span> <span class="number">16</span> <span class="number">25</span> <span class="number">36</span> <span class="number">49</span> <span class="number">64</span> <span class="number">81</span> <span class="number">100</span> <span class="number">121</span> </span><br></pre></td></tr></table></figure>

<blockquote>
<p>与列表推导式不同，当生成器推导式中包含多个 for 语句时，在创建生成器对象时只对第一个for 语句进行检查和计算，在调用<code>内置函数 next()</code>或  <code>__next__</code>时才会检查和计算其他for语句。。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x*y <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>) <span class="keyword">for</span> z <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#23&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    [x*y <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>) <span class="keyword">for</span> z <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#23&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;listcomp&gt;</span><br><span class="line">    [x*y <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>) <span class="keyword">for</span> z <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line">NameError: name <span class="string">&#x27;y&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g=(x*<span class="number">6</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>) <span class="keyword">for</span> z <span class="keyword">in</span> range(<span class="number">5</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(g)  <span class="comment">#访问时才出错</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#27&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    next(g)</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#26&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;genexpr&gt;</span><br><span class="line">    g=(x*y <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>) <span class="keyword">for</span> z <span class="keyword">in</span> range(<span class="number">5</span>))</span><br><span class="line">NameError: name <span class="string">&#x27;y&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><blockquote>
<p>无序可变序列<br>键不可重复<br>字典在内部维护的哈希表使得检索操作非常快</p>
</blockquote>
<p><code>dict()</code>   <code>x=&#123;&#125;</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=dict(name=<span class="string">&#x27;ddd&#x27;</span>,age=<span class="number">33</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;ddd&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">33</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=dict.fromkeys([<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;age&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">#字典推导式</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;i:str(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>)&#125;</span><br><span class="line">&#123;<span class="number">1</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;2&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;3&#x27;</span>, <span class="number">4</span>: <span class="string">&#x27;4&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;i:j <span class="keyword">for</span> i,j <span class="keyword">in</span> zip(x,y)&#125;</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>字典对象有个函数 get()  返回指定键对应的值，当键不存在时返回特定的值</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">#指定键，返回值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;ddd&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">33</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;ddd&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">&#x27;aa&#x27;</span>]<span class="comment"># 键不存在会出异常</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#19&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    d[<span class="string">&#x27;aa&#x27;</span>]<span class="comment"># 键不存在会出异常</span></span><br><span class="line">KeyError: <span class="string">&#x27;aa&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;ddd&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.get(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.get(<span class="string">&#x27;aaa&#x27;</span>,<span class="string">&#x27;no one&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;no one&#x27;</span></span><br></pre></td></tr></table></figure>


<p><code>dict.setdefault()</code>函数也是查询对应键的值，但是当改键不存在时会添加进字典里。</p>
<blockquote>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;ddd&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">33</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.setdefault(<span class="string">&#x27;aaa&#x27;</span>,<span class="number">222</span>)</span><br><span class="line"><span class="number">222</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;ddd&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">33</span>, <span class="string">&#x27;aaa&#x27;</span>: <span class="number">222</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.setdefault(<span class="string">&#x27;name&#x27;</span>,<span class="number">123</span>)</span><br><span class="line"><span class="string">&#x27;ddd&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;ddd&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">33</span>, <span class="string">&#x27;aaa&#x27;</span>: <span class="number">222</span>&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对字典对象进行迭代或遍历时默认是遍历字典的键，<br>如果要遍历字典元素  <code>dict.items()</code><br>值 <code>dict.values()</code>  键，<code>dict.values()</code></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;ddd&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">33</span>, <span class="string">&#x27;aaa&#x27;</span>: <span class="number">222</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.items()</span><br><span class="line">dict_items([(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;ddd&#x27;</span>), (<span class="string">&#x27;age&#x27;</span>, <span class="number">33</span>), (<span class="string">&#x27;aaa&#x27;</span>, <span class="number">222</span>)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> item <span class="keyword">in</span> d:</span><br><span class="line">	print(item,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">name age aaa </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> item <span class="keyword">in</span> d.items():</span><br><span class="line">	print(item,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;ddd&#x27;</span>) (<span class="string">&#x27;age&#x27;</span>, <span class="number">33</span>) (<span class="string">&#x27;aaa&#x27;</span>, <span class="number">222</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.keys()</span><br><span class="line">dict_keys([<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;aaa&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.values()</span><br><span class="line">dict_values([<span class="string">&#x27;ddd&#x27;</span>, <span class="number">33</span>, <span class="number">222</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>修改，添加与删除<br><code>pop()  popitem()</code>删除并弹出指定元素<br><code>dict.copy()</code>是浅复制</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;ddd&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">33</span>, <span class="string">&#x27;aaa&#x27;</span>: <span class="number">222</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">&#x27;buls&#x27;</span>]=<span class="number">2345</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;ddd&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">33</span>, <span class="string">&#x27;aaa&#x27;</span>: <span class="number">222</span>, <span class="string">&#x27;buls&#x27;</span>: <span class="number">2345</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">&#x27;buls&#x27;</span>]=<span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;ddd&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">33</span>, <span class="string">&#x27;aaa&#x27;</span>: <span class="number">222</span>, <span class="string">&#x27;buls&#x27;</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.update(&#123;<span class="string">&#x27;name&#x27;</span>:<span class="number">12</span>,<span class="string">&#x27;david&#x27;</span>:<span class="number">123</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="number">12</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">33</span>, <span class="string">&#x27;aaa&#x27;</span>: <span class="number">222</span>, <span class="string">&#x27;buls&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;david&#x27;</span>: <span class="number">123</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">#大量元素的更新</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> d[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">33</span>, <span class="string">&#x27;aaa&#x27;</span>: <span class="number">222</span>, <span class="string">&#x27;buls&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;david&#x27;</span>: <span class="number">123</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">33</span>, <span class="string">&#x27;aaa&#x27;</span>: <span class="number">222</span>, <span class="string">&#x27;buls&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;david&#x27;</span>: <span class="number">123</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.popitem()</span><br><span class="line">(<span class="string">&#x27;david&#x27;</span>, <span class="number">123</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">33</span>, <span class="string">&#x27;aaa&#x27;</span>: <span class="number">222</span>, <span class="string">&#x27;buls&#x27;</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.pop(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line"><span class="number">222</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">33</span>, <span class="string">&#x27;buls&#x27;</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.clear()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.popitem()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#71&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    d.popitem()</span><br><span class="line">KeyError: <span class="string">&#x27;popitem(): dictionary is empty&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>

<h3 id="标准库collections中的与字典有关的类"><a href="#标准库collections中的与字典有关的类" class="headerlink" title="标准库collections中的与字典有关的类"></a>标准库collections中的与字典有关的类</h3><ol>
<li>OrderedDict类<br>有序字典，排序</li>
</ol>
<ol start="2">
<li>defaultdict 类<br>频次统计</li>
</ol>
<ol start="3">
<li>Counter 类<br>频次统计</li>
</ol>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><blockquote>
<blockquote>
<p>元素间不可以重复<br>只能是可哈希的数据<br><code>set()</code></p>
</blockquote>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(a)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">set</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">set</span>(<span class="params">[<span class="number">1</span>,<span class="number">2</span>]</span>)</span></span><br><span class="line">&#123;1, 2&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">#集合推导式</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;x.strip() <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="string">&#x27;hi &#x27;</span>,<span class="string">&#x27;o &#x27;</span>,<span class="string">&#x27; on&#x27;</span>)&#125;</span><br><span class="line">&#123;<span class="string">&#x27;on&#x27;</span>, <span class="string">&#x27;hi&#x27;</span>, <span class="string">&#x27;o&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">21</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">21</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(x)</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>
<p><code>set.add()   set.update()  合并另外一个集合</code><br><code>set.pop 随机删除一个元素，为空会异常    set.remove() 删除集合中的元素，不存在异常</code><br><code>set.discard()  删除特定的元素，不存在则忽略</code><br><code>set.clear() </code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">数学意义上的 交集，并集，差集</span><br><span class="line">关系运算符在集合这表示包含关系，而不是大小</span><br><span class="line"></span><br><span class="line">并</span><br><span class="line">a|b</span><br><span class="line">a.union(b)</span><br><span class="line"></span><br><span class="line">交</span><br><span class="line">a&amp;b</span><br><span class="line">a.intersection(b)</span><br><span class="line"></span><br><span class="line">差</span><br><span class="line">a-b</span><br><span class="line">a.difference(b)</span><br><span class="line"></span><br><span class="line">对称差集</span><br><span class="line">a.symetric_difference(b)</span><br><span class="line">a^b</span><br><span class="line"></span><br><span class="line">测试是否为子集</span><br><span class="line">a.issubset(b)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="不可变集合frozenset"><a href="#不可变集合frozenset" class="headerlink" title="不可变集合frozenset"></a>不可变集合frozenset</h3><blockquote>
<p>不可修改的<br>冰冻的</p>
</blockquote>
<blockquote>
<p>但是支持交，并，差集等运算</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">21</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y=frozenset(x)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(y)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">frozenset</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">y</span>.<span class="title">add</span>(<span class="params"><span class="string">&#x27;d&#x27;</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">Traceback</span> (<span class="params">most recent call last</span>):</span></span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#93&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    y.add(<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">AttributeError: <span class="string">&#x27;frozenset&#x27;</span> object has no attribute <span class="string">&#x27;add&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y.pop()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#94&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    y.pop()</span><br><span class="line">AttributeError: <span class="string">&#x27;frozenset&#x27;</span> object has no attribute <span class="string">&#x27;pop&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y.clear()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#95&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    y.clear()</span><br><span class="line">AttributeError: <span class="string">&#x27;frozenset&#x27;</span> object has no attribute <span class="string">&#x27;clear&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">frozenset(&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">21</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="number">222</span>,<span class="number">333</span>,<span class="number">4</span>&#125; | y</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">333</span>, <span class="number">21</span>, <span class="number">222</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y.union(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1234</span>&#125;)</span><br><span class="line">frozenset(&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1234</span>, <span class="number">21</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(y)</span><br><span class="line"><span class="number">14688424</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">frozenset(&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">21</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y.union(&#123;<span class="number">12</span>,<span class="number">2222</span>,<span class="number">3422</span>&#125;)</span><br><span class="line">frozenset(&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">21</span>, <span class="number">12</span>, <span class="number">3422</span>, <span class="number">2222</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(y)</span><br><span class="line"><span class="number">14688424</span></span><br></pre></td></tr></table></figure>

<h2 id="集合应用案例"><a href="#集合应用案例" class="headerlink" title="集合应用案例"></a>集合应用案例</h2><p>1.测速度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">x1=list(range(<span class="number">10000</span>))</span><br><span class="line">x2=tuple(range(<span class="number">10000</span>))</span><br><span class="line">x3=set(range(<span class="number">10000</span>))</span><br><span class="line">x4=dict(zip(range(<span class="number">10000</span>),range(<span class="number">10000</span>)))</span><br><span class="line">r=random.randint(<span class="number">0</span>,<span class="number">9999</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> (x4,x3,x2,x1):</span><br><span class="line">    start=time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9999999</span>):</span><br><span class="line">        r <span class="keyword">in</span> t</span><br><span class="line">    <span class="keyword">print</span> (type(t),<span class="string">&#x27;time used:&#x27;</span>,time.time()-start)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; RESTART: E:&#x2F;aaaa&#x2F;program&#x2F;py&#x2F;book2.py &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&lt;class &#39;dict&#39;&gt; time used: 1.8182010650634766</span><br><span class="line">&lt;class &#39;set&#39;&gt; time used: 1.8442258834838867</span><br><span class="line">&lt;class &#39;tuple&#39;&gt; time used: 1754.5647232532501</span><br><span class="line">&lt;class &#39;list&#39;&gt; time used: 3827.9500739574432</span><br></pre></td></tr></table></figure>


<ol start="2">
<li>生成不重复元素<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用列表</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">listrandom=[random.choice(range(<span class="number">10000</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>)]</span><br><span class="line">norepeat=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> listrandom:</span><br><span class="line">	<span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> norepeat:</span><br><span class="line">		norepeat.append(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#集合</span></span><br><span class="line">new=set(listrandom)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#random库</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.sample(range(<span class="number">10000</span>),<span class="number">20</span>)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="序列解包的多种形式和用法"><a href="#序列解包的多种形式和用法" class="headerlink" title="序列解包的多种形式和用法"></a>序列解包的多种形式和用法</h2><blockquote>
<p>(Sequence Unpacking)<br>可用于列表，字典，enumerate对象，filter对象，zip对象等，<br>对字典时，默认是键进行操作</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x,y,z=<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v_tuple=(<span class="literal">False</span>,<span class="number">3.5</span>,<span class="string">&#x27;e&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x,y,z=v_tuple</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line"><span class="number">3.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z</span><br><span class="line"><span class="string">&#x27;e&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x,y,z=range(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x,y,x=range(<span class="number">12</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#20&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    x,y,x=range(<span class="number">12</span>)</span><br><span class="line">ValueError: too many values to unpack (expected <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x,y,z=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x,y,z=iter([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x,y=y,x</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x,y,z=s.items()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">(<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z</span><br><span class="line">(<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x,y,z=s</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line"><span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line"><span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z</span><br><span class="line"><span class="string">&#x27;c&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x,y,z=s.values()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a,b,c=<span class="string">&#x27;aa,bb,cc&#x27;</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#47&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    a,b,c=<span class="string">&#x27;aa,bb,cc&#x27;</span></span><br><span class="line">ValueError: too many values to unpack (expected <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a,b,c=<span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line"><span class="string">&#x27;c&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用序列解包遍历多个序列</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>keys=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>values=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> k,v <span class="keyword">in</span> zip(keys,values):</span><br><span class="line">	print((k,v),end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>) (<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>) (<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>) (<span class="string">&#x27;d&#x27;</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i,v <span class="keyword">in</span> enumerate(keys):</span><br><span class="line">	print(<span class="string">&#x27;the value on position &#123;0&#125; is &#123;1&#125;&#x27;</span>.format(i,v))</span><br><span class="line"></span><br><span class="line">the value on position <span class="number">0</span> <span class="keyword">is</span> a</span><br><span class="line">the value on position <span class="number">1</span> <span class="keyword">is</span> b</span><br><span class="line">the value on position <span class="number">2</span> <span class="keyword">is</span> c</span><br><span class="line">the value on position <span class="number">3</span> <span class="keyword">is</span> d</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">	      </span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> k,v <span class="keyword">in</span> s.items():</span><br><span class="line">	      print((k,v),end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>) (<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>) (<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>) </span><br></pre></td></tr></table></figure>

<h2 id="标准库中其它常用类型"><a href="#标准库中其它常用类型" class="headerlink" title="标准库中其它常用类型"></a>标准库中其它常用类型</h2><p><code>枚举  数组  队列  具名元组 堆 </code></p>
<h1 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h1><h2 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h2><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>&lt;<span class="number">2</span>&lt;<span class="number">3</span>   等价于  <span class="number">1</span>&lt;<span class="number">2</span> <span class="keyword">and</span> <span class="number">2</span>&lt;<span class="number">3</span></span><br><span class="line"></span><br><span class="line">python里不允许在条件表达式里使用  <span class="keyword">if</span> a=<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> a=<span class="number">3</span>:</span><br><span class="line">SyntaxError: invalid syntax</span><br><span class="line"></span><br><span class="line">python表达式是惰性求值的，</span><br><span class="line"><span class="number">1</span>&gt;<span class="number">3</span>&lt;xxxx</span><br><span class="line"><span class="number">3</span>&lt;xxxx是不会去执行的。</span><br></pre></td></tr></table></figure>

<h3 id="逻辑运算符：and-or-not"><a href="#逻辑运算符：and-or-not" class="headerlink" title="逻辑运算符：and or not"></a>逻辑运算符：<code>and or not</code></h3><h3 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h3><p>支持三目运算符<code>value if condition else value2</code><br>也有惰性求值的特点</p>
<blockquote>
<p>多分支：<br>注意是  elif</p>
</blockquote>
<h2 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h2><ol>
<li>输入若干成绩，求所有成绩的平均数。每输入一个成绩后询问是否继续输入下一个成绩，回答yes就继续输入下一个成绩，no就停止输入。。</li>
</ol>
<ol start="2">
<li>编写一个程序判断今天是今年的第几天</li>
</ol>
<ol start="3">
<li>编写代码，输出由*号组成的菱形图案，并且可以灵活控制图案的大小</li>
</ol>
<ol start="4">
<li>判断一个数是否为素数</li>
</ol>
<ol start="5">
<li>计算组合数C(n,i)  即从n个元素中任选i个，有多少种选法。</li>
</ol>
<ol start="6">
<li>模拟决赛现场最终成绩的计算过程</li>
</ol>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><blockquote>
<p>只要没有执行  <code>return </code>语句，解释器就会认为该函数以  return None 结束。。。</p>
</blockquote>
<blockquote>
<p>可嵌套定义函数</p>
</blockquote>
<blockquote>
<p>可调用对象：<br>类的构造方法<br>实现了 <code>__call__()</code>方法的类</p>
</blockquote>
<p><strong>修饰器</strong>：decorator</p>
<ul>
<li>也是一个函数</li>
<li>接收其他函数作为参数并对其进行改造之后返回新函数</li>
<li>函数嵌套定义</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before</span> (<span class="params">func</span>):</span>  <span class="comment">#定义一个修饰器</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;Before function called.&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>

<blockquote>
<p>函数掉用：<br>每次掉用函数时必须记住离开大的位置，这个叫     保存现场<br>保存现场则需要一定的栈空间<br>而掉用一个函数来说，内存会分配一个   栈帧   用来存放普通参数和函数内部局部变量的值，这个栈帧会在函数结束时释放空间</p>
</blockquote>
<h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><p>两种参数</p>
<ul>
<li>实参 arguments  调用时</li>
<li>位置参数 positional arguments  也叫形参</li>
</ul>
<p><strong>默认值参数</strong><br>在定义函数时，任何一个默认值参数右边都不能再出现没有默认值的普通位置参数。。</p>
<p><code>fname.__defaults__</code>查看函数所有默认值当前值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">range(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">a</span> (<span class="params">a,b=<span class="number">1</span></span>):</span></span><br><span class="line">	print(<span class="string">&#x27;ol&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.__defaults__</span><br><span class="line">(<span class="number">1</span>,)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>多次掉用函数并且不为默认值参数传递值时，默认值参数只在定义时进行一次解释和初始化，对与列表，字典这样可变数据类型的默认值参数，也是一样。。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">demo</span> (<span class="params">newitem,old_list=[]</span>):</span></span><br><span class="line">	old_list.append(newitem)</span><br><span class="line">	<span class="keyword">return</span> old_list</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(demo(<span class="string">&#x27;a&#x27;</span>,[<span class="number">1</span>,<span class="number">2</span>]))</span><br><span class="line">	  </span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(demo(<span class="string">&#x27;1&#x27;</span>))</span><br><span class="line">	  </span><br><span class="line">[<span class="string">&#x27;1&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(demo(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">	  </span><br><span class="line">[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;a&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(demo(<span class="string">&#x27;111&#x27;</span>))</span><br><span class="line">	  </span><br><span class="line">[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;111&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(demo(<span class="string">&#x27;q&#x27;</span>,[<span class="number">1</span>]))</span><br><span class="line">	  </span><br><span class="line">[<span class="number">1</span>, <span class="string">&#x27;q&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(demo(<span class="string">&#x27;w&#x27;</span>))</span><br><span class="line">	  </span><br><span class="line">[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;111&#x27;</span>, <span class="string">&#x27;w&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>所以当你使用默认参数为可变数据类型时，可以：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">demo</span>(<span class="params">newitem,old_list=None</span>):</span></span><br><span class="line">	  <span class="keyword">if</span> old_list <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">		  old_list=[]</span><br><span class="line">	  old_list.append(newitem)</span><br><span class="line">	  <span class="keyword">return</span> old_list</span><br></pre></td></tr></table></figure>

<blockquote>
<p>牢牢记住，函数的参数默认值只在定义时确定！！！！！</p>
</blockquote>
<p><strong>关键参数</strong>：<br>用 <code>a=b</code>这种形式，可以不按顺序！！</p>
<p><strong>可变长度参数</strong>：<br>两种形式：</p>
<ol>
<li><code>*parameter*</code>  任意多个实参，将其放到一个元组里</li>
<li><code>**parameter</code>  接受任意多个关键参数一样显示赋值形式的多个形参放入字典里</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">demo</span>(<span class="params">*p</span>):</span></span><br><span class="line">	  print(p)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>demo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">	  </span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>demo(<span class="number">12</span>,<span class="number">3</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">	  </span><br><span class="line">(<span class="number">12</span>, <span class="number">3</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">demo</span>(<span class="params">**p</span>):</span></span><br><span class="line">	  <span class="keyword">for</span> item <span class="keyword">in</span> p.items():</span><br><span class="line">		  print(item)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>demo.__defaults__</span><br><span class="line">	  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>demo(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">	  </span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#50&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    demo(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">TypeError: demo() takes <span class="number">0</span> positional arguments but <span class="number">2</span> were given</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>demo(<span class="number">1</span>=<span class="number">2</span>,<span class="number">3</span>=<span class="number">4</span>)</span><br><span class="line">	  </span><br><span class="line">SyntaxError: keyword can<span class="string">&#x27;t be an expression</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; demo(x=1,y=2)</span></span><br><span class="line"><span class="string">	  </span></span><br><span class="line"><span class="string">(&#x27;</span>x<span class="string">&#x27;, 1)</span></span><br><span class="line"><span class="string">(&#x27;</span>y<span class="string">&#x27;, 2)</span></span><br></pre></td></tr></table></figure>

<p><strong>强制函数的某些参数必须以关键参数形式进行传值</strong></p>
<blockquote>
<p>位于·<code>*pramater</code>或 <code>*</code> 之后的所有参数都只能以关键参数的形式进行传值。。。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">demo</span>(<span class="params">a,b,*,c</span>):</span></span><br><span class="line">	  print(a+b+c)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>demo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">	  </span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#57&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    demo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">TypeError: demo() takes <span class="number">2</span> positional arguments but <span class="number">3</span> were given</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>demo(<span class="number">1</span>,<span class="number">2</span>,c=<span class="number">3</span>)</span><br><span class="line">	  </span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>所以，如果你想所有参数都以关键参数进行传值：<br><code>def demo(*,a,b,c)</code></p>
</blockquote>
<hr>
<p><strong>强制所有参数都以位置参数进行传值</strong>：</p>
<blockquote>
<p>例如使用 help(sum) 时，的<code>/</code><br>但我们也就只能使用修饰器来解决这个问题</p>
</blockquote>
<hr>
<p><strong>传递参数时的序列解包</strong>：</p>
<blockquote>
<p>与可变长度参数相反<br>对序列解包用于实参<br>同样有 <code>*parameter  与 **parameter</code><br>如果是字典，可以用一个<code>*</code>号，也可以用<code>**</code>号</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">demo</span>(<span class="params">a,b,c</span>):</span></span><br><span class="line">	  print(a+b+c)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">	  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>demo(*lst)</span><br><span class="line">	  </span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">	  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>demo(*tup)</span><br><span class="line">	  </span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#68&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    demo(*tup)</span><br><span class="line">TypeError: demo() takes <span class="number">3</span> positional arguments but <span class="number">4</span> were given</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">	  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>demo(*tup)</span><br><span class="line">	  </span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic=&#123;<span class="number">1</span>:<span class="string">&#x27;a&#x27;</span>,<span class="number">2</span>:<span class="string">&#x27;b&#x27;</span>,<span class="number">3</span>:<span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line">	  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>demo(*dic)</span><br><span class="line">	  </span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">	  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>demo(*s)</span><br><span class="line">	  </span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>demo(s)</span><br><span class="line">	  </span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#75&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    demo(s)</span><br><span class="line">TypeError: demo() missing <span class="number">2</span> required positional arguments: <span class="string">&#x27;b&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;c&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>


<p>字典：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a,b,c=<span class="number">5</span></span>):</span></span><br><span class="line">	  print(a,b,c)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic=&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line">	  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(**dic)</span><br><span class="line">	  </span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">demo</span>(<span class="params">**p</span>):</span></span><br><span class="line">	  <span class="keyword">for</span> item <span class="keyword">in</span> p.items():</span><br><span class="line">		  print(item)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic</span><br><span class="line">	  </span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>demo(**dic)</span><br><span class="line">	  </span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">(<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">(<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>各种参数在定义时的顺序</strong>：</p>
<blockquote>
<p>一般是：</p>
</blockquote>
<ul>
<li>位置参数</li>
<li>默认值参数</li>
<li>一个星号的参数</li>
<li>两个星号的参数</li>
</ul>
<p>在调用函数时，若使用序列解包，则一个<code>*</code>号的参数会优先于关键参数与<code>**</code>两个星号的参数前面去执行！！！但不会抢位置参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">demo</span>(<span class="params">a,b,c</span>):</span></span><br><span class="line">	  print(a,b,c)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>demo(*(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">	  </span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>demo(<span class="number">1</span>,*(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">	  </span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>demo(a=<span class="number">1</span>,*(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#106&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    demo(a=<span class="number">1</span>,*(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line">TypeError: demo() got multiple values <span class="keyword">for</span> argument <span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>demo(b=<span class="number">1</span>,*(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#107&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    demo(b=<span class="number">1</span>,*(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">TypeError: demo() got multiple values <span class="keyword">for</span> argument <span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>demo(c=<span class="number">1</span>,*(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><strong>标注函数参数与返回值类型</strong>：<br>使用断言，if…else…等</p>
<h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><blockquote>
<p>函数内变量<br>函数外变量</p>
</blockquote>
<blockquote>
<p>在函数内使用global来声明或是定义全局变量</p>
</blockquote>
<ul>
<li>当已有这样一个全局变量时</li>
<li>将一个局部变量变为全局变量</li>
</ul>
<blockquote>
<p>在函数内想要使用一个外部的全局变量，必须先声明 <code>global a</code> 否则会报错，但是复杂数据类型不用声明。。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a,b</span>):</span></span><br><span class="line">	print(dic)</span><br><span class="line">	print(b)</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line">c</span><br></pre></td></tr></table></figure>


<p>内置函数<code>locals()   globals()</code>会分别返回当前作用域内所有局部变量和全局变量的名字和值，以字典的方式：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>demo()</span><br><span class="line">locals &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;b&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;</span><br><span class="line">globals &#123;&#x27;__name__&#x27;: &#x27;__main__&#x27;, &#x27;__doc__&#x27;: None, &#x27;__package__&#x27;: None, &#x27;__loader__&#x27;: &lt;class &#x27;_frozen_importlib.BuiltinImporter&#x27;&gt;, &#x27;__spec__&#x27;: None, &#x27;__annotations__&#x27;: &#123;&#125;, &#x27;__builtins__&#x27;: &lt;module &#x27;builtins&#x27; (built-in)&gt;, &#x27;a&#x27;: (1, 2, 3, 4, 5), &#x27;demo&#x27;: &lt;function demo at 0x037458A0&gt;, &#x27;lst&#x27;: [1, 2, 3], &#x27;tup&#x27;: (1, 2, 3), &#x27;dic&#x27;: &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;, &#x27;s&#x27;: &#123;1, 2, 3&#125;, &#x27;f&#x27;: &lt;function f at 0x0141E2B8&gt;, &#x27;b&#x27;: &#x27;aa,bb,cc&#x27;&#125;</span><br></pre></td></tr></table></figure>
<p>“谁敢惹我？”“我敢惹你！”“那他妈谁敢惹咱俩？</p>
<h2 id="生成器函数的设计"><a href="#生成器函数的设计" class="headerlink" title="生成器函数的设计"></a>生成器函数的设计</h2><p>关于yield关键字：<br><a href="https://www.jianshu.com/p/d09778f4e055">https://www.jianshu.com/p/d09778f4e055</a><br><a href="http://pyzh.readthedocs.io/en/latest/the-python-yield-keyword-explained.html">http://pyzh.readthedocs.io/en/latest/the-python-yield-keyword-explained.html</a></p>
<blockquote>
<p>包含yield语句的函数可以用来创建生成器对象，这样的函数也叫生成器函数。  yield语句与return 语句的作用相似，都是用来从函数中返回值。<br>不同点：<br>每次执行到yield语句并返回一个值之后会暂停或挂起后面代码的执行，下次通过生成器对象的 <code>__next__()</code>方法，内置函数的<code>next()</code>，for循环遍历生成器对象元素或其他方式显示“索要”数据式恢复执行。。。<br>生成器具有惰性求值的特点</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span>   <span class="comment">#做一个斐波那契数列数列</span></span><br><span class="line">	a,b=<span class="number">1</span>,<span class="number">1</span></span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:		</span><br><span class="line">		<span class="keyword">yield</span> a		<span class="comment">#暂停执行，需要时再产生一个新元素</span></span><br><span class="line">		a,b=b,a+b</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=f()  <span class="comment">#创建生成器对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">	print(a.__next__(),end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">13</span> <span class="number">21</span> <span class="number">34</span> <span class="number">55</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> f():</span><br><span class="line">	<span class="keyword">if</span> i&gt;<span class="number">100</span>:</span><br><span class="line">		print(i,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="number">144</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=f()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(a)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.__next__()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.__next__()</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">	<span class="keyword">yield</span> <span class="keyword">from</span> <span class="string">&#x27;abcdefg&#x27;</span>  <span class="comment">#用yield表达式生成  生成器</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=f()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(x)</span><br><span class="line"><span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(x)</span><br><span class="line"><span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> item <span class="keyword">in</span> x:  <span class="comment">#输出x中剩余元素</span></span><br><span class="line">	print(item,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">c d e f g </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">gen</span>():</span></span><br><span class="line">	<span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">	<span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">	<span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x,y,z=gen()   <span class="comment">#生成器对象支持序列解包</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z</span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#生成器对象还支持使用send()方法传入新值。。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">gen</span>(<span class="params">start,end</span>):</span></span><br><span class="line">	i=start</span><br><span class="line">	<span class="keyword">while</span> i&lt;end:</span><br><span class="line">		v=(<span class="keyword">yield</span> i)</span><br><span class="line">		<span class="keyword">if</span> v:</span><br><span class="line">			i=v</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g=gen(<span class="number">1</span>,<span class="number">101</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(g)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(g)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(g)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(g)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g.send(<span class="number">11</span>)</span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(g)</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure>

<h2 id="偏函数与函数柯里化"><a href="#偏函数与函数柯里化" class="headerlink" title="偏函数与函数柯里化"></a>偏函数与函数柯里化</h2><p>partial function    function currying</p>
<h2 id="单分发器与范型函数"><a href="#单分发器与范型函数" class="headerlink" title="单分发器与范型函数"></a>单分发器与范型函数</h2><h2 id="协程函数"><a href="#协程函数" class="headerlink" title="协程函数"></a>协程函数</h2><h2 id="注册程序退出时必须执行的函数"><a href="#注册程序退出时必须执行的函数" class="headerlink" title="注册程序退出时必须执行的函数"></a>注册程序退出时必须执行的函数</h2><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>Object Oriented Programming</p>
<blockquote>
<p>实例对象：instance<br>类：class<br>属性：attribute<br>成员方法：method</p>
</blockquote>
<blockquote>
<p>python中对  对象的概念很广泛，一切内容都可以称为对象<br>函数是对象，类也是对象</p>
</blockquote>
<h2 id="类的定义与使用"><a href="#类的定义与使用" class="headerlink" title="类的定义与使用"></a>类的定义与使用</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>(<span class="params">object</span>):</span>  <span class="comment">#派生自object类</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">infor</span>(<span class="params">self</span>):</span>  <span class="comment">#定义成员方法</span></span><br><span class="line">		print(<span class="string">&quot;this is a car&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#实例化对象：</span></span><br><span class="line">car=Car()</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用：</span></span><br><span class="line">car.infor()</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试某个对象是否为某个类的实例</span></span><br><span class="line">ininstance(car,Car)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>python 中有个关键字<code>pass</code>表示空语句，占位！！什么也不做</p>
</li>
<li><p>查看帮助文档<br>属性 <code>__doc__</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">aaa</span>:</span></span><br><span class="line">	<span class="string">&#x27;&#x27;&#x27;ok,this help&#x27;&#x27;&#x27;</span></span><br><span class="line">	<span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aaa.__doc__</span><br><span class="line"><span class="string">&#x27;ok,this help&#x27;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="type-类"><a href="#type-类" class="headerlink" title="type 类"></a>type 类</h3><blockquote>
<p>python里的type是一个特殊的类<br>是所有类型（包括object类）的基类</p>
</blockquote>
<blockquote>
<p>自定义类型的基类是type</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">aaa</span>:</span></span><br><span class="line">	<span class="string">&#x27;&#x27;&#x27;ok,this help&#x27;&#x27;&#x27;</span></span><br><span class="line">	<span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=aaa</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(b)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">type</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">b</span>.<span class="title">__class__</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">type</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>



<p>python里每个对象都有<code>__class__</code>这个成员来查看其所属类<br>与type(xx)相对应<br><code>__bases__</code>这个属性返回所有包含该类的所有基类元组<br><code>__subclassed__()</code>这个方法则返回该类的所有子类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; b.__bases__</span><br><span class="line">(&lt;class &#39;object&#39;&gt;,)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; [].__bases__</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;pyshell#79&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">    [].__bases__</span><br><span class="line">AttributeError: &#39;list&#39; object has no attribute &#39;__bases__&#39;</span><br><span class="line">&gt;&gt;&gt; [].__class__</span><br><span class="line">&lt;class &#39;list&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; [].__class__.__bases__</span><br><span class="line">(&lt;class &#39;object&#39;&gt;,)</span><br></pre></td></tr></table></figure>

<h3 id="定义带修饰器的类"><a href="#定义带修饰器的类" class="headerlink" title="定义带修饰器的类"></a>定义带修饰器的类</h3><p><a href="https://www.zhihu.com/question/26930016">https://www.zhihu.com/question/26930016</a><br><a href="https://foofish.net/python-decorator.html">https://foofish.net/python-decorator.html</a></p>
<p>这个叼:  <a href="https://eastlakeside.gitbooks.io/interpy-zh/content/decorators/">https://eastlakeside.gitbooks.io/interpy-zh/content/decorators/</a></p>
<h2 id="类成员"><a href="#类成员" class="headerlink" title="类成员"></a>类成员</h2><p><code>.</code>运算符，成员访问</p>
<h3 id="私有成员与公育成员"><a href="#私有成员与公育成员" class="headerlink" title="私有成员与公育成员"></a>私有成员与公育成员</h3><p>私有成员：只能程序内部访问或通过公有成员方法来访问。</p>
<blockquote>
<p>以两个或多个下划线开头  但是  不以两个或多个下划线结束则表示私有成员。。。<br>python没有对私有成员提供严格的访问保护机制， <code>对象名._类名__xxx</code>也可以在外部访问私有成员，但这会破坏封装性。。。</p>
<blockquote>
<p>这是因为在python里，‘以两个或多个下划线开头  但是  不以两个或多个下划线结束’ 的成员绑定到对象时，都会绑定为  <code>对象名._类名__xxx</code>类似的形式，除非类名只包含下划线。。。</p>
</blockquote>
</blockquote>
<p><strong>python里，以下划线开头或结束的成员名有特殊含义</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_xxx:  保护成员，只有本类对象，和子类对象可以访问</span><br><span class="line"></span><br><span class="line">__xxx__   系统定义的特殊成员</span><br><span class="line"></span><br><span class="line">__xxx    私有成员</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,value1=<span class="number">0</span>,value2=<span class="number">0</span></span>):</span></span><br><span class="line">		self._value1=value1</span><br><span class="line">		self.__value2=value2</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">setValue</span>(<span class="params">self,value1,value2</span>):</span></span><br><span class="line">		self._value1=value1</span><br><span class="line">		self.__value2=value2</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">self</span>):</span></span><br><span class="line">		print(self._value1)</span><br><span class="line">		print(self.__value2)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=A()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a._value1</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.__value2</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#101&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    a.__value2</span><br><span class="line">AttributeError: <span class="string">&#x27;A&#x27;</span> object has no attribute <span class="string">&#x27;__value2&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a._A__value2   <span class="comment">#转换形式访问</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Demo</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,v</span>):</span></span><br><span class="line">		self.____value=v</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=Demo(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d._Demo____value</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>class__:</span><br><span class="line">	</span><br><span class="line">SyntaxError: invalid syntax</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">__</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,v</span>):</span></span><br><span class="line">		self.____value=v</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dd=__(<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dd._____value  <span class="comment">#这个时候就不用转换形式访问了</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#121&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    dd._____value</span><br><span class="line">AttributeError: <span class="string">&#x27;__&#x27;</span> object has no attribute <span class="string">&#x27;_____value&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dd.____value</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>


<h3 id="数据成员"><a href="#数据成员" class="headerlink" title="数据成员"></a>数据成员</h3><p>属于对象的数据成员<br>一般在构造方法中定义<code>__init__()</code><br>也可以在成员方法中定义</p>
<blockquote>
<p>在定义和在实例方法中访问数据成员时  以self作为前缀</p>
</blockquote>
<p>属于类的数据成员</p>
<blockquote>
<p>该类对象所共有的<br>不在方法中定义</p>
</blockquote>
<p>通过类名或对象名访问。。。。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Demo</span>(<span class="params">object</span>):</span></span><br><span class="line">	total=<span class="number">0</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cc,*args,**kwargs</span>):</span>  <span class="comment">#此方法在__init__()被调用之前调用</span></span><br><span class="line">		<span class="keyword">if</span> cc.total&gt;<span class="number">3</span>:</span><br><span class="line">			<span class="keyword">raise</span> Exception(<span class="string">&#x27;最多只能创建三个对象&#x27;</span>)</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="keyword">return</span> object.__new__(cc)</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">		Demo.total=Demo.total+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t1=Demo()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t1</span><br><span class="line">&lt;__main__.Demo object at <span class="number">0x01464750</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t2=Demo()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t3=Demo()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t4=Demo()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t4</span><br><span class="line">&lt;__main__.Demo object at <span class="number">0x01464F50</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t5=Demo()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#143&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    t5=Demo()</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#136&gt;&quot;</span>, line <span class="number">5</span>, <span class="keyword">in</span> __new__</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;最多只能创建三个对象&#x27;</span>)</span><br><span class="line">Exception: 最多只能创建三个对象</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>


<h3 id="成员方法，类方法，静态方法，抽象方法"><a href="#成员方法，类方法，静态方法，抽象方法" class="headerlink" title="成员方法，类方法，静态方法，抽象方法"></a>成员方法，类方法，静态方法，抽象方法</h3><blockquote>
<p>先搞清楚，方法与函数是有本质区别的<br>函数可以接受一个对象放到（）里<br>而普通方法说某个实例的绑定</p>
</blockquote>
<ol>
<li>私有方法，以两个或多个下划线开始：一般在内部通过self调用</li>
<li>抽象方法：定义在抽象类中，且其子类必须重新实现此方法</li>
<li>若某个方法的两侧各有两个下划线，则其一般与某个运算符或内置函数有关</li>
</ol>
<p>所有实例方法（包括公有，私有，抽象，和某些特殊方法）都必须至少含有一个名为 self的参数，且必须是第一个参数</p>
<ol start="4">
<li>静态方法</li>
</ol>
<p><strong>静态方法和类方法都可以通过类名和对象名调用。</strong><br>但不能访问属于对象的成员<br>只能访问属于类的成员</p>
<p>静态方法和类方法不属于任何实例，也不会绑定到任何实例</p>
<p>类方法一般以cls作为第一个参数表示该类自身，在调用类方法时不需要为该参数传递值，<br>静态方法可以不接受任何参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@classmethod  # 修饰器，声明类方法</span><br><span class="line">def classShowTotal(cls): #第一个参数一般为cls</span><br><span class="line">	print(cls.__total)</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">@ staticmethod  #修饰器，声明静态方法</span><br><span class="line">def staticShowTotal():  可以没有参数</span><br><span class="line">	print(Root.__total)</span><br></pre></td></tr></table></figure>

<h3 id="类与对象的动态性，混入机制mixin"><a href="#类与对象的动态性，混入机制mixin" class="headerlink" title="类与对象的动态性，混入机制mixin"></a>类与对象的动态性，混入机制mixin</h3><p>动态的为自定义的类和对象添加成员方法，及数据成员</p>
<h3 id="继承，多态，依赖注入"><a href="#继承，多态，依赖注入" class="headerlink" title="继承，多态，依赖注入"></a>继承，多态，依赖注入</h3><ol>
<li>继承：<blockquote>
<p>子类可以继承父类的公有成员，不能继承私有成员<br>子类中调用父类的方法：<code>super()</code>或<code>父类名.方法名()</code><br>父类必须继承自 object类，否则无法使用 super()</p>
</blockquote>
</li>
</ol>
<ol start="2">
<li><p>多态：<br>polymorphism 指基类的同一个方法在不同派生类对象中具有不同的表现和行为。。</p>
</li>
<li><p>依赖注入技术的不同实现方法<br>Dependency Injection  又称为反转控制 Inversion of Control<br>用来实现不同模块或类之间的解耦，可以根据需要动态地把某种依赖关系注入到对象，使得模块的设计更加独立。。</p>
<blockquote>
<p>依赖注入也是多态的一种实现方式</p>
</blockquote>
</li>
</ol>
<ul>
<li>接口注入<blockquote>
<p>首先定义一个接口类，然后在继承了该接口类中实现特定的接口方法，而在接口方法中根据传入参数的不同做出不同行为</p>
</blockquote>
</li>
</ul>
<ul>
<li>set注入</li>
<li>构造注入</li>
<li>反射</li>
</ul>
<h2 id="特殊方法"><a href="#特殊方法" class="headerlink" title="特殊方法"></a>特殊方法</h2><p>python里有许多的特殊方法，常见的是构造方法和析构方法。</p>
<p>详细：<a href="https://docs.python.org/3/reference/datamodel.html#special-method-names">https://docs.python.org/3/reference/datamodel.html#special-method-names</a></p>
<p><a href="http://pycoders-weekly-chinese.readthedocs.io/en/latest/issue6/a-guide-to-pythons-magic-methods.html">http://pycoders-weekly-chinese.readthedocs.io/en/latest/issue6/a-guide-to-pythons-magic-methods.html</a></p>
<p><a href="http://www.ttlsa.com/docs/dive-into-python3/special-method-names.html">http://www.ttlsa.com/docs/dive-into-python3/special-method-names.html</a></p>
<p><a href="http://wiki.jikexueyuan.com/project/start-learning-python/213.html">http://wiki.jikexueyuan.com/project/start-learning-python/213.html</a></p>
<p><a href="http://blog.51cto.com/5ydycm/157548">http://blog.51cto.com/5ydycm/157548</a></p>
<p><a href="https://blog.csdn.net/liudongdong19/article/details/79579770">https://blog.csdn.net/liudongdong19/article/details/79579770</a></p>
<p><a href="https://www.jianshu.com/p/638f8f694b00">https://www.jianshu.com/p/638f8f694b00</a></p>
<p><a href="https://blog.ansheng.me/article/python-full-stack-way-object-special-members.html">https://blog.ansheng.me/article/python-full-stack-way-object-special-members.html</a></p>
<p><a href="https://docs.lvrui.io/2016/07/03/Python%E7%B1%BB%E4%B8%AD%E7%9A%84%E7%89%B9%E6%AE%8A%E6%88%90%E5%91%98/">https://docs.lvrui.io/2016/07/03/Python%E7%B1%BB%E4%B8%AD%E7%9A%84%E7%89%B9%E6%AE%8A%E6%88%90%E5%91%98/</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__init__()  为数据成员设置初始值或进行其他必要的初始化工作，在实例化对象时自动被调用和执行。  如果没有设计这个方法，python会默认提供一个构造方法来进行必要的初始化工作。。</span><br><span class="line"></span><br><span class="line">__del__():析构方法，释放对象占用的资源，在python删除对象和回收对象时自动被调用和执行，，，同样如果没有设计这个方法，默认python会提供一个。。。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><blockquote>
<p>python里字符串属于不可变有序序列<br>所以不可以直接对字符串进行元素增加，修改，删除等操作</p>
</blockquote>
<blockquote>
<p>python支持短字符串驻留机制，对于短字符串，将其值赋给多个不同对象时，内存中只有一个副本，多个对象共享这个副本。。<br>而对长字符串不需要驻留。。不会共享。。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=<span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c=<span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">14568480</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(b)</span><br><span class="line"><span class="number">14568480</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(c)</span><br><span class="line"><span class="number">14568480</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=<span class="string">&#x27;ddd&#x27;</span>*<span class="number">123</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cd=<span class="string">&#x27;ddd&#x27;</span>*<span class="number">123</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(d)</span><br><span class="line"><span class="number">39992880</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(cd)</span><br><span class="line"><span class="number">39992880</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ww=<span class="string">&#x27;12345&#x27;</span>*<span class="number">1234</span>  <span class="comment">#足够长了</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wc=<span class="string">&#x27;12345&#x27;</span>*<span class="number">1234</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(ww)</span><br><span class="line"><span class="number">38456264</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(wc)  <span class="comment">#两个id不一样了</span></span><br><span class="line"><span class="number">38156464</span></span><br></pre></td></tr></table></figure>

<p><code>encode()   decode()    str()   bytes()</code><br>bytes:字节串类型对象<br>str:字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="string">&#x27;哈哈&#x27;</span>)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; &#x27;哈哈&#x27;.<span class="title">encode</span>(<span class="params"><span class="string">&#x27;gbk&#x27;</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">b</span>&#x27;\<span class="title">xb9</span>\<span class="title">xfe</span>\<span class="title">xb9</span>\<span class="title">xfe</span>&#x27;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">_</span>.<span class="title">decode</span>()</span></span><br><span class="line"><span class="class"><span class="title">Traceback</span> (<span class="params">most recent call last</span>):</span></span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#21&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    _.decode()</span><br><span class="line">UnicodeDecodeError: <span class="string">&#x27;utf-8&#x27;</span> codec can<span class="string">&#x27;t decode byte 0xb9 in position 0: invalid start byte</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; _.decode(&#x27;</span>gbk<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">&#x27;</span>哈哈<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; type(_.encode())</span></span><br><span class="line"><span class="string">&lt;class &#x27;</span>bytes<span class="string">&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="字符串编码格式"><a href="#字符串编码格式" class="headerlink" title="字符串编码格式"></a>字符串编码格式</h2><p>ASCII 美国标准信息交换码<br>python3默认 UTF-8<br>一个汉字算是一个字符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.getdefaultencoding() <span class="comment">#查看默认编码</span></span><br><span class="line"><span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">&#x27;中国台湾&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(s)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">&#x27;aaaa&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(s)</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>



<h2 id="转义字符串与原始字符串"><a href="#转义字符串与原始字符串" class="headerlink" title="转义字符串与原始字符串"></a>转义字符串与原始字符串</h2><p><code>r 或 R</code>表示原始字符串</p>
<h2 id="字符串的格式化"><a href="#字符串的格式化" class="headerlink" title="字符串的格式化"></a>字符串的格式化</h2><ol>
<li>格式运算符：<code>%</code><br><a href="http://gohom.win/2015/09/13/PyStringFormat/">http://gohom.win/2015/09/13/PyStringFormat/</a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">格式符为真实值预留位置，并控制显示的格式。格式符可以包含有一个类型码，用以控制显示的类型，如下:</span><br><span class="line"></span><br><span class="line">%s 字符串 (采用str()的显示)</span><br><span class="line">%r 字符串 (采用repr()的显示)</span><br><span class="line">%c 单个字符</span><br><span class="line">%b 二进制整数</span><br><span class="line">%d 十进制整数</span><br><span class="line">%i 十进制整数</span><br><span class="line">%o 八进制整数</span><br><span class="line">%x 十六进制整数</span><br><span class="line">%e 指数 (基底写为e)</span><br><span class="line">%E 指数 (基底写为E)</span><br><span class="line">%f 浮点数</span><br><span class="line">%F 浮点数，与上相同</span><br><span class="line">%g 指数(e)或浮点数 (根据显示长度)</span><br><span class="line">%G 指数(E)或浮点数 (根据显示长度)</span><br><span class="line">要是想输出%则要使用%%进行转义操作.</span><br><span class="line"></span><br><span class="line">更复杂的控制</span><br><span class="line">%[(name)][flags][width].[precision]typecode</span><br><span class="line"></span><br><span class="line">(name): 命名,用于字典控制赋值</span><br><span class="line">flags: 可以有+,-,’ ‘或0。+表示右对齐。-表示左对齐。’ ‘为一个空格，表示在正数的左侧填充一个空格，从而与负数对齐。0表示使用0填充。</span><br><span class="line">width: 显示宽度,总长度,会补齐空格.</span><br><span class="line">precision: 表示小数点后精度.</span><br><span class="line">比如：</span><br><span class="line"></span><br><span class="line">print &quot;%+10x&quot; % 10   # &quot;        +a&quot;</span><br><span class="line">print &quot;%04d&quot; % 10    # &quot;0010&quot;</span><br><span class="line">print &quot;%6.3f&quot; % 2.3  # &quot; 2.300&quot;</span><br><span class="line">上面的width, precision为两个整数。我们可以利用*，来动态代入这两个量。比如：</span><br><span class="line"></span><br><span class="line"># python 3.0</span><br><span class="line">print(&quot;%.*f&quot; % (4, 1.2))  # &quot;1.2000&quot;</span><br><span class="line">Python实际上用4来替换*。所以实际的模板为”%.4f”。</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=<span class="number">1235</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>so=<span class="string">&quot;%o&quot;</span> %x</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>so</span><br><span class="line"><span class="string">&#x27;2323&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sh=<span class="string">&#x27;%x&#x27;</span> %x</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sh</span><br><span class="line"><span class="string">&#x27;4d3&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>se=<span class="string">&#x27;%e&#x27;</span> %x</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>se</span><br><span class="line"><span class="string">&#x27;1.235000e+03&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;%s&#x27;</span> %<span class="number">53</span></span><br><span class="line"><span class="string">&#x27;53&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;%d,%c&#x27;</span> %(<span class="number">65</span>,<span class="number">65</span>)</span><br><span class="line"><span class="string">&#x27;65,A&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;%d&#x27;</span> %<span class="string">&#x27;1111&#x27;</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#43&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="string">&#x27;%d&#x27;</span> %<span class="string">&#x27;1111&#x27;</span></span><br><span class="line">TypeError: %d format: a number <span class="keyword">is</span> required, <span class="keyword">not</span> str</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;%s&#x27;</span> %[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="string">&#x27;[1, 2, 3]&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="2">
<li>format()方法<br><a href="http://www.michealpan.xyz/2018/05/04/2018-5-4-python_basic/#%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96-format">http://www.michealpan.xyz/2018/05/04/2018-5-4-python_basic/#%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96-format</a><br>推荐 format（）</li>
</ol>
<h2 id="字符串常用操作"><a href="#字符串常用操作" class="headerlink" title="字符串常用操作"></a>字符串常用操作</h2><ol>
<li><code>find() rfind() index() rindex() count()</code><br>find 首次出现<br>rfind 最后一次出现<br>不存在返回-1</li>
</ol>
<p>index()<br>rindex()<br>不存在返回抛出异常</p>
<p>count<br>不存在则返回0<br><strong>p217</strong></p>
<ol start="2">
<li><code>split()  rsplit() partition() rpartition()</code><blockquote>
<p>明确使用分隔符分隔与默认参数的区别</p>
</blockquote>
</li>
</ol>
<p>split()  从左往右<br>rsplit() 从右往左<br>返回列表，默认是空格作为分隔符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; &#39;a,,,bb,,ccc&#39;.split(&#39;,&#39;)</span><br><span class="line">			</span><br><span class="line">[&#39;a&#39;, &#39;&#39;, &#39;&#39;, &#39;bb&#39;, &#39;&#39;, &#39;ccc&#39;]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; &#39;a\t\t\tbb\t\tccc&#39;.split(&#39;\t&#39;)</span><br><span class="line">			</span><br><span class="line">[&#39;a&#39;, &#39;&#39;, &#39;&#39;, &#39;bb&#39;, &#39;&#39;, &#39;ccc&#39;]</span><br><span class="line">&gt;&gt;&gt; &#39;a\t\t\tbb\t\tccc&#39;.split()</span><br><span class="line">			</span><br><span class="line">[&#39;a&#39;, &#39;bb&#39;, &#39;ccc&#39;]</span><br><span class="line">&gt;&gt;&gt; </span><br></pre></td></tr></table></figure>

<p>partition()  与rpartition() 方法</p>
<blockquote>
<p>指定字符串为分隔符将源字符串分隔为三部分，即分隔符之前的字符串，分隔符字符串，分隔符之后的字符串<br>如果指定的字符串不在原字符串中，则返回原字符串和两个空字符串<br>如果遇到多个分隔符在字符串里，选第一个</p>
</blockquote>
<ol start="3">
<li><code>join()</code><blockquote>
<p>将列表中多个字符串进行连接，并在相邻两个字符串之间插入指定字符串，返回新字符串</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>li=[<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;peach&#x27;</span>,<span class="string">&#x27;banana&#x27;</span>,<span class="string">&#x27;pear&#x27;</span>]</span><br><span class="line">			</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sep=<span class="string">&#x27;,&#x27;</span></span><br><span class="line">			</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sep.join(li)</span><br><span class="line">			</span><br><span class="line"><span class="string">&#x27;apple,peach,banana,pear&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#x27;</span>.join(li)</span><br><span class="line">			</span><br><span class="line"><span class="string">&#x27;applepeachbananapear&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>所以使用split()  or   jion()  可以删除字符串中多余的空白字符，保留一个。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>X=<span class="string">&#x27;A    b   c&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27; &#x27;</span>.join(X.split())</span><br><span class="line"><span class="string">&#x27;A b c&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X.split()</span><br><span class="line">			</span><br><span class="line">[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br></pre></td></tr></table></figure>


<ol start="4">
<li><p><code>lower()  upper()  capitalize()  title()  swapcase()  </code><br>title:每个单词首字母大写<br>capitalize:字符串首字母大写<br>swapcase:大小写互换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">&#x27;what is your name&#x27;</span></span><br><span class="line">			</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.lower()</span><br><span class="line">			</span><br><span class="line"><span class="string">&#x27;what is your name&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.upper()</span><br><span class="line">			</span><br><span class="line"><span class="string">&#x27;WHAT IS YOUR NAME&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.capitalize()</span><br><span class="line">			</span><br><span class="line"><span class="string">&#x27;What is your name&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>replace() maketrans() translate()</code><br>replace(原，新)  只要出现都替换</p>
</li>
</ol>
<p>maketrans:生成字符映射表 一一对应<br>translate():根据映射表的内容一一替换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>table=<span class="string">&#x27;&#x27;</span>.maketrans(<span class="string">&#x27;abcd&#x27;</span>,<span class="string">&#x27;uuuu&#x27;</span>)</span><br><span class="line">			</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>table</span><br><span class="line">			</span><br><span class="line">&#123;<span class="number">97</span>: <span class="number">117</span>, <span class="number">98</span>: <span class="number">117</span>, <span class="number">99</span>: <span class="number">117</span>, <span class="number">100</span>: <span class="number">117</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">&#x27;alvyouocdefadcde&#x27;</span></span><br><span class="line">			</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.translate(table)</span><br><span class="line">			</span><br><span class="line"><span class="string">&#x27;ulvyououuefuuuue&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li><code>strip()  rstrip()  lstrip()</code><blockquote>
<p>删除  两端  ，右端  左端    连续的空白 或指定字符</p>
</blockquote>
</li>
</ol>
<p><strong>注意</strong>：指定字符串时，<br>strip(‘ab’)  是说遇到a,或者b就删掉，不是 ab才删</p>
<ol start="7">
<li><code>startwith()  endwith()</code><br>判断字符串是否以指定字符串开始或结束</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">&#x27;Beautiful is better than ugly&#x27;</span></span><br><span class="line">			</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.startwith(<span class="string">&#x27;Be&#x27;</span>)</span><br><span class="line">			</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#79&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    s.startwith(<span class="string">&#x27;Be&#x27;</span>)</span><br><span class="line">AttributeError: <span class="string">&#x27;str&#x27;</span> object has no attribute <span class="string">&#x27;startwith&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.startswith(<span class="string">&#x27;Be&#x27;</span>)</span><br><span class="line">			</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.startswith(<span class="string">&#x27;Be&#x27;</span>,<span class="number">5</span>)</span><br><span class="line">			</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.startswith(<span class="string">&#x27;Be&#x27;</span>,<span class="number">0</span>,<span class="number">5</span>)</span><br><span class="line">			</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>

<ul>
<li>接收一个字符串元组作为参数来表示前缀或后缀：<br>例如图片格式：<br><code>import os</code><br><code>[filename for filename in os.listdir(r&#39;D:\\&#39;) if filename.endswith((&#39;.bmp&#39;,&#39;.jpg&#39;,&#39;.gif&#39;))]</code> </li>
</ul>
<ol start="8">
<li><code>isalnum() isalpha() isdigit() isdecimal()  isnumeric() isspace() isupper()  islower()  </code><br>判断某个字符串是否为<br>数字或字母<br>字母<br>数字<br>十进制数字<br>汉字或其他语言数字<br>空白<br>大写<br>小写</li>
</ol>
<p>返回 True  或 False</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;123abc&#x27;</span>.isalnum()</span><br><span class="line">			</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;123abc&#x27;</span>.isalpha()</span><br><span class="line">			</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;123abc&#x27;</span>.isdigit()</span><br><span class="line">			</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;11.1&#x27;</span>.isdigit()</span><br><span class="line">			</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;八&#x27;</span>.isnumeric()</span><br><span class="line">			</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;八&#x27;</span>.isdigit()</span><br><span class="line">			</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>

<ol start="9">
<li><code>center() ljust() rjust() zfill()</code><blockquote>
<p>用于排版<br>返回指定宽度的新字符串<br>zfill():返回指定宽度字符串，左侧以字符0进行填充</p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;hello ok&#x27;</span>.center(<span class="number">20</span>)</span><br><span class="line">			</span><br><span class="line"><span class="string">&#x27;      hello ok      &#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;hello ok&#x27;</span>.center(<span class="number">22</span>,<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">			</span><br><span class="line"><span class="string">&#x27;=======hello ok=======&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;hello oo&#x27;</span>.ljust(<span class="number">33</span>,<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">			</span><br><span class="line"><span class="string">&#x27;hello oo,,,,,,,,,,,,,,,,,,,,,,,,,&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;aaaa&#x27;</span>.zfill(<span class="number">5</span>)</span><br><span class="line">			</span><br><span class="line"><span class="string">&#x27;0aaaa&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;abbb&#x27;</span>.zfill(<span class="number">2</span>)</span><br><span class="line">			</span><br><span class="line"><span class="string">&#x27;abbb&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="input（）与字符串"><a href="#input（）与字符串" class="headerlink" title="input（）与字符串"></a>input（）与字符串</h2><p>int() float() complex()   </p>
<p>要转换元组等复杂类型不能使用tuple()等<br>而要使用eval()</p>
<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>raw string类型（原生字符串类型）</p>
<p><strong>贪心</strong><br>贪心模式：尽可能多的匹配字符串  默认</p>
<p>非贪心：<code>?  紧随任何其他限定符之后时  如（* ,+,?,&#123;n&#125;,&#123;n,&#125;,&#123;n,m&#125;）时</code></p>
<p>几个元字符：</p>
<table>
<thead>
<tr>
<th>元字符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>\</td>
<td>转义</td>
</tr>
<tr>
<td>\num</td>
<td>num是一个正整数，表示前面字符或子模式的编号</td>
</tr>
<tr>
<td>\f</td>
<td>匹配换页符</td>
</tr>
<tr>
<td>\n</td>
<td>换行</td>
</tr>
<tr>
<td>\r</td>
<td>回车</td>
</tr>
<tr>
<td>\b</td>
<td>匹配单词头或单词尾</td>
</tr>
<tr>
<td>\B</td>
<td>与\b相反</td>
</tr>
<tr>
<td>\d</td>
<td>相当于0到9</td>
</tr>
<tr>
<td>\D</td>
<td><code>[^0-9]</code></td>
</tr>
<tr>
<td>\s</td>
<td>匹配任何空白字符，包括空格，制表，换页符<code>[\f\n\r\t\v]</code></td>
</tr>
<tr>
<td>\S</td>
<td>与\s相反</td>
</tr>
<tr>
<td>\w</td>
<td>匹配任何字母，数字以及下划线</td>
</tr>
<tr>
<td>\W</td>
<td>与上一个相反</td>
</tr>
</tbody></table>
<h2 id="re库"><a href="#re库" class="headerlink" title="re库"></a>re库</h2><p>re库采用raw string类型表示正则表达式，表示为：<br>r’text’</p>
<p><img src="/images/python/b1.gif"></p>
<p><img src="/images/python/b2.gif"></p>
<p><img src="/images/python/b3.gif"></p>
<p>re.search(pattern, string, flags=0)<br>在一个字符串中搜索匹配正则表达式的第一个位置<br>返回match对象</p>
<p>re.match(pattern, string, flags=0)<br>从一个字符串的开始位置起匹配正则表达式<br>返回match对象</p>
<p>re.findall(pattern, string, flags=0)<br>搜索字符串，以列表类型返回全部能匹配的子串</p>
<p>re.split(pattern, string, maxsplit=0, flags=0)<br>将一个字符串按照正则表达式匹配结果进行分割<br>返回列表类型</p>
<p>re.finditer(pattern, string, flags=0)<br>搜索字符串，返回一个匹配结果的迭代类型，每个迭代<br>元素是match对象</p>
<p>re.sub(pattern, repl, string, count=0, flags=0)<br>在一个字符串中替换所有匹配正则表达式的子串<br>返回替换后的字符串</p>
<p><strong>re库的另一种等价用法</strong><br><img src="/images/python/b4.gif"></p>
<p>regex = re.compile(pattern, flags=0)<br>将正则表达式的字符串形式编译成正则表达式对象</p>
<p>∙ pattern : 正则表达式的字符串或原生字符串表示<br>∙ repl : 替换匹配字符串的字符串<br>∙ string : 待匹配字符串<br>∙ count : 匹配的最大替换次数<br>∙ flags : 正则表达式使用时的控制标记</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line">			</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>text=<span class="string">&#x27;alpha.beta...gamma delta&#x27;</span></span><br><span class="line">			</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">&#x27;[\. ]+&#x27;</span>,text)</span><br><span class="line">			</span><br><span class="line">[<span class="string">&#x27;alpha&#x27;</span>, <span class="string">&#x27;beta&#x27;</span>, <span class="string">&#x27;gamma&#x27;</span>, <span class="string">&#x27;delta&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">&#x27;[\. ]+&#x27;</span>,text,maxsplit=<span class="number">2</span>)</span><br><span class="line">			</span><br><span class="line">[<span class="string">&#x27;alpha&#x27;</span>, <span class="string">&#x27;beta&#x27;</span>, <span class="string">&#x27;gamma delta&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">&#x27;[\. ]+&#x27;</span>,text,maxsplit=<span class="number">1</span>)</span><br><span class="line">			</span><br><span class="line">[<span class="string">&#x27;alpha&#x27;</span>, <span class="string">&#x27;beta...gamma delta&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line">			</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line">			</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line">			</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pat=<span class="string">&#x27;[a-zA-Z]+&#x27;</span></span><br><span class="line">			</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(pat,text)</span><br><span class="line">			</span><br><span class="line">[<span class="string">&#x27;alpha&#x27;</span>, <span class="string">&#x27;beta&#x27;</span>, <span class="string">&#x27;gamma&#x27;</span>, <span class="string">&#x27;delta&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pat=<span class="string">&#x27;&#123;name&#125;&#x27;</span></span><br><span class="line">			</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>text=<span class="string">&#x27;Dear &#123;name&#125;...&#x27;</span></span><br><span class="line">			</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.sub(pat,<span class="string">&#x27;Mr.Dong&#x27;</span>,text)</span><br><span class="line">			</span><br><span class="line"><span class="string">&#x27;Dear Mr.Dong...&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">&#x27;a s d&#x27;</span></span><br><span class="line">			</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.sub(<span class="string">&#x27;a|s|d&#x27;</span>,<span class="string">&#x27;good&#x27;</span>,s)</span><br><span class="line">			</span><br><span class="line"><span class="string">&#x27;good good good&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">&quot;it&#x27;s a very good good idea&quot;</span></span><br><span class="line">			</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.sub(<span class="string">r&#x27;(\b\w+) \1&#x27;</span>,<span class="string">r&#x27;\1&#x27;</span>,s)</span><br><span class="line">			</span><br><span class="line"><span class="string">&quot;it&#x27;s a very good idea&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.sub(<span class="string">&#x27;a&#x27;</span>,<span class="keyword">lambda</span> x:x.group(<span class="number">0</span>).upper(),<span class="string">&#x27;aaa abc abde&#x27;</span>)</span><br><span class="line">			</span><br><span class="line"><span class="string">&#x27;AAA Abc Abde&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.sub(<span class="string">&#x27;[a-zA-Z]&#x27;</span>,<span class="keyword">lambda</span> x:chr(ord(x.group(<span class="number">0</span>))^<span class="number">32</span>),<span class="string">&#x27;aaa aBc abde&#x27;</span>)</span><br><span class="line">	   </span><br><span class="line"><span class="string">&#x27;AAA AbC ABDE&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line">	   </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.sub(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;dfg&#x27;</span>,<span class="string">&#x27;aaa abc abde&#x27;</span>)</span><br><span class="line">	   </span><br><span class="line"><span class="string">&#x27;dfgdfgdfg dfgbc dfgbde&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.sub(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;dfg&#x27;</span>,<span class="string">&#x27;aaa abc abde&#x27;</span>)</span><br><span class="line">	   </span><br><span class="line"><span class="string">&#x27;dfgdfgdfg dfgbc dfgbde&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line">	   </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line">	   </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.escape(<span class="string">&#x27;http://www.python.org&#x27;</span>)</span><br><span class="line">	   </span><br><span class="line"><span class="string">&#x27;http://www\\.python\\.org&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(re.match(<span class="string">&#x27;done|quit&#x27;</span>,<span class="string">&#x27;done&#x27;</span>))</span><br><span class="line">	   </span><br><span class="line">&lt;re.Match object; span=(<span class="number">0</span>, <span class="number">4</span>), match=<span class="string">&#x27;done&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(re.match(<span class="string">&#x27;done|quit&#x27;</span>,<span class="string">&#x27;doe!&#x27;</span>))</span><br><span class="line">	   </span><br><span class="line"><span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(re.search(<span class="string">&#x27;done|quit&#x27;</span>,<span class="string">&#x27;d!one!done&#x27;</span>))</span><br><span class="line">	   </span><br><span class="line">&lt;re.Match object; span=(<span class="number">6</span>, <span class="number">10</span>), match=<span class="string">&#x27;done&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#下面的代码使用不同的方法删除字符串中多余的空格，如果遇到连续多个空格则只保留一个，同时删除字符串两侧的所有空白字符</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">&#x27;aaa     bb   c d e fff    &#x27;</span></span><br><span class="line">	   </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27; &#x27;</span>.join(s.split())</span><br><span class="line">	   </span><br><span class="line"><span class="string">&#x27;aaa bb c d e fff&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#x27;</span>.join(s.split())</span><br><span class="line">	   </span><br><span class="line"><span class="string">&#x27;aaabbcdefff&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line">	   </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27; &#x27;</span>.join(re.split(<span class="string">&#x27;[\s]+&#x27;</span>,s.strip()))</span><br><span class="line">	   </span><br><span class="line"><span class="string">&#x27;aaa bb c d e fff&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27; &#x27;</span>.join(re.split(<span class="string">&#x27;\s&#x27;</span>,s.strip()))</span><br><span class="line">	   </span><br><span class="line"><span class="string">&#x27;aaa     bb   c d e fff&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27; &#x27;</span>.join(re.split(<span class="string">&#x27;\s+&#x27;</span>,s.strip()))</span><br><span class="line">	   </span><br><span class="line"><span class="string">&#x27;aaa bb c d e fff&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.sub(<span class="string">&#x27;\s+&#x27;</span>,<span class="string">&#x27; &#x27;</span>,s.strip())</span><br><span class="line">	   </span><br><span class="line"><span class="string">&#x27;aaa bb c d e fff&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="使用正则表达式对象处理字符串"><a href="#使用正则表达式对象处理字符串" class="headerlink" title="使用正则表达式对象处理字符串"></a>使用正则表达式对象处理字符串</h2><p>也就是编译后的正则表达式</p>
<ol>
<li>match() search()     findall()<blockquote>
<p>正则表达式对象  match()方法再字符串开头或指定位置进行搜索，模式必须出现在字符串开头或指定位置<br>search（） 指定范围搜索<br>findall（）所有符合正则表达式的字符串，返回列表</p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>example=<span class="string">&#x27;ShanDong Institute of Business and Technology&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern=re.compile(<span class="string">r&#x27;\bB\w+\b&#x27;</span>)<span class="comment">#查找以b开头的单词</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern.findall(example)</span><br><span class="line">[<span class="string">&#x27;Business&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern=re.compile(<span class="string">r&#x27;\w+g\b&#x27;</span>)<span class="comment">#以g结尾的单词</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattenr.findall(example)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#18&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    pattenr.findall(example)</span><br><span class="line">NameError: name <span class="string">&#x27;pattenr&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern.findall(example)</span><br><span class="line">[<span class="string">&#x27;ShanDong&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern=re.compile(<span class="string">r&#x27;\b[a-zA-Z]&#123;3&#125;\b&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern.findall(example)</span><br><span class="line">[<span class="string">&#x27;and&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern=re.compile(<span class="string">r&#x27;\b[a-zA-Z]&#123;3&#125;&#x27;</span>)<span class="comment">#三个字母的单词</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern.findall(example)</span><br><span class="line">[<span class="string">&#x27;Sha&#x27;</span>, <span class="string">&#x27;Ins&#x27;</span>, <span class="string">&#x27;Bus&#x27;</span>, <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;Tec&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>example=<span class="string">&#x27;andand okd ooooo&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern.findall(example)</span><br><span class="line">[<span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;okd&#x27;</span>, <span class="string">&#x27;ooo&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern=re.compile(<span class="string">r&#x27;\b[a-zA-Z]&#123;3&#125;\b&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern.findall(example)</span><br><span class="line">[<span class="string">&#x27;okd&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>example=<span class="string">&#x27;ShanDong Institute of Business and Technology&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern.match(example)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern.search(example)</span><br><span class="line">&lt;re.Match object; span=(<span class="number">31</span>, <span class="number">34</span>), match=<span class="string">&#x27;and&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern.re.compile(<span class="string">r&#x27;\b\w*a\w*\b&#x27;</span>)<span class="comment">#含有字母a的单词</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#34&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    pattern.re.compile(<span class="string">r&#x27;\b\w*a\w*\b&#x27;</span>)</span><br><span class="line">AttributeError: <span class="string">&#x27;re.Pattern&#x27;</span> object has no attribute <span class="string">&#x27;re&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern=re.compile(<span class="string">r&#x27;\b\w*a\w*\b&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern.findall(example)</span><br><span class="line">[<span class="string">&#x27;ShanDong&#x27;</span>, <span class="string">&#x27;and&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>text=<span class="string">&#x27;He was carefully disguised but captured quickly by police&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(<span class="string">r&#x27;\w+ly</span></span><br><span class="line"><span class="string">	       </span></span><br><span class="line"><span class="string">SyntaxError: EOL while scanning string literal</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; re.findall(r&#x27;</span>\w+ly<span class="string">&#x27;,text)#以ly结尾的单词</span></span><br><span class="line"><span class="string">	       </span></span><br><span class="line"><span class="string">[&#x27;</span>carefully<span class="string">&#x27;, &#x27;</span>quickly<span class="string">&#x27;]</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; </span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>


<ol start="2">
<li>sub()   subn()<blockquote>
<p>实现字符串替换功能<br>repl可以为字符串或返回字符串可调用对象</p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eample=<span class="string">&#x27;&#x27;&#x27;Beautiful is better than ugly.</span></span><br><span class="line"><span class="string">Explicit is better than implicit.</span></span><br><span class="line"><span class="string">Simple is better than complex.</span></span><br><span class="line"><span class="string">Complex is better than complicated.</span></span><br><span class="line"><span class="string">Flat is better than nested.</span></span><br><span class="line"><span class="string">Sparse is better than dense.</span></span><br><span class="line"><span class="string">Readability counts.&#x27;&#x27;&#x27;</span></span><br><span class="line">	       </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern=re.compile(<span class="string">r&#x27;\bb\w*\b&#x27;</span>,re.I)</span><br><span class="line">	       </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(pattern.sub(<span class="string">&#x27;*&#x27;</span>,example))<span class="comment">#将符合条件的单词替换</span></span><br><span class="line">	       </span><br><span class="line">ShanDong Institute of * <span class="keyword">and</span> Technology</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(pattern.sub(<span class="string">&#x27;*&#x27;</span>,eample))</span><br><span class="line">	       </span><br><span class="line">* <span class="keyword">is</span> * than ugly.</span><br><span class="line">Explicit <span class="keyword">is</span> * than implicit.</span><br><span class="line">Simple <span class="keyword">is</span> * than complex.</span><br><span class="line">Complex <span class="keyword">is</span> * than complicated.</span><br><span class="line">Flat <span class="keyword">is</span> * than nested.</span><br><span class="line">Sparse <span class="keyword">is</span> * than dense.</span><br><span class="line">Readability counts.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line">	       </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(pattern.sub(<span class="keyword">lambda</span> x:x.group(<span class="number">0</span>).upper(),eample))</span><br><span class="line">	       </span><br><span class="line">BEAUTIFUL <span class="keyword">is</span> BETTER than ugly.</span><br><span class="line">Explicit <span class="keyword">is</span> BETTER than implicit.</span><br><span class="line">Simple <span class="keyword">is</span> BETTER than complex.</span><br><span class="line">Complex <span class="keyword">is</span> BETTER than complicated.</span><br><span class="line">Flat <span class="keyword">is</span> BETTER than nested.</span><br><span class="line">Sparse <span class="keyword">is</span> BETTER than dense.</span><br><span class="line">Readability counts.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(pattern.sub(<span class="string">&#x27;*&#x27;</span>,eample,<span class="number">1</span>))<span class="comment">#只替换1次</span></span><br><span class="line">	       </span><br><span class="line">* <span class="keyword">is</span> better than ugly.</span><br><span class="line">Explicit <span class="keyword">is</span> better than implicit.</span><br><span class="line">Simple <span class="keyword">is</span> better than complex.</span><br><span class="line">Complex <span class="keyword">is</span> better than complicated.</span><br><span class="line">Flat <span class="keyword">is</span> better than nested.</span><br><span class="line">Sparse <span class="keyword">is</span> better than dense.</span><br><span class="line">Readability counts.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line">	       </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern=re.compile(<span class="string">r&#x27;\bb\w*\b&#x27;</span>)</span><br><span class="line">	       </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(pattern.sub(<span class="string">&#x27;*&#x27;</span>,example,<span class="number">1</span>))</span><br><span class="line">	       </span><br><span class="line">ShanDong Institute of Business <span class="keyword">and</span> Technology</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(pattern.sub(<span class="string">&#x27;*&#x27;</span>,eample,<span class="number">1</span>))</span><br><span class="line">	       </span><br><span class="line">Beautiful <span class="keyword">is</span> * than ugly.</span><br><span class="line">Explicit <span class="keyword">is</span> better than implicit.</span><br><span class="line">Simple <span class="keyword">is</span> better than complex.</span><br><span class="line">Complex <span class="keyword">is</span> better than complicated.</span><br><span class="line">Flat <span class="keyword">is</span> better than nested.</span><br><span class="line">Sparse <span class="keyword">is</span> better than dense.</span><br><span class="line">Readability counts.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>


<ol start="3">
<li>split()<blockquote>
<p>字符串分隔</p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>example=<span class="string">r&#x27;one,two,three,four/five\six?seven[eight]nine|ten&#x27;</span></span><br><span class="line">	       </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern=re.compile(<span class="string">r&#x27;[,./\\?[]\|]&#x27;</span>)</span><br><span class="line">	       </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern.split(example)</span><br><span class="line">	       </span><br><span class="line">[<span class="string">&#x27;one,two,three,four/five\\six?seven[eight]nine|ten&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern=re.compile(<span class="string">r&#x27;[,./\\?[]\|]&#x27;</span>)</span><br><span class="line">	       </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern.split(example)</span><br><span class="line">	       </span><br><span class="line">[<span class="string">&#x27;one,two,three,four/five\\six?seven[eight]nine|ten&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line">	       </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line">	       </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line">	       </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>example=<span class="string">r&#x27;one1two2three3four4five5ten&#x27;</span></span><br><span class="line">	       </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern=re.compile(<span class="string">r&#x27;\d+&#x27;</span>)</span><br><span class="line">	       </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern.split(example)</span><br><span class="line">	       </span><br><span class="line">[<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>, <span class="string">&#x27;four&#x27;</span>, <span class="string">&#x27;five&#x27;</span>, <span class="string">&#x27;ten&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>

<h2 id="match对象"><a href="#match对象" class="headerlink" title="match对象"></a>match对象</h2><p>正在表达式对象的match（）方法和search（）方法匹配成功后都会返回match对象。<br>match对象的主要方法有</p>
<blockquote>
<p>group()  返回匹配的一个或多个子模式内容<br>groups()  返回一个包含匹配的所有子模式内容的元组<br>groupdict()  返回包含匹配的所有命名子模式内容的字典<br>start()   返回指定子模式内容的起始位置<br>end()  返回一个包含指定子模式内容的起始位置和结束位置前一个位置的元组</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>m=re.match(<span class="string">r&#x27;(\w+) (\w+)&#x27;</span>,<span class="string">&#x27;Isaac Newton,physicist&#x27;</span>)</span><br><span class="line">	       </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">0</span>)<span class="comment">#返回匹配到的整个模式</span></span><br><span class="line">	       </span><br><span class="line"><span class="string">&#x27;Isaac Newton&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">1</span>)<span class="comment">#返回第一个子模式</span></span><br><span class="line">	       </span><br><span class="line"><span class="string">&#x27;Isaac&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.goup(<span class="number">2</span>)<span class="comment">#返回第二个子模式</span></span><br><span class="line">	       </span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#82&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    m.goup(<span class="number">2</span>)</span><br><span class="line">AttributeError: <span class="string">&#x27;re.Match&#x27;</span> object has no attribute <span class="string">&#x27;goup&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">2</span>)</span><br><span class="line">	       </span><br><span class="line"><span class="string">&#x27;Newton&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">3</span>)</span><br><span class="line">	       </span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#84&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    m.group(<span class="number">3</span>)</span><br><span class="line">IndexError: no such group</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">1</span>,<span class="number">2</span>)<span class="comment">#返回指定的多个子模式</span></span><br><span class="line">	       </span><br><span class="line">(<span class="string">&#x27;Isaac&#x27;</span>, <span class="string">&#x27;Newton&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="子模式扩展语法"><a href="#子模式扩展语法" class="headerlink" title="子模式扩展语法"></a>子模式扩展语法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m=re.match(<span class="string">r&#x27;(?P&lt;first_name&gt;\w+) (?P&lt;last_name&gt;\w+)&#x27;</span>,<span class="string">&#x27;Malcolm Reynolds&#x27;</span>)</span><br><span class="line">	       </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="string">&#x27;first_name&#x27;</span>)<span class="comment">#使用命名的子模式</span></span><br><span class="line">	       </span><br><span class="line"><span class="string">&#x27;Malcolm&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="string">&#x27;last_name&#x27;</span>)</span><br><span class="line">	       </span><br><span class="line"><span class="string">&#x27;Reynolds&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m=re.match(<span class="string">r&#x27;(\d+)\.(\d+)&#x27;</span>,<span class="string">&#x27;24.1632&#x27;</span>)</span><br><span class="line">	       </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.groups()<span class="comment">#返回所有匹配的子模式，不包括第0个</span></span><br><span class="line">	       </span><br><span class="line">(<span class="string">&#x27;24&#x27;</span>, <span class="string">&#x27;1632&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line">	       </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line">	       </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m=re.match(<span class="string">r&#x27;(?P&lt;first_name&gt;\w+) (?P&lt;last_name&gt;\w+)&#x27;</span>,<span class="string">&#x27;Malcolm Reynolds&#x27;</span>)</span><br><span class="line">	       </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.groupdict()<span class="comment">#以字典形式返回匹配结果</span></span><br><span class="line">	       </span><br><span class="line">&#123;<span class="string">&#x27;first_name&#x27;</span>: <span class="string">&#x27;Malcolm&#x27;</span>, <span class="string">&#x27;last_name&#x27;</span>: <span class="string">&#x27;Reynolds&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern=re.compile(<span class="string">r&#x27;(?&lt;=\w\s)never(?=\s\w)&#x27;</span>)<span class="comment">#查找不在句子开头和结尾的never</span></span><br><span class="line">	       </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>exampleString=<span class="string">&#x27;&#x27;&#x27;There should be one-- and preferably only one --obvious way to do it.</span></span><br><span class="line"><span class="string">Although that way may not be obvious at first unless you&#x27;re Dutch.</span></span><br><span class="line"><span class="string">Now is better than never.</span></span><br><span class="line"><span class="string">Although never is often better than *right* now.&#x27;&#x27;&#x27;</span></span><br><span class="line">	       </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>matchResult=pattern.search(exampleString)</span><br><span class="line">	       </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>matchResult.span()</span><br><span class="line">	       </span><br><span class="line">(<span class="number">172</span>, <span class="number">177</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern=re.compile(<span class="string">r&#x27;(?:is\s)better(\sthan)&#x27;</span>)<span class="comment">#查找前面是is的better than 组合</span></span><br><span class="line">	       </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>matchResult=pattern.search(exampleString)</span><br><span class="line">	       </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>matchResult.span()</span><br><span class="line">	       </span><br><span class="line">(<span class="number">141</span>, <span class="number">155</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>matchResult.group(<span class="number">0</span>)</span><br><span class="line">	       </span><br><span class="line"><span class="string">&#x27;is better than&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>matchResult.group(<span class="number">1</span>)</span><br><span class="line">	       </span><br><span class="line"><span class="string">&#x27; than&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="正则表达式扩展语法"><a href="#正则表达式扩展语法" class="headerlink" title="正则表达式扩展语法"></a>正则表达式扩展语法</h2><blockquote>
<p>使用<code>()</code>表示一个子模式，圆括号里的内容作为一个整体看待</p>
</blockquote>
<table>
<thead>
<tr>
<th>语法</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>(?P&lt;groupname&gt;)</td>
<td>为子模式命名</td>
</tr>
<tr>
<td>(?iLmsux)</td>
<td>设置匹配标志</td>
</tr>
<tr>
<td>(?:…)</td>
<td>匹配但是不捕获改匹配的子表达式</td>
</tr>
<tr>
<td>(?P=groupname)</td>
<td>表示在此之前命名为goupname的子模式</td>
</tr>
<tr>
<td>(?#…)</td>
<td>表示注释</td>
</tr>
<tr>
<td>(?&lt;=…)</td>
<td>用于正则表达式之前，如果&lt;=后的内容在字符串中出现则匹配，但不返回&lt;=之后的内容</td>
</tr>
<tr>
<td>(?=…)</td>
<td>用于正则表达式之后，如果=后的内容在字符串中出现则匹配，但不返&lt;=之后的内容</td>
</tr>
<tr>
<td>(?&lt;! …)</td>
<td>用于正则表达式之前，如果&lt;!后的内容在字符串中不出现则匹配，但不返回&lt;!之后的内容</td>
</tr>
<tr>
<td>(?!…)</td>
<td>用于正则表达式之后，如果!后的内容在字符串中出现则匹配，但不返回!之后的内容</td>
</tr>
</tbody></table>
<h1 id="文件内容操作"><a href="#文件内容操作" class="headerlink" title="文件内容操作"></a>文件内容操作</h1><h2 id="内置函数-open"><a href="#内置函数-open" class="headerlink" title="内置函数 open()"></a>内置函数 open()</h2><p><code>open(file,mode=&#39;r&#39;,buffering=-1,encoding=None,errors=None,newline=None,closefd=True,opener=None)</code></p>
<p>各参数说明：</p>
<ol>
<li>file：要打开的文件</li>
<li>mode： 打开文件后的处理方式，以不同方式打开文件时，文件指针初始位置略有不同。  以只读和只写模式打开时文件指针的初始位置是文件头，以  追加  模式打开时文件指针的初始位置为文件尾。</li>
</ol>
<p>文件的打开模式有七个：<br>|打开模式|含义|<br>|—|—|<br>|’r’|只读，默认，不存在则返回异常|<br>|’w’|覆盖写模式，存在也完全覆盖|<br>|’x’|创建写模式，存在返回异常|<br>|’a’|追加写模式|<br>|’b’|二进制|<br>|’t’|文本文件模式，默认|<br>|’+’|与r w x a一起使用，在原功能的同时基础上增加读写功能|</p>
<ol start="3">
<li>buffering指定读写文件的缓存模式，数值0（只在二进制模式中可用）表示不缓存，数值1（只在文本模式中可用）表示使用行缓存模式，大于1的数字则表示缓冲区的大小，默认值是-1.    当使用默认值-1时，二进制文件和非交互式文本文件以固定大小的块为缓存单位，等价于io.DEFAULT_BUFFER_SIZE，交互式文本文件（isatty()方法返回True)采用行缓存模式。     缓存机制使得修改文件时不需要频繁的进行磁盘文件的读写操作，而是等缓存满了后再写入文件，或者在需要的时候调用 flush() 方法将缓存中的内容写入磁盘文件。。</li>
</ol>
<blockquote>
<p>在关闭文件前发生了错误导致程序崩溃，这时文件就无法正常关闭。。。<br>所以推荐使用with关键字。。</p>
</blockquote>
<p><strong>注意</strong>：open（）函数返回的是一个可迭代的文件对象，通过该文件对象可以对文件进行读写。。。<br>文件读写操作相关函数都会自动改变文件指针的位置。。写入文件的操作函数也是如此。。</p>
<p>文件对象常用方法：<br>|方法|功能|<br>|—|—|<br>|close()| 把缓冲区里的内容写入文件，同时关闭文件，释放文件对象|<br>|detach()| |<br>|flush| 写入文件但不关闭文件 |<br>|read([size])| |<br>|readable| |<br>|readline()| |<br>|seekable()| |<br>|tell()|返回文件指针的当前位置 |<br>|truncate([size])| |<br>|write(s)| 把字符串s写入文件|<br>|writable()|测试当前文件是否可写 |<br>|writelines(s)| |</p>
<h2 id="with关键字"><a href="#with关键字" class="headerlink" title="with关键字"></a>with关键字</h2><p>为了更安全的关闭文件，涉及上下文</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with open(filename,mode,encoding) as file:</span><br><span class="line">   #这里写通过文件对象file读写文件内容的语句。。</span><br></pre></td></tr></table></figure>




<h1 id="文件与文件夹操作"><a href="#文件与文件夹操作" class="headerlink" title="文件与文件夹操作"></a>文件与文件夹操作</h1><p>遍历，复制，删除，压缩，重命名等</p>
<h2 id="os模块"><a href="#os模块" class="headerlink" title="os模块"></a>os模块</h2><p>使用操作系统功能</p>
<h2 id="os-path模块"><a href="#os-path模块" class="headerlink" title="os.path模块"></a>os.path模块</h2><h2 id="shutil模块"><a href="#shutil模块" class="headerlink" title="shutil模块"></a>shutil模块</h2><h2 id="glob-模块"><a href="#glob-模块" class="headerlink" title="glob 模块"></a>glob 模块</h2><h2 id="fnmatch-模块"><a href="#fnmatch-模块" class="headerlink" title="fnmatch 模块"></a>fnmatch 模块</h2><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p><a href="http://www.michealpan.xyz/2018/04/28/python%E4%B8%8E%E5%85%B6%E7%BC%96%E7%A0%81/">http://www.michealpan.xyz/2018/04/28/python%E4%B8%8E%E5%85%B6%E7%BC%96%E7%A0%81/</a></p>
<p><a href="http://www.fmddlmyy.cn/text6.html">http://www.fmddlmyy.cn/text6.html</a></p>
<p><a href="http://cenalulu.github.io/linux/character-encoding/">http://cenalulu.github.io/linux/character-encoding/</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html">http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html</a></p>
<p><a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81">https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81</a></p>
<p><a href="http://guochenglai.com/2016/06/03/coding-history/">http://guochenglai.com/2016/06/03/coding-history/</a></p>
<p><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431664106267f12e9bef7ee14cf6a8776a479bdec9b9000">https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431664106267f12e9bef7ee14cf6a8776a479bdec9b9000</a></p>
<p><a href="https://blog.csdn.net/baixiaoshi/article/details/40786503">https://blog.csdn.net/baixiaoshi/article/details/40786503</a></p>
<p><a href="https://blog.csdn.net/Gavin_new/article/details/52863297">https://blog.csdn.net/Gavin_new/article/details/52863297</a></p>
<p><a href="https://www.zhihu.com/question/20650946">https://www.zhihu.com/question/20650946</a></p>
<h2 id="The-Zen-of-Python-by-Tim-Peters"><a href="#The-Zen-of-Python-by-Tim-Peters" class="headerlink" title="The Zen of Python, by Tim Peters"></a>The Zen of Python, by Tim Peters</h2><p>The Zen of Python, by Tim Peters</p>
<p>Beautiful is better than ugly.<br>Explicit is better than implicit.<br>Simple is better than complex.<br>Complex is better than complicated.<br>Flat is better than nested.<br>Sparse is better than dense.<br>Readability counts.<br>Special cases aren’t special enough to break the rules.<br>Although practicality beats purity.<br>Errors should never pass silently.<br>Unless explicitly silenced.<br>In the face of ambiguity, refuse the temptation to guess.<br>There should be one– and preferably only one –obvious way to do it.<br>Although that way may not be obvious at first unless you’re Dutch.<br>Now is better than never.<br>Although never is often better than <em>right</em> now.<br>If the implementation is hard to explain, it’s a bad idea.<br>If the implementation is easy to explain, it may be a good idea.<br>Namespaces are one honking great idea – let’s do more of those!</p>
<blockquote>
<blockquote>
<blockquote>
</blockquote>
</blockquote>
</blockquote>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础</title>
    <url>/2018/10/05/java/</url>
    <content><![CDATA[<p>java 程序设计</p>
<a id="more"></a>

<h1 id="java介绍"><a href="#java介绍" class="headerlink" title="java介绍"></a>java介绍</h1><h2 id="java三种核心机制"><a href="#java三种核心机制" class="headerlink" title="java三种核心机制"></a>java三种核心机制</h2><p>• Java 虚拟机(Java Virtual Machine)<br>• 代码安全性检测(Code Security)<br>• 垃圾收集机制(Garbage collection)</p>
<h2 id="Java虚拟机（Java-Virtual-Machine）"><a href="#Java虚拟机（Java-Virtual-Machine）" class="headerlink" title="Java虚拟机（Java Virtual Machine）"></a>Java虚拟机（Java Virtual Machine）</h2><blockquote>
<p>Java 语言里负责解释执行字节码文件的是 Java 虚拟机，即 JVM（Java Virtual Machine）。 JVM 是可运行 Java 字节码文件的虚拟计算机。所有平台上的 JVM 向编译器提供相同的编程接口，而编译器只需要面向虚拟机，生成虚拟机能理解的代码，然后由虚拟机来解释执行。在一些虚拟机的实现中，还会将虚拟机代码转换成特定系统的机器码执行，从而提高执行效率。当使用 Java 编译器编译 Java 程序时，生成的是与平台无关的字节码，这些字节码不面向任何具体平台，只面向 JVM。不同平台上的 JVM 都是不同的，但它们都提供了相同的接口。 JVM 是 Java 程序跨平台的关键部分，只要为不同平台实现了相应的虚拟机，编译后的 Java 字节码就可以在该平台上运行。显然，相同的字节码程序需要在不同的平台上运行，这几乎是“不可能的”，只有通过中间的转换器才可以实现， JVM 就是这个转换器。JVM 是一个抽象的计算机，和实际的计算机一样，它具有指令集并使用不同的存储区域。它负责执行指令，还要管理数据、内存和寄存器 </p>
</blockquote>
<p>• 在一台计算机上由软件或硬件模拟的计算机。<br>• Java虚拟机(JVM)读取并处理经编译过的字节码class文件 。<br>Java虚拟机规范定义了：<br>• 指令集<br>• 寄存器集<br>• 类文件结构<br>• 堆栈<br>• 垃圾收集堆<br>• 内存区域</p>
<h2 id="jre"><a href="#jre" class="headerlink" title="jre"></a>jre</h2><p>• JRE (The Java Runtime Environment)<br>• JRE = JVM + API（Lib )<br>• JRE运行程序时的三项主要功能：<br>加载代码：由class loader 完成；<br>校验代码：由bytecode verifier 完成；<br>执行代码：由 runtime interpreter完成。</p>
<h2 id="Java自动垃圾回收技术"><a href="#Java自动垃圾回收技术" class="headerlink" title="Java自动垃圾回收技术"></a>Java自动垃圾回收技术</h2><p>• 垃圾回收(garbage collection)<br>• 在C/C++ 等语言中，由程序员负责回收无用内存<br>• Java语言自动垃圾回收<br>系统级线程跟踪存储空间的分配情况<br>在JVM的空闲时，检查并释放那些可被释放的存储器空间<br>程序员无须也无法精确控制和干预该回收过程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通常有如下建议：</span><br><span class="line">  一个 Java 源文件只定义一个类，不同的类使用不同的源文件定义。</span><br><span class="line">  让 Java 源文件的主文件名与该源文件中定义的 public 类同名。</span><br><span class="line"></span><br><span class="line"> Java 程序的内存分配和回收都是由</span><br><span class="line">JRE 在后台自动进行的。 JRE 会负责回收那些不再使用的内存，这种机制被称为垃圾回收（Garbage</span><br><span class="line">Collection，也被称为 GC）。通常 JRE 会提供一个后台线程来进行检测和控制，一般都是在 CPU 空闲或</span><br><span class="line">内存不足时自动进行垃圾回收，而程序员无法精确控制垃圾回收的时间和顺序等。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Java 的堆内存是一个运行时数据区，用以保存类的实例（对象）， Java 虚拟机的堆内存中存储着正在运行的应用程序所建立的所有对象，这些对象不需要程序通过代码来显式地释放。一般来说，堆内存的回收由垃圾回收来负责，所有的 JVM 实现都有一个由垃圾回收器管理的堆内存。垃圾回收是一种动态存储管理技术，它自动地释放不再被程序引用的对象，按照特定的垃圾回收算法来实现内存资源的自动回收功能。 </p>
</blockquote>
<blockquote>
<p>而在 Java 中，当没有对象引用指向原先分配给某个对象的内存时，该内存便成为垃圾。 JVM 的一个超级线程会自动释放该内存区。垃圾回收意味着程序不再需要的对象是“垃圾信息”，这些信息将被丢弃。 </p>
</blockquote>
<blockquote>
<p>通常，垃圾回收具有如下几个特点。<br> 垃圾回收机制的工作目标是回收无用对象的内存空间，这些内存空间都是 JVM 堆内存里的内存空间，垃圾回收只能回收内存资源，对其他物理资源，如数据库连接、磁盘 I/O 等资源则无能为力。<br> 为了更快地让垃圾回收机制回收那些不再使用的对象，可以将该对象的引用变量设置为 null，<br>通过这种方式暗示垃圾回收机制可以回收该对象。<br> 垃圾回收发生的不可预知性。由于不同 JVM 采用了不同的垃圾回收机制和不同的垃圾回收算<br>法，因此它有可能是定时发生的，有可能是当 CPU 空闲时发生的，也有可能和原始的垃圾回收<br>一样，等到内存消耗出现极限时发生，这和垃圾回收实现机制的选择及具体的设置都有关系。<br>虽然程序员可以通过调用对象的 finalize()方法或 System.gc()等方法来建议系统进行垃圾回收，<br>但这种调用仅仅是建议，依然不能精确控制垃圾回收机制的执行。<br> 垃圾回收的精确性主要包括两个方面：一是垃圾回收机制能够精确地标记活着的对象；二是垃<br>圾回收器能够精确地定位对象之间的引用关系。前者是完全回收所有废弃对象的前提，否则就<br>可能造成内存泄漏；而后者则是实现归并和复制等算法的必要条件，通过这种引用关系，可以<br>保证所有对象都能被可靠地回收，所有对象都能被重新分配，从而有效地减少内存碎片的产生。<br> 现在的 JVM 有多种不同的垃圾回收实现，每种回收机制因其算法差异可能表现各异，有的当垃<br>圾回收开始时就停止应用程序的运行，有的当垃圾回收运行时允许应用程序的线程运行，还有<br>的在同一时间允许垃圾回收多线程运行。 </p>
</blockquote>
<h2 id="JDK（Java开发工具包）"><a href="#JDK（Java开发工具包）" class="headerlink" title="JDK（Java开发工具包）"></a>JDK（Java开发工具包）</h2><blockquote>
<p>Sun 把 Java 分为 Java SE、 Java EE 和 Java ME 三个部分，而且为 Java SE 和 Java EE 分别提供了 JDK<br>和 Java EE SDK（Software Development Kit）两个开发包，如果读者只需要学习 Java SE 的编程知识，则<br>可以下载标准的 JDK；如果读者学完 Java SE 之后，还需要继续学习 Java EE 相关内容，也可以选择下载<br>Java EE SDK，有一个 Java EE SDK 版本里已经包含了最新版的 JDK，安装 Java EE SDK 就包含了 JDK。 </p>
</blockquote>
<p>JDK=JRE+Tools<br>JRE=JVM+API</p>
<p>• JDK提供的工具<br>java编译器 javac.exe<br>java执行器 java.exe<br>文档生成器 javadoc.exe<br>java打包器 jar.exe<br>java调试器 jdb.exe</p>
<p>• JDK安装后的文件夹<br>Bin 该目录存放工具文件<br>Jre 该目录存放与java 运行环境相关的文件<br>• 注：该 Jre与从<a href="http://java.com/">http://java.com</a> 下载的JRE略有区别<br>Demo 该目录存放一些示例文件<br>Include 该目录存放与C相关的头文件<br>Lib 该目录存放程序库<br>Db 数据库相关</p>
<blockquote>
<p>2002 年 2 月， Sun 发布了 JDK 历史上最为成熟的版本： JDK 1.4。此时由于 Compaq、 Fujitsu、 SAS、Symbian、 IBM 等公司的参与，使 JDK 1.4 成为发展最快的一个 JDK 版本。到 JDK 1.4 为止，我们已经可以使用 Java 实现大多数的应用了。<br>在此期间， Java 语言在企业应用领域大放异彩，涌现出大量基于 Java 语言的开源框架： Struts、<br>WebWork、 Hibernate、 Spring 等；大量企业应用服务器也开始涌现： WebLogic、 WebSphere、 JBoss 等，这些都标志着 Java 语言进入了飞速发展时期。 </p>
</blockquote>
<blockquote>
<p>JDK 1.5 增加了诸如泛型、增强的 for 语句、可变数量的形<br>参、注释（Annotations)、自动拆箱和装箱等功能；同时，也发布了新的企业级平台规范，如通过注释等新特性来简化 EJB 的复杂性，并推出了 EJB 3.0 规范。还推出了自己的 MVC 框架规范： JSF， JSF 规范类似于 ASP.NET 的服务器端控件，通过它可以快速地构建复杂的 JSP 界面。 </p>
</blockquote>
<blockquote>
<p>但在 2009 年 4 月 20 日， Oracle 宣布将以每股 9.5 美元的价格收购 Sun，该交易的总价值约为 74亿美元。而 Oracle 通过收购 Sun 公司获得了两项软件资产： Java 和 Solaris。 </p>
</blockquote>
<h2 id="设定path和classpath-Java程序设计"><a href="#设定path和classpath-Java程序设计" class="headerlink" title="设定path和classpath Java程序设计"></a>设定path和classpath Java程序设计</h2><p>• 设定path和classpath<br>前者是命令（javac及java)的路径; 后者是所要引用的类的路径<br>可以在命令行上设定<br>• set path=.;c:\jdk\bin;…<br>也可以在系统环境中设定<br>• 如win7中：我的电脑—属性—高级—性能—环境变量<br>• 如win8中：这台电脑—属性—高级—环境变量<br>• 在javac及java命令行上使用-classpath （或-cp)选项可以引用别的库<br>javac –cp libxx.jar 源文件名.java<br>java –cp libxx.jar 类名</p>
<h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><blockquote>
<p>‘java’ 不是内部或外部命令，也不是可运行的程序<br>或批处理文件。<br>‘javac’ 不是内部或外部命令，也不是可运行的程序<br>或批处理文件。</p>
</blockquote>
<blockquote>
<p>这意味着我们还不能使用 java 和 javac 两个命令。这是因为： 虽然我们已经在计算机里安装了 JDK，而 JDK 的安装路径下也包含了 java 和 javac 两个命令，但计算机不知道到哪里去找这两个命令。计算机如何查找命令呢？ Windows 操作系统根据 Path 环境变量来查找命令。 Path 环境变量的值是一系列路径， Windows 操作系统将在这一系列的路径中依次查找命令，如果能找到这个命令，则该命令 是可执行的；否则将出现“’xxx’不是内部或外部命令，也不是可运行的程序或批处理文件”的提示。而 Linux 操作系统则根据 PATH 环境变量来查找命令， PATH 环境变量的值也是一系列路径。 因为 Windows 操作系统不区分大小写，设置 Path 和 PATH 并没有区别；而 Linux 系统是区分大小写的，设置 Path 和PATH 是有区别的，因此只需要设置 PATH 环境变量即可。 </p>
</blockquote>
<blockquote>
<p>那么 CLASSPATH 环境变量的作用是什么呢？当使用“java Java 类名”命令来运行 Java 程序时，<br>JRE 到哪里去搜索 Java 类呢？可能有读者会回答，在当前路径下搜索啊。这个回答很聪明，但 1.4 以前<br>版本的 JDK 都没有设计这个功能，这意味着即使当前路径已经包含了 HelloWorld.class，并在当前路径<br>下执行“java HelloWorld”，系统将一样提示找不到 HelloWorld 类。<br>如果使用 1.4 以前版本的 JDK，则需要在 CLASSPATH 环境变量中添加一点（.），用以告诉 JRE 需要在当前路径下搜索 Java 类。除此之外，编译和运行 Java 程序还需要 JDK 的 lib 路径下 dt.jar 和 tools.jar 文件中的 Java 类，因此还需要把这两个文件添加到 CLASSPATH 环境变量里。因此，如果使用 1.4 以前版本的 JDK 来编译和运行 Java 程序，常常需要设置 CLASSPATH 环境变量的值为.;%JAVA_HOME%\lib\dt.jar; %JAVA_HOME%\lib\tools.jar（其中 JAVA_HOME 环境变量应指向JDK 的安装目录）。 </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果想在运行 Java 程序时临时指定 JRE 搜索 Java 类的路径，则可以使用-classpath 选项，即按如下</span><br><span class="line">格式来运行 java 命令：</span><br><span class="line">java -classpath dir1;dir2;dir3...;dirN Java 类</span><br><span class="line">-classpath 选项的值可以是一系列的路径，多个路径之间在 Windows 平台上以分号（;）隔开，在</span><br><span class="line">Linux 平台上则以冒号（:）隔开。</span><br><span class="line">如果在运行 Java 程序时指定了-classpath 选项的值， JRE 将严格按-classpath 选项所指定的路径来搜</span><br><span class="line">索 Java 类，既不会在当前路径下搜索 Java 类， CLASSPATH 环境变量所指定的搜索路径也不再有效。</span><br></pre></td></tr></table></figure>





<hr>
<blockquote>
<p>JAVA_HOME：该环境变量的值就是 Java 所在的目录，一些 Java 版的软件<br>和一些 Java 的工具需要用到该变量，设置 PATH 和 CLASSPATH 的时候，<br>也可以使用该变量以方便设置。</p>
</blockquote>
<blockquote>
<p>PATH：指定一个路径列表，用于搜索可执行文件的。<br>执行一个可执行文件时，如果该文件不能在当前路径下找到，<br>则依次寻找 PATH 中的每一个路径，直至找到。或者找完 PATH 中的路径也不能找到，则报错。<br>Java 的编译命令 (javac)，执行命令 (java) 和一些工具命令 (javadoc, jdb 等) 都在其安装路径下的 bin 目录中。<br>因此我们应该将该路径添加到 PATH 变量中。</p>
</blockquote>
<blockquote>
<p>CLASSPATH：也指定一个路径列表，是用于搜索 Java 编译或者运行时需要用到的类。<br>在 CLASSPATH 列表中除了可以包含路径外，还可以包含 .jar 文件。<br>Java 查找类时会把这个 .jar 文件当作一个目录来进行查找。<br>通常，我们需要把 JDK 安装路径下的 jre\lib\rt.jar (Linux: jre/lib/rt.jar) 包含在 CLASSPATH 中。</p>
</blockquote>
<p><code>PATH 和 CLASSPATH 都指定路径列表，列表中的各项 (即各个路径) 之间使用分隔符分隔。 在 Windows 下，分隔符是分号 (;)，而在 Linux 下，分隔符是冒号 (:)。</code></p>
<h3 id="windows-xp下配置JDK环境变量："><a href="#windows-xp下配置JDK环境变量：" class="headerlink" title="windows xp下配置JDK环境变量："></a>windows xp下配置JDK环境变量：</h3><p> 安装JDK，安装过程中可以自定义安装目录等信息，<br> 例如我们选择安装目录为C:\Program Files\Java\jdk1.6.0_10；</p>
<p>在“系统变量”中，设置3项属性，JAVA_HOME,PATH,CLASSPATH(大小写无所谓),<br>若已存在则点击“编辑”，不存在则点击“新建”；</p>
<p>JAVA_HOME指明JDK安装路径，就是刚才安装时所选择的路径C:\Program Files\Java\jdk1.6.0_10，<br>此路径下包括lib，bin，jre等文件夹（此变量最好设置，因为以后运行tomcat，eclipse等都需要依据此变量）；</p>
<p>Path使得系统可以在任何路径下识别java命令，设为： </p>
<p>%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin; </p>
<p>CLASSPATH为java加载类(class or lib)路径，只有类在classpath中，java命令才能识别，设为： </p>
<p>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar (要加.表示当前路径) </p>
<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="对象（object"><a href="#对象（object" class="headerlink" title="对象（object)"></a>对象（object)</h2><p>• 对象具有两方面的含义：<br>在现实世界中：<br>• 是客观世界中的一个实体<br>在计算机世界中：<br>• 是一个可标识的存储区域</p>
<h2 id="类（class）"><a href="#类（class）" class="headerlink" title="类（class）"></a>类（class）</h2><p>• 类：具有共同属性和行为的对象集合<br>属性： 变量（字段 field)<br>行为： 函数（方法 method）<br>• 类与对象的关系<br>类是对象的抽象(模板)<br>对象是类的实例</p>
<p>• 注：类和对象有时都统称“对象”，为了明确起见，后者称为“对象实例”</p>
<h2 id="面向对象的三大特征"><a href="#面向对象的三大特征" class="headerlink" title="面向对象的三大特征"></a>面向对象的三大特征</h2><p>封装性<br>继承性<br>多态性</p>
<h3 id="封装-（Encapsulation）"><a href="#封装-（Encapsulation）" class="headerlink" title="封装 （Encapsulation）"></a>封装 （Encapsulation）</h3><blockquote>
<p>封装指的是将对象的实现细节隐藏起来，然后通过一些公用方法来暴露该对象的功能 </p>
</blockquote>
<p>模块化：将属性和行为封装在类中，程序定义很多类。<br>信息隐蔽：将类的细节部分隐藏起来<br>用户只通过受保护的接口访问某个类。</p>
<p>class Person{<br>private int age;<br>public int getAge(){ return age; }<br>public void setAge(int a){ age=a;}<br>String name;<br>void sayHello(){…}<br>}</p>
<h3 id="继承（inheritance"><a href="#继承（inheritance" class="headerlink" title="继承（inheritance)"></a>继承（inheritance)</h3><blockquote>
<p>继承是面向对象实现软件复用的重要手段，当子类继承父类后，子类作为一种特殊的父类，将直接获得父类的属性 和方法 .</p>
<p>由于多继承可能引起继承结构的混乱，而且会大大降低程序的可理解性，所以 Java<br>不支持多继承。 </p>
</blockquote>
<p>• 继承性<br>父类和子类之间共享数据和方法<br>• 继承的好处<br>更好地进行抽象与分类<br>增强代码的重用率<br>提高可维护性</p>
<h3 id="多态性（polymorphism"><a href="#多态性（polymorphism" class="headerlink" title="多态性（polymorphism)"></a>多态性（polymorphism)</h3><blockquote>
<p>多态指的是子类对象可以直接赋给父类变量，但运行时依然表现出子类的行为特征，这意味着<br>同一个类型的对象在执行同一个方法时，可能表现出多种行为特征。 </p>
</blockquote>
<p>• 多态<br>不同的对象收到同一个消息（调用方法）可产生完全不同的效果<br>实现的细节则由接收对象自行决定<br>例 foo( Person p ){ p.sayHello(); }<br> foo( new Student() );<br> foo( new Teacher() );</p>
<p>**在编程语言领域，还有一个“基于对象”的概念，这两个概念极易混淆。通常而言，“基于对象”<br>也使用了对象，但是无法利用现有的对象模板产生新的对象类型，继而产生新的对象，也就是说，“基于对象”没有继承的特点；而“多态”则更需要继承，没有了继承的概念也就无从谈论“多态”。面向对象方法的三大基本特征（封装、继承、多态）缺一不可。例如， JavaScript 语言就是基于对象的，它使用一些封装好的对象，调用对象的方法，设置对象的属性；但是它们无法让开发者派生新的类，开发者只能使用现有对象的方法和属性。 **</p>
<h2 id="java的面向对象"><a href="#java的面向对象" class="headerlink" title="java的面向对象"></a>java的面向对象</h2><blockquote>
<p>在 Java 语言中，除了 8 个基本数据类型值之外，一切都是对象，而对象就是面向对象程序设计的中心。 Java 通过为对象定义 Field（以前常被称为属性，现在也称为字段）来描述对象的状态<br>对象是 Java 程序的核心，所以 Java 里的对象具有唯一性，每个对象都有一个标识来引用它，如果某个对象失去了标识，这个对象将变成垃圾，只能等着系统垃圾回收机制来回收它。 Java 语言不允许直接访问对象，而是通过对对象的引用来操作对象。</p>
</blockquote>
<p>一般→特殊关系：这种关系就是典型的继承关系， Java 语言使用 extends 关键字来表示这种继承<br>关系， Java 的子类是一种特殊的父类。因此，这种一般→特殊的关系其实是一种“is a”关系.<br>比如水果→苹果，就是典型的一般→特殊的关系，苹果 is a 水果</p>
<h2 id="三种基本结构"><a href="#三种基本结构" class="headerlink" title="三种基本结构"></a>三种基本结构</h2><ol>
<li>顺序</li>
<li>条件</li>
<li>循环</li>
</ol>
<blockquote>
<p>结构化程序设计中的任何结构都具有唯一的入口和唯一的出口，<br>并且程序不会出现死循环。在程序的静态形式与动态执行流程之间具有良好的对应关系。 </p>
</blockquote>
<h2 id="如何设计"><a href="#如何设计" class="headerlink" title="如何设计"></a>如何设计</h2><blockquote>
<p>从面向对象的眼光来看，开发者希望从自然的认识、使用角度来定义和使用类。也就是说，开发者<br>希望直接对客观世界进行模拟：定义一个类，对应客观世界的哪种事物；业务需要关心这个事物的哪些<br>状态，程序就为这些状态定义 Field；业务需要关心这个事物的哪些行为，程序就为这些行为定义方法 </p>
</blockquote>
<p>• 认为客观世界由各种对象组成<br>• 程序的分析和设计都围绕着<br>有哪些对象类<br>每个类有哪些属性、哪些方法<br>类之间的关系（继承、关联等）<br>对象之间发送消息（调用方法）</p>
<h2 id="Java程序的类型"><a href="#Java程序的类型" class="headerlink" title="Java程序的类型"></a>Java程序的类型</h2><p>Application和Applet程序</p>
<p>• 结构和运行环境不同<br>• 前者是独立的程序，需要执行器(调用虚拟机)来运行<br>• 后者是嵌在HTML网页中的非独立的程序，<br>由专门的appletViewer来运行<br>或者由Web 浏览器（调用JAVA虚拟机）来运行</p>
<h2 id="其他几个工具-Java程序设计"><a href="#其他几个工具-Java程序设计" class="headerlink" title="其他几个工具 Java程序设计"></a>其他几个工具 Java程序设计</h2><p>• 主要的工具<br>javac 编译<br>java 运行（控制台及图形界面程序）<br>javaw 运行图形界面程序<br>appletViewer 运行applet程序<br>• 另外常用的几个工具<br>jar 打包工具<br>javadoc 生成文档<br>Javap 查看类信息及反汇编</p>
<h2 id="Java的API文档"><a href="#Java的API文档" class="headerlink" title="Java的API文档"></a>Java的API文档</h2><p>• 在线文档<br><a href="http://docs.oracle.com/javase/8/docs/api/index.html">http://docs.oracle.com/javase/8/docs/api/index.html</a><br>• 也可以下载网页格式的文档<br>doc.zip<br>• 另可以从网上搜索到chm格式的文档<br>如 JDK_API_1_6_zh_CN.CHM</p>
<h1 id="简单程序构造"><a href="#简单程序构造" class="headerlink" title="简单程序构造"></a>简单程序构造</h1><h2 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h2><blockquote>
<p>一种功能更强大的注释形式：文档注释。如果编写 Java 源代码时添加了合适的文<br>档注释，然后通过 JDK 提供的 javadoc 工具可以直接将源代码里的文档注释提取成一份系统的 API 文档。 </p>
</blockquote>
<p><strong>什么是API</strong>:开发一个大型软件时， 需要定义成千上万的类，而且需要很多人参与开发。每个人都会开发一些类，并在类里定义一些方法、 Field 提供给其他人使用，但其他人怎么知道如何使用这些类和方法呢？这时候就需要提供一份说明文档， 用于说明每个类、 每个方法的用途。 当其他人使用一个类或一个方法时， 他无须关心这个类或这个方法的具体实现，他只要知道这个类或这个方法的功能即可，然后使用这个类或方法来实现具体的目的，也就是通过调用应用程序接口（API）来编程。 API 文档就是用以说明这些应用程序接口的文档。对于 Java 语言而言， API 文档通常详细说明了每个类、每个方法的功能及用法等。</p>
<p>java英文api：<a href="https://docs.oracle.com/javase/8/docs/api/">https://docs.oracle.com/javase/8/docs/api/</a><br>java中文api：<a href="http://www.matools.com/api/java8">http://www.matools.com/api/java8</a></p>
<h3 id="使用javadoc"><a href="#使用javadoc" class="headerlink" title="使用javadoc"></a>使用javadoc</h3><blockquote>
<p>javadoc 工具默认只处理以 public 或 protected 修饰的类、接口、方法、 Field、构造器和内部类之前的文档注释。如果开发者确实希望 javadoc 工具可以提取 private 修饰的内容，则可以在使用 javadoc 工具时增加-private 选项。<br>文档注释以斜线后紧跟两个星号（/*<em>）开始，以星号后紧跟一个斜线（</em>/）作为结尾，中间部分<br>全部都是文档注释，会被提取到 API 文档中。</p>
</blockquote>
<h2 id="编译与解释"><a href="#编译与解释" class="headerlink" title="编译与解释"></a>编译与解释</h2><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><blockquote>
<p>编译型语言是指使用专门的编译器，针对特定平台（操作系统）将某种高级语言源代码一次性“翻<br>译”成可被该平台硬件执行的机器码（包括机器指令和操作数），并包装成该平台所能识别的可执行性<br>程序的格式，这个转换过程称为编译（Compile）。编译生成的可执行性程序可以脱离开发环境，在特定<br>的平台上独立运行。<br>有些程序编译结束后，还可能需要对其他编译好的目标代码进行链接，即组装两个以上的目标代码<br>模块生成最终的可执行性程序，通过这种方式实现低层次的代码复用。<br>因为编译型语言是一次性地编译成机器码，所以可以脱离开发环境独立运行，而且通常运行效率较<br>高；但因为编译型语言的程序被编译成特定平台上的机器码，因此编译生成的可执行性程序通常无法移<br>植到其他平台上运行；如果需要移植，则必须将源代码复制到特定平台上，针对特定平台进行修改，至<br>少也需要采用特定平台上的编译器重新编译。<br>现有的 C、 C++、 FORTRAN、 Pascal 等高级语言都属于编译型语言。 </p>
</blockquote>
<h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><blockquote>
<p>解释型语言是指使用专门的解释器对源程序逐行解释成特定平台的机器码并立即执行的语言。解释<br>型语言通常不会进行整体性的编译和链接处理，解释型语言相当于把编译型语言中的编译和解释过程混<br>合到一起同时完成。<br>可以认为：每次执行解释型语言的程序都需要进行一次编译，因此解释型语言的程序运行效率通常<br>较低，而且不能脱离解释器独立运行。但解释型语言有一个优势：跨平台比较容易，只需提供特定平台<br>的解释器即可，每个特定平台上的解释器负责将源程序解释成特定平台的机器指令即可。解释型语言可<br>以方便地实现源程序级的移植，但这是以牺牲程序执行效率为代价的。<br>现有的 Ruby、 Python 等语言都属于解释型语言。 </p>
</blockquote>
<h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><blockquote>
<p>由 Java 语言编写的程序需要经过编译步骤，但这个编译步骤并不会生成特定<br>平台的机器码，而是生成一种与平台无关的字节码（也就是*.class 文件）。当然，这种字节码不是可执<br>行性的，必须使用 Java 解释器来解释执行。 </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Java 解释器规定：如需某个类能被解释器直接解释执行，则这个类里必须包含 main 方法，而且 main</span><br><span class="line">方法必须使用 public static void 来修饰，且 main 方法的形参必须是字符串数组类型（String[] args 是字</span><br><span class="line">符串数组的形式）。也就是说， main 方法的写法几乎是固定的。 Java 解释器就从这个 main 方法开始解</span><br><span class="line">释执行，因此， main 方法是 Java 程序的入口。</span><br></pre></td></tr></table></figure>





<h2 id="java程序的基本构成"><a href="#java程序的基本构成" class="headerlink" title="java程序的基本构成"></a>java程序的基本构成</h2><h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><blockquote>
<p>Java 程序源文件的命名不是随意的， Java 文件的命名必须满足如下规则。<br>Java 程序源文件的后缀必须是.java，不能是其他文件后缀名。<br>在通常情况下， Java 程序源文件的主文件名可以是任意的。但有一种情况例外：如果 Java 程序<br>源代码里定义了一个 public 类，则该源文件的主文件名必须与该 public 类（也就是该类定义使<br>用了 public 关键字修饰）的类名相同。<br>由于 Java 程序源文件的文件名必须与 public 类的类名相同，因此，一个 Java 源文件里最多只能定<br>义一个 public 类。 </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通常有如下建议：</span><br><span class="line">  一个 Java 源文件只定义一个类，不同的类使用不同的源文件定义。</span><br><span class="line">  让 Java 源文件的主文件名与该源文件中定义的 public 类同名。</span><br></pre></td></tr></table></figure>





<p>• 应注意Java是大小写敏感的语言。<br>按Java惯例，类名首字母用大写（Pascal)<br>其余的（包名、方法名、变量名）首字母都小写(camel)<br>少用下划线<br>变量、常量随使用随定义 </p>
<p>• 类＝类头＋类体<br>• 类成员＝字段（field）＋方法（method）<br>字段（field, 属性,变量） 方法（method, 函数）<br>• 方法＝方法头＋方法体</p>
<h3 id="分隔符"><a href="#分隔符" class="headerlink" title="分隔符"></a>分隔符</h3><p>Java 语言里的分号（;）、花括号（{}）、方括号([])、圆括号（()）、空格、圆点（.）都具有特殊的分<br>隔作用，因此被统称为分隔符。 </p>
<blockquote>
<p>花括号的作用就是定义一个代码块，一个代码块指的就是“{”和“}”所包含的一段代码，代码块<br>在逻辑上是一个整体。对 Java 语言而言，类定义部分必须放在一个代码块里，方法体部分也必须放在一个代码块里。除此之外，条件语句中的条件执行体和循环语句中的循环体通常也放在代码块里。花括号一般是成对出现的，有一个“{”则必然有一个“}”，反之亦然。</p>
</blockquote>
<h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p><strong>Java 的所有关键字都是小写的</strong></p>
<blockquote>
<p>除了上面的 48 个关键字之外， Java 还包含 goto 和 const 两个保留字（reserved word），保留字的意思是， Java 现在还未使用这两个单词作为关键字，但可能在未来的 Java 版本中使用这两个单词作为关键字；不仅如此， Java 还提供了 3 个特殊的直接量（literal）： true、 false 和 null； Java 语言的标识符也不能使用这两个保留字和三个特殊的直接量。</p>
</blockquote>
<h2 id="程序的编辑、编译与运行"><a href="#程序的编辑、编译与运行" class="headerlink" title="程序的编辑、编译与运行"></a>程序的编辑、编译与运行</h2><p>• 源程序编辑<br>可用任一文本编辑器<br>• 程序编译<br>使用JDK中的javac工具<br>• 程序运行<br>使用java工具</p>
<h2 id="Application的编辑、编译与运行"><a href="#Application的编辑、编译与运行" class="headerlink" title="Application的编辑、编译与运行"></a>Application的编辑、编译与运行</h2><p>• 程序编辑：编辑器——文件名要与public class的类名一致<br>区分大小写<br>• 程序编译——转换为字节码（bytecode)文件，扩展名.class<br>（.class文件中包含 java虚拟机的指令）<br>编译可以使用JDK工具javac.exe。<br>如 javac Hello.java<br>• 程序的运行——执行 .class文件中的指令的过程。<br>如 java Hello<br>(注意：不要写成 java Hello.class， 因为这里需要的是类名，不是文件名)</p>
<h2 id="Applet的编辑、编译与运行"><a href="#Applet的编辑、编译与运行" class="headerlink" title="Applet的编辑、编译与运行"></a>Applet的编辑、编译与运行</h2><p>• Java Applet程序必须嵌入到 HTML中，并由负责解释HTML 文件的<br>WWW 浏览器充当解释器，解释执行程序。<br>• Java Applet在WWW 中引入了动态交互的内容。<br>• 1、源程序的编辑和编译。<br>• 2、在HTML文件中嵌入Applet。<br>使用<code>&lt;applet&gt;</code>标签:<br>&lt;applet code=”HelloWorldApplet.class”<br>width=200 height=40 background=white&gt;</p>
<p>用appletViewer运行Applet<br>• appletViewer HelloWorldApplet.html</p>
<h2 id="使用jar打包"><a href="#使用jar打包" class="headerlink" title="使用jar打包"></a>使用jar打包</h2><p>• （1）编译 javac A.java<br>• （2）打包 jar cvfm A.jar A.man A.class<br>c表示创建(create), v表示显示详情(verbose), f表示指定文件名, m表示清单文件<br>• （3）运行 java -jar A.jar<br>• 其中A.man 是清单文件(manifest), 内容如下：<br>• Manifest-Version: 1.0<br>• Class-Path: .<br>• Main-Class: A<br>• 清单文件可以任意命名，常见的是用 MANIFEST.MF</p>
<h2 id="使用JavaDoc生成文档"><a href="#使用JavaDoc生成文档" class="headerlink" title="使用JavaDoc生成文档"></a>使用JavaDoc生成文档</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">javadoc 命令可对源文件、包生成 API 文档，在上面的语法格式中， Java 源文件可以支持通配符，</span><br><span class="line">例如，使用*.java 来代表当前路径下所有的 Java 源文件。 javadoc 的常用选项有如下几个。</span><br><span class="line">  -d &lt;directory&gt;：该选项指定一个路径，用于将生成的 API 文档放到指定目录下。</span><br><span class="line">  -windowtitle &lt;text&gt;：该选项指定一个字符串，用于设置 API 文档的浏览器窗口标题。</span><br><span class="line">  -doctitle &lt;html-code&gt;：该选项指定一个 HTML 格式的文本，用于指定概述页面的标题。</span><br><span class="line">只有对处于多个包下的源文件来生成 API 文档时，才有概述页面。</span><br><span class="line">  -header &lt;html-code&gt;：该选项指定一个 HTML 格式的文本，包含每个页面的页眉。</span><br><span class="line">除此之外， javadoc 命令还包含了大量其他选项，读者可以通过在命令行窗口执行 javadoc -help 来</span><br><span class="line">查看 javadoc 命令的所有选项</span><br></pre></td></tr></table></figure>





<p>• javadoc –d 目录名 xxx.java<br>• <code>/** */</code> 这其中可以用以下标记<br>@author 对类的说明 标明开发该类模块的作者<br>@version 对类的说明 标明该类模块的版本<br>@see 对类、属性、方法的说明 参考转向，也就是相关主题<br>@param 对方法的说明 对方法中某参数的说明<br>@return 对方法的说明 对方法返回值的说明<br>@exception 对方法的说明 对方法可能抛出的异常进行说明</p>
<h2 id="使用javap"><a href="#使用javap" class="headerlink" title="使用javap"></a>使用javap</h2><p>• 使用javap查看类的信息<br>javap 类名<br>• 使用javap反汇编<br>javap –c 类名</p>
<h2 id="IDE中快速输入代码"><a href="#IDE中快速输入代码" class="headerlink" title="IDE中快速输入代码"></a>IDE中快速输入代码</h2><p>• 代码模板（Code Template)</p>
<p>• 在Eclipse中<br>输入main，再按Alt+/键，得到main函数<br>输入sysout，再按Alt+/键，即可得到System.out.println(“”);<br>更多的，可见 Window—Preferences—Java—Editor—Templates</p>
<p>• 在NetBeans中<br>输入psvm，再按Tab键， 得到main函数<br>输入sout，再按Tab键，即可得到System.out.println(“”);<br>更多的，可见 工具—选项—编辑器—代码模板</p>
<h2 id="输入与输出-Java程序设计"><a href="#输入与输出-Java程序设计" class="headerlink" title="输入与输出 Java程序设计"></a>输入与输出 Java程序设计</h2><p>• 应用程序（Java Application）的输入输出可以是文本界面，也可以是图形界面。<br>• 小程序（Java Applet）则只能是图形界面。<br>• 每种界面都可以有输入和输出。</p>
<h1 id="数据类型和运算符"><a href="#数据类型和运算符" class="headerlink" title="数据类型和运算符"></a>数据类型和运算符</h1><p>基本类型（Primitive Type）和引用类型（Reference Type） </p>
<p>数据类型决定数据的存储方式和运算方式.<br>Java中的数据类型分为两大类<br>基本数据类型（primitive types）<br>引用类型( reference types )</p>
<p>有的时候也把 char 型称为字符型，实际上字符型也是一种整数类型。 </p>
<h2 id="强类型"><a href="#强类型" class="headerlink" title="强类型"></a>强类型</h2><blockquote>
<p>Java 语言是一门强类型语言。 强类型包含两方面的含义： ① 所有的变量必须先声明、 后使用； ② 指<br>定类型的变量只能接受类型与之匹配的值。 </p>
</blockquote>
<blockquote>
<p>基本类型大致上可以分为两类：数值类型和布尔类型，其中数值类型包括整型、字符型和浮点型，所有数值类型之间可以进行类型转换，这种类型转换包括自动类型转换和强制类型转换。 </p>
</blockquote>
<h2 id="四类-八种基本数据类型"><a href="#四类-八种基本数据类型" class="headerlink" title="四类/八种基本数据类型"></a>四类/八种基本数据类型</h2><h3 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h3><p>boolean类型数据只允许取值true或false </p>
<h3 id="char"><a href="#char" class="headerlink" title="char"></a>char</h3><p>字符常量是用单引号括起来的单个字符.<br>Java字符采用Unicode编码，每个字符占两个字节，<br>可用十六进制编码形式表示<br>char c1 = ‘\u0061’;</p>
<h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">• \ddd 1到3位八进制数所表示的字符(ddd)</span><br><span class="line">• \uxxxx 1到4位十六进制数所表示的字符(xxxx)</span><br><span class="line">• \&#39; 单引号字符</span><br><span class="line">• \&quot; 双引号字符</span><br><span class="line">• \\ 反斜杠字符</span><br><span class="line">• \r 回车</span><br><span class="line">• \n 换行</span><br><span class="line">• \f 走纸换页</span><br><span class="line">• \t 横向跳格</span><br><span class="line">• \b 退格</span><br></pre></td></tr></table></figure>

<h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><p>byte 1字节<br>short 2字节<br>int 4字节<br>long 8字节 </p>
<p>• Java语言整型常量的三种表示形式：<br> 十进制整数，如12, -314, 0。<br> 八进制整数，要求以0开头，如012<br> 十六进制数，要求0x或0X开头，如0x12<br> 二进制数，以0b或0B开头，如0b00010010 （Java7以上）</p>
<p>• Java语言的整型常量默认为int型，如：<br>• int i =3;<br>• 声明long型常量可以后加‘ l ’或‘ L ’ ，如：<br>• long l = 3L;<br>• Java中没有“无符号数”<br><strong> 可以用long来处理无符号整数（uint）</strong></p>
<h3 id="浮点"><a href="#浮点" class="headerlink" title="浮点"></a>浮点</h3><table>
<thead>
<tr>
<th>类 型</th>
<th>占用存储空间</th>
<th>表数范围</th>
</tr>
</thead>
<tbody><tr>
<td>float</td>
<td>4字节</td>
<td>-3.403E38~3.403E38</td>
</tr>
<tr>
<td>double</td>
<td>8字节</td>
<td>-1.798E308~1.798E308</td>
</tr>
</tbody></table>
<p>• Java浮点型常量默认为double型,<br>如要声明一个常量为float型，则需在数字后面加f或F，如：<br>• double d = 3.14;<br>• float f = 3.14f;</p>
<h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>比较运算的结果是一个布尔值（true 或 false）。 Java支持的比较运算符如下。 </p>
<p>• 关系运算符: &gt;，&lt;，&gt;=，&lt;=，==，!= </p>
<h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><blockquote>
<p>关系运算符优先级大于赋值运算符，小于算术运算符。</p>
<p>==与!=的优先级是关系运算符里较低的。</p>
<p>boolean类型不能比大小。</p>
</blockquote>
<p>浮点数的运算是有误差的。所以比较两个浮点数<strong>是否相等</strong>，不能直接相比较，而是判断俩个数相减是否小于一个很小的数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">double a &#x3D;1.1+1.1;</span><br><span class="line">double b&#x3D;2.2；</span><br><span class="line">&#96;Math.abs(a&#x3D;b)  小于 1 e -8&#96; ;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p>使用java.util.Scanner类</p>
<p>• java.io包<br>• System.in.read( )<br>• System.out.print( ) 及 println、 printf （类似于C语言）</p>
<h3 id="读输入"><a href="#读输入" class="headerlink" title="读输入"></a>读输入</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Scanner in &#x3D; new Scanner(System.in);</span><br><span class="line">System.out.println(in.nextLine());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">• System.out.println(in.nextLine());</span><br><span class="line"></span><br></pre></td></tr></table></figure>









<h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">• 左移</span><br><span class="line">&quot;a&lt;&lt;b; &quot;将二进制形式的a逐位左移b位，最低位空出的b位补0；</span><br><span class="line">• 带符号右移</span><br><span class="line">&quot;a&gt;&gt;b; &quot;将二进制形式的a逐位右移b位，最高位空出的b位补原来的符号位；</span><br><span class="line">• 无符号右移</span><br><span class="line">&quot;a&gt;&gt;&gt;b;&quot;将二进制形式的a逐位右移b位，最高位空出的b位补0。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">• 移位运算符性质</span><br><span class="line">适用数据类型:byte、 short、 char、 int、 long</span><br><span class="line">对低于int型的操作数将先自动转换为int型再移位（整型提升，对所有的运算</span><br><span class="line">都是这样）</span><br><span class="line">对于int型整数移位a&gt;&gt;b，系统先将b对32取模，得到的结果才是真正移位的</span><br><span class="line">位数</span><br><span class="line">对于long型整数移位时a&gt;&gt;b ，则是先将移位位数b对64取模</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th>2227 =</th>
<th>00000000 00000000 00001000 10110011</th>
</tr>
</thead>
<tbody><tr>
<td>2227&lt;&lt; 3 =</td>
<td>00000000 00000000 01000101 10011000</td>
</tr>
<tr>
<td>2227&gt;&gt;3 =</td>
<td>00000000 00000000 00000001 00010110</td>
</tr>
<tr>
<td>2227&gt;&gt;&gt;3 =</td>
<td>00000000 00000000 00000001 00010110</td>
</tr>
<tr>
<td>-2227 =</td>
<td>11111111 11111111 11110111 01001101</td>
</tr>
<tr>
<td>-2227&lt;&lt;3 =</td>
<td>11111111 11111111 10111010 01101000</td>
</tr>
<tr>
<td>-2227&gt;&gt;3 =</td>
<td>11111111 11111111 11111110 11101001</td>
</tr>
<tr>
<td>-2227&gt;&gt;&gt;3 =</td>
<td>00011111 11111111 11111110 11101001</td>
</tr>
</tbody></table>
<h2 id="扩展赋值运算符"><a href="#扩展赋值运算符" class="headerlink" title="扩展赋值运算符"></a>扩展赋值运算符</h2><table>
<thead>
<tr>
<th>运算符</th>
<th>用法举例</th>
<th>等效的表达式</th>
</tr>
</thead>
<tbody><tr>
<td>+=</td>
<td>a += b</td>
<td>a = a+b</td>
</tr>
<tr>
<td>-=</td>
<td>a -= b</td>
<td>a = a-b</td>
</tr>
<tr>
<td>*=</td>
<td>a *= b</td>
<td>a = a*b</td>
</tr>
<tr>
<td>/=</td>
<td>a /= b</td>
<td>a = a/b</td>
</tr>
<tr>
<td>%=</td>
<td>a %= b</td>
<td>a = a%b</td>
</tr>
<tr>
<td><code>&amp;</code>=</td>
<td>a <code>&amp;</code>= b</td>
<td>a = a<code>&amp;b </code></td>
</tr>
<tr>
<td>|=</td>
<td>a |= b</td>
<td>a = a|b</td>
</tr>
<tr>
<td>^=</td>
<td>a ^= b</td>
<td>a = a^b</td>
</tr>
<tr>
<td>&lt;&lt;=</td>
<td>a &lt;&lt;= b</td>
<td>a = a&lt;&lt;b</td>
</tr>
<tr>
<td>&gt;&gt;=</td>
<td>a &gt;&gt;= b</td>
<td>a = a&gt;&gt;b</td>
</tr>
<tr>
<td>&gt;&gt;&gt;=</td>
<td>a &gt;&gt;&gt;= b</td>
<td>a = a&gt;&gt;&gt;b</td>
</tr>
</tbody></table>
<h2 id="字符串连接运算符"><a href="#字符串连接运算符" class="headerlink" title="字符串连接运算符"></a>字符串连接运算符</h2><p>“+”运算符两侧的操作数中只要有一个是字符串(String)类型，系统会自动将另一<br>个操作数转换为字符串然后再进行连接<br>• int i = 300 +5;<br>• String s = “hello, “ + i + “号”;<br>• System.out.println(s); //输出：hello, 305号<br>• 该运算符大大简化了字符串的处理 </p>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>逻辑运算符用于操作两个布尔型的变量或常量。逻辑运算符主要有如下 6 个。<br>  &amp;&amp;：与，前后两个操作数必须都是 true 才返回 true，否则返回 false。<br>  &amp;：不短路与，作用与&amp;&amp;相同，但不会短路。<br>  ||：或，只要两个操作数中有一个是 true，就可以返回 true，否则返回 false。<br>  |：不短路或，作用与||相同，但不会短路。<br>  !：非，只需要一个操作数，如果操作数为 true，则返回 false；如果操作数为 false，则返回 true。<br>  ^：异或，当两个操作数不同时才返回 true，如果两个操作数相同则返回 false。 </p>
<h2 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(expression) ? if-true-statement : if-false-statement;</span><br><span class="line">先对逻辑表达式 expression 求值，如果逻辑表达式返回 true，则返回第二个</span><br><span class="line">操作数的值，如果逻辑表达式返回 false，则返回第三个操作数的值</span><br></pre></td></tr></table></figure>











<h2 id="运算优先级"><a href="#运算优先级" class="headerlink" title="运算优先级"></a>运算优先级</h2><table>
<thead>
<tr>
<th>Separator</th>
<th>. ( ) { } ; ,</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>Associative</th>
<th>Operators</th>
</tr>
</thead>
<tbody><tr>
<td>R to L</td>
<td>++ – ~ ! (data type)</td>
</tr>
<tr>
<td>L to R</td>
<td>* / %</td>
</tr>
<tr>
<td>L to R</td>
<td>+ -</td>
</tr>
<tr>
<td>L to R</td>
<td>&lt;&lt; &gt;&gt; &gt;&gt;&gt;</td>
</tr>
<tr>
<td>L to R</td>
<td>&lt; &gt; &lt;= &gt;= instanceof</td>
</tr>
<tr>
<td>L to R</td>
<td>== !=</td>
</tr>
<tr>
<td>L to R</td>
<td>&amp;</td>
</tr>
<tr>
<td>L to R</td>
<td>^</td>
</tr>
<tr>
<td>L to R</td>
<td>|</td>
</tr>
<tr>
<td>L to R</td>
<td>&amp;&amp;</td>
</tr>
<tr>
<td>L to R</td>
<td>||</td>
</tr>
<tr>
<td>R to L</td>
<td>?:</td>
</tr>
<tr>
<td>R to L</td>
<td>= *= /= %= += -= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;= &amp;= ^= |=</td>
</tr>
</tbody></table>
<h1 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h1><blockquote>
<p>级联：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if()</span><br><span class="line">...;</span><br><span class="line">else if()</span><br><span class="line">....;</span><br><span class="line">else if()</span><br><span class="line">...;</span><br><span class="line">else</span><br><span class="line">...;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>if 语句使用布尔表达式或布尔值作为分支条件来进行分支控制。 if 语句有如下三种形式。<br>第一种形式：<br>if ( logic expression )<br>{<br>statement…<br>}<br>第二种形式：<br>if (logic expression)<br>{<br>statement…<br>}<br>else<br>{<br>statement…<br>}<br>第三种形式：<br>if (logic expression)<br>{<br>statement…<br>}<br>else if(logic expression)<br>{<br>statement…<br>}<br>…//可以有零个或多个 else if 语句<br>else//最后的 else 语句也可以省略<br>{<br>statement…<br>} </p>
<h2 id="多路分支里-switch"><a href="#多路分支里-switch" class="headerlink" title="多路分支里 switch"></a>多路分支里 switch</h2><p>break; 很重要，请注意。</p>
<blockquote>
<p>• 使用switch要注意：<br>变量类型是整数、字符、字符串（String)<br>case后面是常量<br>注意 break </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">switch (expression)</span><br><span class="line">&#123;</span><br><span class="line">case condition1:</span><br><span class="line">&#123;</span><br><span class="line">statement(s)</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">case condition2:</span><br><span class="line">&#123;</span><br><span class="line">statement(s)</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">case conditionN:</span><br><span class="line">&#123;</span><br><span class="line">statement(s)</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">default:</span><br><span class="line">&#123;</span><br><span class="line">statement(s)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><blockquote>
<p>循环的五个要素<br>初始化部分（init_statement）<br>循环条件部分（test_exp）<br>循环体部分（body_statement）<br>迭代部分（alter_statement）<br>结束后处理 </p>
</blockquote>
<h2 id="三种循环"><a href="#三种循环" class="headerlink" title="三种循环"></a>三种循环</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">for:</span><br><span class="line"></span><br><span class="line">语法格式</span><br><span class="line">• for (init_statement; test_exp; alter_statement)｛</span><br><span class="line">• body_statement</span><br><span class="line">• ｝</span><br><span class="line">• 应用举例</span><br><span class="line">• int result &#x3D; 0;</span><br><span class="line">• for(int i&#x3D;1; i&lt;&#x3D;100; i++) &#123;</span><br><span class="line">• result +&#x3D; i;</span><br><span class="line">• &#125;</span><br><span class="line">• System.out.println(&quot;result&#x3D;&quot; + result);</span><br><span class="line"></span><br><span class="line">while:</span><br><span class="line"></span><br><span class="line">语法格式 [init_statement]</span><br><span class="line">• while( test_exp)｛</span><br><span class="line">• body_statement;</span><br><span class="line">• [alter_statement;]</span><br><span class="line">• &#125;</span><br><span class="line">• 应用举例 int result &#x3D; 0;</span><br><span class="line">• int i&#x3D;1;</span><br><span class="line">• while(i&lt;&#x3D;100) &#123;</span><br><span class="line">• result +&#x3D; i;</span><br><span class="line">• i++;</span><br><span class="line">• &#125;</span><br><span class="line">• System.out.println(&quot;result&#x3D;&quot; + result);</span><br><span class="line">• 注意不要死循环</span><br><span class="line"></span><br><span class="line">do-while:</span><br><span class="line"></span><br><span class="line">语法格式</span><br><span class="line">• [init_statement]</span><br><span class="line">• do｛</span><br><span class="line">• body_statement;</span><br><span class="line">• [alter_statement;]</span><br><span class="line">• ｝while( test_exp);</span><br><span class="line">• 应用举例</span><br><span class="line">• int result &#x3D; 0, int i&#x3D;1;</span><br><span class="line">• do&#123;</span><br><span class="line">• result +&#x3D; i;</span><br><span class="line">• i++;</span><br><span class="line">• &#125;while(i&lt;&#x3D;100);</span><br><span class="line">• System.out.println(&quot;result&#x3D;&quot; + result);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="特俗流程控制语句"><a href="#特俗流程控制语句" class="headerlink" title="特俗流程控制语句"></a>特俗流程控制语句</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">break 语句</span><br><span class="line"> break语句用于终止某个语句块的执行</span><br><span class="line"> &#123; ……</span><br><span class="line"> break;</span><br><span class="line"> ……</span><br><span class="line"> &#125;</span><br><span class="line"> break语句出现在多层嵌套的语句块中时，可以通过标签指明要终止的是哪一层语句块</span><br><span class="line"> label1: &#123; ……</span><br><span class="line"> label2: &#123; ……</span><br><span class="line"> label3: &#123; ……</span><br><span class="line"> break label2;</span><br><span class="line"> ……</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> continue 语句</span><br><span class="line"> continue语句用于跳过某个循环语句块的一次执行</span><br><span class="line"> continue语句出现在多层嵌套的循环语句体中时，可以通过标签指明要跳过的是哪一层循环</span><br></pre></td></tr></table></figure>



<h2 id="使用return结束循环"><a href="#使用return结束循环" class="headerlink" title="使用return结束循环"></a>使用return结束循环</h2><blockquote>
<p>return 关键字并不是专门用于结束循环的， return 的功能是结束一个方法。当一个方法执行到一个<br>return 语句时（return 关键字后还可以跟变量、常量和表达式，这将在方法介绍中有更详细的解释），这个方法将被结束<br>return 直接结束整个方法，不管这个 return 处于多少层循环之内。 </p>
</blockquote>
<h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">死循环：</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">	&#x2F;&#x2F;循环的初始化条件、循环条件、循环迭代语句都在下面一行</span><br><span class="line">	for (int count &#x3D; 0 ; count &lt; 10 ; count++)</span><br><span class="line">	&#123;</span><br><span class="line">	System.out.println(count);</span><br><span class="line">	&#x2F;&#x2F;再次修改了循环变量</span><br><span class="line">	count *&#x3D; 0.1; &#x2F;&#x2F;死循环？？？ 因为count是整型</span><br><span class="line">	&#125;</span><br><span class="line">	System.out.println(&quot;循环结束!&quot;);</span><br></pre></td></tr></table></figure>



<h3 id="数位数"><a href="#数位数" class="headerlink" title="数位数"></a>数位数</h3><blockquote>
<p>给你一个整数，算出几位数。。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1.</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;		初始化</span><br><span class="line">		Scanner in&#x3D;new Scanner(System.in);</span><br><span class="line">		</span><br><span class="line">		Long number&#x3D;in.nextLong();</span><br><span class="line">		int count&#x3D;0;</span><br><span class="line">		</span><br><span class="line">		while(number&gt;0)</span><br><span class="line">		&#123;</span><br><span class="line">			number&#x2F;&#x3D;10;</span><br><span class="line">			count++;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		System.out.println(&quot;共有 &quot;+(count)+&quot; 位数&quot;);</span><br></pre></td></tr></table></figure>



<h3 id="算平均数"><a href="#算平均数" class="headerlink" title="算平均数"></a>算平均数</h3><blockquote>
<p>输入很多正数，以-1结束。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1.</span><br><span class="line"></span><br><span class="line">package project;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;求平均值</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class SumNumber &#123;</span><br><span class="line">	</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		</span><br><span class="line">		Scanner in &#x3D;new Scanner(System.in);</span><br><span class="line">		int sum&#x3D;0;</span><br><span class="line">		int count&#x3D;0;</span><br><span class="line">		int number&#x3D;in.nextInt();</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		while(number !&#x3D; -1)</span><br><span class="line">		&#123;</span><br><span class="line">			sum+&#x3D;number;</span><br><span class="line">			count++;</span><br><span class="line">			number&#x3D;in.nextInt();</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		if(count&gt;0)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.println(&quot;the avrage is &quot;+(double)sum&#x2F;count);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="猜数"><a href="#猜数" class="headerlink" title="猜数"></a>猜数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package project;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;给一个1到100以内的整数，猜出它来</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class SuspectNumber &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		Scanner in&#x3D;new Scanner(System.in);</span><br><span class="line">		double number&#x3D;(int)(Math.random()*100+1);&#x2F;&#x2F;[0,1)--&gt;[0,100)--&gt;[1,101)</span><br><span class="line">		</span><br><span class="line">		int a;</span><br><span class="line">		int count&#x3D;0;</span><br><span class="line">		</span><br><span class="line">		do &#123;</span><br><span class="line">			a&#x3D;in.nextInt();</span><br><span class="line">			count++;</span><br><span class="line">			if(a&gt;number)</span><br><span class="line">			&#123;</span><br><span class="line">				System.out.println(&quot;偏大&quot;);</span><br><span class="line">			&#125;else if(a&lt;number)</span><br><span class="line">				System.out.println(&quot;偏小&quot;);</span><br><span class="line">		&#125;while(a!&#x3D;number);</span><br><span class="line">		System.out.println(&quot;ok, 你猜中了&quot;);</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		System.out.println(&quot;恭喜你，你猜了 &quot;+count+&quot;次&quot;);</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="整数分解"><a href="#整数分解" class="headerlink" title="整数分解"></a>整数分解</h3><blockquote>
<p>352%10—&gt;2<br>352/10%10—&gt;5<br>352/10/10%10—&gt;3<br>3/10=0用来做判断</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> project;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerDisaway</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">int</span> number;</span><br><span class="line">		<span class="keyword">int</span> result=<span class="number">0</span>;</span><br><span class="line">		</span><br><span class="line">		number=in.nextInt();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">do</span> &#123;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">int</span> digit=number%<span class="number">10</span>;</span><br><span class="line">			result=result*<span class="number">10</span>+digit;<span class="comment">//解决首位是0的问题</span></span><br><span class="line">			System.out.print(digit); <span class="comment">//900---&gt;009</span></span><br><span class="line">			number /=<span class="number">10</span>;</span><br><span class="line">		&#125;<span class="keyword">while</span>(number!=<span class="number">0</span>);</span><br><span class="line">		System.out.println();</span><br><span class="line">		System.out.println(result);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h3><p>a=++i;</p>
<p>a=i++;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package project;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;不能算很大的阶乘！！</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Factorial &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		Scanner in &#x3D;new Scanner(System.in);</span><br><span class="line">		int n&#x3D;in.nextInt();</span><br><span class="line">&#x2F;&#x2F;		int i&#x3D;1;</span><br><span class="line">		</span><br><span class="line">		int factorial&#x3D;1;</span><br><span class="line">		</span><br><span class="line">&#x2F;&#x2F;		while(i&lt;&#x3D;n)&#123;</span><br><span class="line">&#x2F;&#x2F;			factorial*&#x3D;i;</span><br><span class="line">&#x2F;&#x2F;			i++;</span><br><span class="line">&#x2F;&#x2F;		&#125;</span><br><span class="line">		</span><br><span class="line">		for(int i&#x3D;1;i&lt;&#x3D;n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			factorial*&#x3D;i;</span><br><span class="line">		&#125;</span><br><span class="line">&#x2F;&#x2F;		System.out.println(i);</span><br><span class="line">		System.out.println(factorial);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package project;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;判断一个数是不是素数</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Prime &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		Scanner in &#x3D; new Scanner(System.in);</span><br><span class="line">		int n &#x3D; in.nextInt();</span><br><span class="line">		</span><br><span class="line">		int flag&#x3D;0;</span><br><span class="line">		</span><br><span class="line">		for(int i&#x3D;2;i&lt;n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			if(n%i&#x3D;&#x3D;0)</span><br><span class="line">			&#123;</span><br><span class="line">				flag&#x3D;1;</span><br><span class="line">				break;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		if(flag&#x3D;&#x3D;0)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.println(&quot;素数 &quot;+n);</span><br><span class="line">		&#125;else</span><br><span class="line">			System.out.println(n+&quot; not prime&quot;);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">100以内的素数：</span><br><span class="line"></span><br><span class="line">package project;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;判断一个数是不是素数</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Prime &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		Scanner in &#x3D; new Scanner(System.in);</span><br><span class="line">		int n &#x3D; in.nextInt();</span><br><span class="line">		</span><br><span class="line">&#x2F;&#x2F;		int flag&#x3D;0;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		for(int j&#x3D;2;j&lt;n;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			int flag&#x3D;0;</span><br><span class="line">			for(int i&#x3D;2;i&lt;j;i++)</span><br><span class="line">			&#123;</span><br><span class="line">				if(j%i&#x3D;&#x3D;0)</span><br><span class="line">				&#123;</span><br><span class="line">					flag&#x3D;1;</span><br><span class="line">					break;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			if(flag&#x3D;&#x3D;0)</span><br><span class="line">			&#123;</span><br><span class="line">&#x2F;&#x2F;				System.out.println(&quot;素数：&quot;);</span><br><span class="line">				System.out.print(j+&quot; &quot;);</span><br><span class="line">			&#125;</span><br><span class="line">&#x2F;&#x2F;			else</span><br><span class="line">&#x2F;&#x2F;				System.out.println(n+&quot; not prime&quot;);</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">前50个素数：</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="凑硬币"><a href="#凑硬币" class="headerlink" title="凑硬币"></a>凑硬币</h3><blockquote>
<p>1角，2角，5角凑10元</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package project;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;凑钱找零 1,2,5角</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Balance &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		Scanner in &#x3D; new Scanner(System.in);</span><br><span class="line">		int amount&#x3D;in.nextInt();</span><br><span class="line">		</span><br><span class="line">		lable1:for(int one&#x3D;0 ;one&lt;amount*10;one++)</span><br><span class="line">		&#123;</span><br><span class="line">			lable2:for(int two&#x3D;0;two&lt;amount*5;two++)</span><br><span class="line">			&#123;</span><br><span class="line">				lable3:for(int five&#x3D;0;five&lt;amount*2;five++)</span><br><span class="line">				&#123;</span><br><span class="line">					if(one+two*2+five*5&#x3D;&#x3D;amount*10)</span><br><span class="line">					&#123;</span><br><span class="line">						System.out.println(one+&quot;个一角  &quot;+two+&quot;个2角   &quot;+five+&quot; 个5角 &quot;);</span><br><span class="line">						break lable1;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="求分数和"><a href="#求分数和" class="headerlink" title="求分数和"></a>求分数和</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1.  </span><br><span class="line">1+1&#x2F;2+1&#x2F;3+1&#x2F;4+1&#x2F;5..1&#x2F;n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">package project;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;就和1+1&#x2F;2+1&#x2F;3+1&#x2F;4+1&#x2F;5..1&#x2F;n</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class SumFraction &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		Scanner in &#x3D;new Scanner(System.in);</span><br><span class="line">		int n&#x3D;in.nextInt();</span><br><span class="line">		double result&#x3D;0.0;</span><br><span class="line">		</span><br><span class="line">		for(int i&#x3D;1;i&lt;&#x3D;n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			result+&#x3D;1.0&#x2F;i;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(result);</span><br><span class="line">		System.out.printf(&quot;%.2f&quot;,result);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2. </span><br><span class="line">1-1&#x2F;2+1&#x2F;3-1&#x2F;4+1&#x2F;5..1&#x2F;n  一加一减</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">package project;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;就和1+1&#x2F;2+1&#x2F;3+1&#x2F;4+1&#x2F;5..1&#x2F;n</span><br><span class="line">&#x2F;&#x2F; 1-1&#x2F;2+1&#x2F;3-1&#x2F;4+1&#x2F;5..1&#x2F;n</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class SumFraction &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		Scanner in &#x3D;new Scanner(System.in);</span><br><span class="line">		int n&#x3D;in.nextInt();</span><br><span class="line">		double result&#x3D;0.0;</span><br><span class="line">		</span><br><span class="line">&#x2F;&#x2F;		for(int i&#x3D;1;i&lt;&#x3D;n;i++)</span><br><span class="line">&#x2F;&#x2F;		&#123;</span><br><span class="line">&#x2F;&#x2F;			result+&#x3D;1.0&#x2F;i;</span><br><span class="line">&#x2F;&#x2F;		&#125;</span><br><span class="line">		</span><br><span class="line">&#x2F;&#x2F;		int sign&#x3D;1;</span><br><span class="line">&#x2F;&#x2F;		</span><br><span class="line">&#x2F;&#x2F;		for(int i&#x3D;1;i&lt;&#x3D;n;i++)</span><br><span class="line">&#x2F;&#x2F;		&#123;</span><br><span class="line">&#x2F;&#x2F;			</span><br><span class="line">&#x2F;&#x2F;			result+&#x3D;sign*1.0&#x2F;i;</span><br><span class="line">&#x2F;&#x2F;			sign&#x3D;-sign;</span><br><span class="line">&#x2F;&#x2F;		&#125;</span><br><span class="line">		</span><br><span class="line">		for(int i&#x3D;1;i&lt;&#x3D;n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			if(i%2&#x3D;&#x3D;1)  &#x2F;&#x2F;奇位为正</span><br><span class="line">			&#123;</span><br><span class="line">				result+&#x3D;1.0&#x2F;i;</span><br><span class="line">			&#125;</span><br><span class="line">			else&#x2F;&#x2F;偶为负</span><br><span class="line">			&#123;</span><br><span class="line">				result-&#x3D;1.0&#x2F;i;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		System.out.println(result);</span><br><span class="line">		System.out.printf(&quot;%.2f&quot;,result);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="求最大公约数"><a href="#求最大公约数" class="headerlink" title="求最大公约数"></a>求最大公约数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">枚举：</span><br><span class="line"></span><br><span class="line">package project;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;求两个数的最大公约数</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class GCD &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		Scanner in&#x3D;new Scanner(System.in);</span><br><span class="line">		</span><br><span class="line">		int gcd &#x3D;1;</span><br><span class="line">		int a&#x3D;in.nextInt();</span><br><span class="line">		int b&#x3D;in.nextInt();</span><br><span class="line">		</span><br><span class="line">		for(int i&#x3D;1;i&lt;&#x3D;a&amp;&amp;i&lt;&#x3D;b;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			if(a%i&#x3D;&#x3D;0 &amp;&amp; b%i&#x3D;&#x3D;0)</span><br><span class="line">			&#123;</span><br><span class="line">				gcd&#x3D;i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		System.out.println(&quot;最大公约数是 &quot;+gcd);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">辗转相除法：</span><br><span class="line"></span><br><span class="line">package project;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;求两个数的最大公约数</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class GCD &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		Scanner in&#x3D;new Scanner(System.in);</span><br><span class="line">		</span><br><span class="line">		int gcd &#x3D;1;</span><br><span class="line">		int a&#x3D;in.nextInt();</span><br><span class="line">		int b&#x3D;in.nextInt();</span><br><span class="line">		</span><br><span class="line">&#x2F;&#x2F;		for(int i&#x3D;1;i&lt;&#x3D;a&amp;&amp;i&lt;&#x3D;b;i++)</span><br><span class="line">&#x2F;&#x2F;		&#123;</span><br><span class="line">&#x2F;&#x2F;			if(a%i&#x3D;&#x3D;0 &amp;&amp; b%i&#x3D;&#x3D;0)</span><br><span class="line">&#x2F;&#x2F;			&#123;</span><br><span class="line">&#x2F;&#x2F;				gcd&#x3D;i;</span><br><span class="line">&#x2F;&#x2F;			&#125;</span><br><span class="line">&#x2F;&#x2F;		&#125;</span><br><span class="line">		</span><br><span class="line">		while(b!&#x3D;0)</span><br><span class="line">		&#123;</span><br><span class="line">&#x2F;&#x2F;			辗转相除法</span><br><span class="line">			</span><br><span class="line">			int temp&#x3D;a%b;</span><br><span class="line">			a&#x3D;b;</span><br><span class="line">			b&#x3D;temp;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		gcd&#x3D;a;</span><br><span class="line">		</span><br><span class="line">		System.out.println(&quot;最大公约数是 &quot;+gcd);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<p>Java 语言支持两种语法格式来定义数组：<br>type[] arrayName;<br>type arrayName[];<br>对这两种语法格式而言，通常推荐使用第一种格式。因为第一种格式不仅具有更好的语意，而且具<br>有更好的可读性。对于 type[] arrayName;方式， 很容易理解这是定义一个变量， 其中变量名是 arrayName，<br>而变量类型是 type[]。前面已经指出： type[]确实是一种新类型，与 type 类型完全不同（例如 int 类型是<br>基本类型，但 int[]是引用类型）。因此，这种方式既容易理解，也符合定义变量的语法。但第二种格式<br>type arrayName[]的可读性就差了， 看起来好像定义了一个类型为 type 的变量， 而变量名是 arrayName[]，<br>这与真实的含义相去甚远。<br>可能有些读者非常喜欢 type arrayName[];这种定义数组的方式，这可能是因为早期某些计算机读物<br>的误导，从现在开始就不要再使用这种糟糕的方式了 </p>
</blockquote>
<blockquote>
<p>• 数组是多个相同类型数据的组合<br>• 一维数组的声明方式：<br>• int[] a;<br>• double []b<br>• Mydate []c;<br>• 注意方括号写到变量名的前面，也可以写到后面 </p>
</blockquote>
<h2 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h2><p>• 数组定义 与 为数组元素分配空间 分开进行 </p>
<blockquote>
<p>数组是一种引用类型的变量，因此使用它定义一个变量时，仅仅表示定义了一个引用变量（也就是<br>定义了一个指针），这个引用变量还未指向任何有效的内存，因此定义数组时不能指定数组的长度。而<br>且由于定义数组只是定义了一个引用变量，并未指向任何有效的内存空间，所以还没有内存空间来存储<br>数组元素，因此这个数组也不能使用，只有对数组进行初始化后才可以使用。 </p>
</blockquote>
<h3 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在定义数组的同时就为数组元素分配空间并赋值。</span><br><span class="line"></span><br><span class="line">int[] a &#x3D; &#123; 3, 9, 8&#125;;</span><br><span class="line">或写为 int[] a &#x3D; new int[]&#123; 3, 9, 8 &#125;;</span><br><span class="line">MyDate[] dates&#x3D; &#123;</span><br><span class="line">new MyDate(22, 7, 1964),</span><br><span class="line">new MyDate(1, 1, 2000),</span><br><span class="line">new MyDate(22, 12, 1964)</span><br><span class="line">&#125;;</span><br><span class="line">注：最后可以多一个逗号。如&#123;3,9,8,&#125;</span><br></pre></td></tr></table></figure>



<h3 id="默认初始化-动态初始化"><a href="#默认初始化-动态初始化" class="headerlink" title="默认初始化/动态初始化"></a>默认初始化/动态初始化</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">• 数组是引用类型，</span><br><span class="line">• 数组一经分配空间，其中的每个元素也被按照成员变量同样的方式被</span><br><span class="line">隐式初始化。例如：</span><br><span class="line">( 数值类型是0， 引用类型是null )</span><br><span class="line">• int []a&#x3D; new int[5];</span><br><span class="line">• &#x2F;&#x2F;a[3]则是0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">执行动态初始化时，程序员只需指定数组的长度，即为每个数组元素指定所需的内存空间，系统将</span><br><span class="line">负责为这些数组元素分配初始值。指定初始值时，系统按如下规则分配初始值。</span><br><span class="line">  数组元素的类型是基本类型中的整数类型（byte、 short、 int 和 long），则数组元素的值是 0。</span><br><span class="line">  数组元素的类型是基本类型中的浮点类型（float、 double），则数组元素的值是 0.0。</span><br><span class="line">  数组元素的类型是基本类型中的字符类型（char），则数组元素的值是&#39;\u0000&#39;。</span><br><span class="line">  数组元素的类型是基本类型中的布尔类型（boolean），则数组元素的值是 false。</span><br><span class="line">  数组元素的类型是引用类型（类、接口和数组），则数组元素的值是 null。</span><br></pre></td></tr></table></figure>



<blockquote>
<p>不要同时使用静态初始化和动态初始化，也就是说，不要在进行数组初始化时，既指<br>定数组的长度，也为每个数组元素分配初始值。 </p>
</blockquote>
<h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><blockquote>
<p>• Java语言中声明数组时不能指定其长度(数组中元素的个数)，例如：<br>• int a[5]; //非法<br>• 数组是引用类型<br> int [ ] a = new int[5];<br> 这里 a 只是一个引用 </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">• 每个数组都有一个属性length指明它的长度，例如：a.length 指明数组a的</span><br><span class="line">长度(元素个数)；</span><br><span class="line">int[] ages &#x3D; new int[10];</span><br><span class="line">for ( int i&#x3D;0; i&lt;ages.length; i++ )</span><br><span class="line">&#123;</span><br><span class="line">System.out.println( ages[i] );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="增强的for"><a href="#增强的for" class="headerlink" title="增强的for"></a>增强的for</h2><blockquote>
<p>从 Java 5 之后， Java 提供了一种更简单的循环： foreach 循环，这种循环遍历数组和集合 .使用 foreach 循环遍历数组和集合元素时，无须获得数组和集合长度，无须根据索引来访问数组元素和集合元素， foreach 循环自动遍历数组和集合的每个元素。 </p>
</blockquote>
<blockquote>
<p>Enhanced for语句可以方便地处理数组、集合中各元素<br>• 如：<br>int[] ages = new int[10];<br>for ( int age ： ages )<br>{<br>System.out.println( age );<br>}<br>这种语句是只读式的遍历 </p>
</blockquote>
<blockquote>
<p><strong>当使用 foreach 来迭代访问数组元素时， foreach 中的循环变量相当于一个临时</strong><br><strong>变量，系统会把数组元素依次赋给这个临时变量，而这个临时变量并不是数组元素，它只是保存了数组</strong><br><strong>元素的值。因此，如果希望改变数组元素的值，则不能使用这种 foreach 循环。</strong> </p>
</blockquote>
<h2 id="复制数组"><a href="#复制数组" class="headerlink" title="复制数组"></a>复制数组</h2><blockquote>
<p> System.arraycopy方法提供了数组元素复制功能：<br>//源数组<br>int[] source = { 1, 2, 3, 4, 5, 6 };<br>// 目的数组<br>int []dest = { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 };<br>// 复制源数组中从下标0开始的source.length个元素到<br>// 目的数组， 从下标0的位置开始存储。<br>System.arraycopy( source, 0, dest, 0, source.Length ); </p>
</blockquote>
<h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int[][] a &#x3D;new int[3][5];</span><br><span class="line">&#x2F;&#x2F;3行5列</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; 二维数组举例：</span><br><span class="line">&gt; &#96;int [][] a &#96;&#x3D;</span><br><span class="line">&gt; &#96;&#123;&#123;1,2&#125;,&#123;3,4,0,9&#125;,&#123;5,6,7&#125;&#125;; &#96;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; 二维数组是数组的数组</span><br><span class="line">&gt; &#96;int [][] t &#x3D; new int [3][];&#96;</span><br><span class="line">&gt; t[0] &#x3D; new int[2];</span><br><span class="line">&gt; t[1] &#x3D; new int[4];</span><br><span class="line">&gt; t[2] &#x3D; new int[3]; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; 多维数组的声明和初始化应按从高维到低维的顺序进行</span><br><span class="line">&gt; &#96;int t1[][] &#x3D; new int [][4]; &#x2F;&#x2F;非法, 这与C++不同 &#96;</span><br></pre></td></tr></table></figure>





<h2 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h2><h2 id="深入数组"><a href="#深入数组" class="headerlink" title="深入数组"></a>深入数组</h2><blockquote>
<p>数组引用变量只是一个引用，这个引用变量可以指向任何有效的内存，只有当该引用指向有效内存<br>后，才可通过该数组变量来访问数组元素。</p>
</blockquote>
<blockquote>
<p>实际的数组对象被存储在堆（heap）内存中； 如果引用该数组对象的数组引用变量是一个局部变量，那么它被存储在栈（stack）内存中。</p>
</blockquote>
<h3 id="堆与栈"><a href="#堆与栈" class="headerlink" title="堆与栈"></a>堆与栈</h3><blockquote>
<p>当一个方法执行时， 每个方法都会建立自己的内存栈， 在这个方法内定义的变量将会逐个放入这块栈内存里，随着方法的执行结束，这个方法的内存栈也将自然销毁。因此，所有在方法中定义的局部变量都是放在栈内存中的；当我们在程序中创建一个对象时，这个对象将被保存到运行时数据区中，以便反复利用（因为对象的创建成本通常较大），这个运行时数据区就是堆内存。 堆内存中的对象不会随方法的结束而销毁，即使方法结束后，这个对象还可能被另一个引用变量所引用（在方法的参数传递时很常见），则这个对象依然不会被销毁。 只有当一个对象没有任何引用变量引用它时， 系统的垃圾回收器才会在合适的时候回收它。</p>
</blockquote>
<blockquote>
<p>如果堆内存中数组不再有任何引用变量指向自己，则这个数组将成为垃圾，该数组所占的内存将会<br>被系统的垃圾回收机制回收。因此，为了让垃圾回收机制回收一个数组所占的内存空间，可以将该数组变量赋为 null，也就切断了数组引用变量和实际数组之间的引用关系，实际的数组也就成了垃圾。</p>
</blockquote>
<blockquote>
<blockquote>
<p><strong>必须牢记：定义并初始化一个数组后，在内存中分配了两个空间，一个用于存放数组的引用变量(一般在栈里）；</strong><br><strong>另一个用存放数组本身（在堆里）这部分是在堆内存里运行的，通常无法直接访问它，只能通过数组引用变量来访问，失去引用的数组，就变成了垃圾。</strong></p>
</blockquote>
</blockquote>
<h3 id="基本类型数组；引用类型数组"><a href="#基本类型数组；引用类型数组" class="headerlink" title="基本类型数组；引用类型数组"></a>基本类型数组；引用类型数组</h3><p>**引用类型数组：每个数组元素里存储的还是引用，它指<br>向另一块内存，这块内存里存储了有效数据 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ReferenceArrayTest</span><br><span class="line">&#123;</span><br><span class="line">public static void main(String[] args)</span><br><span class="line">	&#123;</span><br><span class="line">		&#x2F;&#x2F;定义一个 students 数组变量，其类型是 Person[]</span><br><span class="line">		Person[] students;</span><br><span class="line">		&#x2F;&#x2F;执行动态初始化</span><br><span class="line">		students &#x3D; new Person[2];</span><br><span class="line">		&#x2F;&#x2F;创建一个 Person 实例，并将这个 Person 实例赋给 zhang 变量</span><br><span class="line">		Person zhang &#x3D; new Person();</span><br><span class="line">		&#x2F;&#x2F;为 zhang 所引用的 Person 对象的 age、 height 赋值</span><br><span class="line">		zhang.age &#x3D; 15;</span><br><span class="line">		zhang.height &#x3D; 158;</span><br><span class="line">		&#x2F;&#x2F;创建一个 Person 实例，并将这个 Person 实例赋给 lee 变量</span><br><span class="line">		Person lee &#x3D; new Person();</span><br><span class="line">		&#x2F;&#x2F;为 lee 所引用的 Person 对象的 age、 height 赋值</span><br><span class="line">		lee.age &#x3D; 16;</span><br><span class="line">		lee.height &#x3D; 161;</span><br><span class="line">		&#x2F;&#x2F;将 zhang 变量的值赋给第一个数组元素</span><br><span class="line">		students[0] &#x3D; zhang;</span><br><span class="line">		&#x2F;&#x2F;将 lee 变量的值赋给第二个数组元素</span><br><span class="line">		students[1] &#x3D; lee;</span><br><span class="line">		&#x2F;&#x2F;下面两行代码的结果完全一样，因为 lee</span><br><span class="line">		&#x2F;&#x2F;和 students[1]指向的是同一个 Person 实例</span><br><span class="line">		lee.info();</span><br><span class="line">		students[1].info();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>执行 Person[] students;代码时，这行代码仅仅在栈内存中定义了一个引用变量，也就是一个指针，这个指针并未指向任何有效的内存区。<br>直到执行初始化，本程序对 students 数组执行动态初始化，动态初始化由系统为数组元素分配默认的初始值： null，即每个数组元素的值都是 null,<br>接着的代码定义了 zhang 和 lee 两个 Person 实例，定义这两个实例实际上分配了 4 块内存，在栈内存中存储了 zhang 和 lee 两个引用变量，还在堆内存中存储了两个 Person 实例。<br>此时 students 数组的两个数组元素依然是 null，直到程序依次将 zhang 赋给 students 数组的第一个元素，把 lee 赋给 students 数组的第二个元素， students 数组的两个数组元素将会指向有效的内存区。</p>
</blockquote>
<h3 id="投票统计"><a href="#投票统计" class="headerlink" title="投票统计"></a>投票统计</h3><blockquote>
<p>0~9,统计各出现多少次</p>
</blockquote>
<h3 id="素数-1"><a href="#素数-1" class="headerlink" title="素数"></a>素数</h3><blockquote>
<p>1.偶数不是素数；去掉偶数后，从3到x-1,每次加2</p>
<p>2.. 无需到x-1，只要到sqrt(x)遍；</p>
</blockquote>
<p><strong>前50</strong>个素数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">int cnt&#x3D;1;</span><br><span class="line">primes[0]&#x3D;2;</span><br><span class="line">LOOP1:</span><br><span class="line">		for(int x&#x3D;3;cnt&lt;50;x++)&#x2F;&#x2F;取数从3开始，小于cnt个;x</span><br><span class="line">		&#123;</span><br><span class="line">			for(int i&#x3D;0;i&lt;cnt;i++)&#x2F;&#x2F;判断是不是素数 i为数组下标</span><br><span class="line">			&#123;</span><br><span class="line">				if(x%primes[i]&#x3D;&#x3D;0)</span><br><span class="line">				&#123;</span><br><span class="line">					continue LOOP1;</span><br><span class="line">				&#125;</span><br><span class="line">					</span><br><span class="line">			&#125;</span><br><span class="line">			primes[cnt++]&#x3D;x;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>



<p><strong>构造素数表</strong>：100以内</p>
<ol>
<li>素数的倍数都不是素数</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">boolean[] isPrime&#x3D; new boolean[100];</span><br><span class="line">		for(int i&#x3D;0;i&lt;isPrime.length;i++)&#x2F;&#x2F;设为全是素数</span><br><span class="line">		&#123;</span><br><span class="line">			isPrime[i]&#x3D;true;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		for(int i&#x3D;2;i&lt;isPrime.length;i++)&#x2F;&#x2F;i*k倍</span><br><span class="line">		&#123;</span><br><span class="line">			if(isPrime[i])</span><br><span class="line">			&#123;</span><br><span class="line">				for(int k&#x3D;2;i*k&lt;isPrime.length ;k++)</span><br><span class="line">				&#123;</span><br><span class="line">					isPrime[i*k]&#x3D;false;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		for(int i&#x3D;2;i&lt;isPrime.length;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			if(isPrime[i]&#x3D;&#x3D;true)</span><br><span class="line">			&#123;</span><br><span class="line">				System.out.print(i+&quot; &quot;);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>





<h1 id="使用对象"><a href="#使用对象" class="headerlink" title="使用对象"></a>使用对象</h1><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><blockquote>
<p>字符串变量和数组变量类似，它并不存放字符串，不是字符串的所有者，它是字符串的管理者。</p>
</blockquote>
<blockquote>
<p>Java的字符串还是一种特殊的“不可变”对象，所有的字符串操作都是产生一个新的字符串，而不是对原来的字符串的修改。对这一点的理解颇为重要。</p>
</blockquote>
<p>String s=new String(“hhhhh”);</p>
<p>String s = “oooo”;</p>
<h2 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h2><p>由于String 的+ 操作比较大。</p>
<p>所以：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">StringBuffer sb&#x3D;new StringBuffer();</span><br><span class="line">sb.append();</span><br><span class="line">...</span><br><span class="line">sb.toString();&#x2F;&#x2F;产生了String对象</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>







<blockquote>
<p>字符也是Java中基础的数据类型之一，Java采用Unicode16表达字符，在所有的机器上，不管CPU、操作系统和本地语言，字符类型是一致和统一的。<br>一个字符的常量是用单引号包围起来的一个字符，如’a’、’*’、’好’。一个汉字也是Unicode的一个字符，所以也是Java的一个字符。</p>
</blockquote>
<blockquote>
<p>回车：到行的首字符 \r<br>换行：换到新行 \n</p>
</blockquote>
<h2 id="包裹类型"><a href="#包裹类型" class="headerlink" title="包裹类型"></a>包裹类型</h2><p>对于基本数据类型，Java提供了对应的包裹(wrap)类型。这些包裹类型将一个基本数据类型的数据转换成对象的形式，从而使得它们可以像对象一样参与运算和传递。下表列出了基本数据类型所对应的包裹类型：</p>
<table>
<thead>
<tr>
<th>基本类型</th>
<th>包裹类型</th>
</tr>
</thead>
<tbody><tr>
<td>boolean</td>
<td>Boolean</td>
</tr>
<tr>
<td>char</td>
<td>Character</td>
</tr>
<tr>
<td>byte</td>
<td>Byte</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td>Integer</td>
</tr>
<tr>
<td>long</td>
<td>Long</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
</tr>
</tbody></table>
<p>我们看到，除了int和char以外，包裹类型就是把基本类型的名字的第一个字母大写。在Java的系统类库中，所有第一个字母大写的，都是类的名字。所以在编辑程序的时候，一定要小心大小写，以免一不小心犯错。</p>
<h2 id="code-2"><a href="#code-2" class="headerlink" title="code"></a>code</h2><p>字符：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package oh;</span><br><span class="line"></span><br><span class="line">public class Char &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		char a&#x3D;&#39;a&#39;;</span><br><span class="line">		System.out.println(a+1);&#x2F;&#x2F;字符加数字，结果是数字</span><br><span class="line">		System.out.println(&#39;A&#39;+1);</span><br><span class="line">		</span><br><span class="line">		char b;</span><br><span class="line">		b&#x3D;(char)(a+111);</span><br><span class="line">		</span><br><span class="line">		System.out.println(b);</span><br><span class="line">		</span><br><span class="line">		System.out.println(&#39;a&#39;&gt;&#39;b&#39;);</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p><strong>类，字段，方法</strong></p>
<blockquote>
<p>•类是组成Java程序的基本要素<br>• 是一类对象的原型<br>• 它封装了一类对象的状态和方法<br>它将变量与函数封装到一个类中</p>
</blockquote>
<blockquote>
<p>• 字段（field）是类的属性，是用变量来表示的。<br>字段又称为域、域变量、属性、成员变量等<br>• 方法（method）是类的功能和操作, 是用函数来表示的</p>
</blockquote>
<blockquote>
<p>• 构造方法（constructor )是一种特殊的方法<br>• 用来初始化（new)该类的一个新的对象<br>• 构造方法和类名同名，而且不写返回数据类型。<br>• Person( String n, int a ){<br>• name = n;<br>• age = a;<br>• }</p>
</blockquote>
<blockquote>
<p>• 一般情况下，类都有一个至多个构造方法<br>• 如果没有定义任何构造方法，系统会自动产生一个构造方法，称为默<br>认构造方法（default constructor）。<br>• 默认构造方法不带参数，并且方法体为空。</p>
</blockquote>
<blockquote>
<p>• 方法重载（overloading)：多个方法有相同的名字，编译时能识别出<br>来。<br>• 这些方法的签名（signature)不同，或者是参数个数不同，或者是参<br>数类型不同。<br>• 通过方法重载可以实现多态（polymorphism） 。</p>
</blockquote>
<h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>1．在方法及构造方法中，使用this来访问字段及方法</p>
<p>2．使用this解决局部变量与域同名的问题<br>• 使用this还可以解决局部变量（方法中的变量）或参数变量与域变<br>量同名的问题。如，在构造方法中，经常这样用：<br>• Person( int age, String name ) {<br>• this.age = age;<br>• this.name = name;<br>• }<br>• 这里，this.age表示域变量，而age表示的是参数变量。</p>
<p>3．构造方法中，用this调用另一构造方法<br>• 构造方法中，还可以用this来调用另一构造方法。如：<br>• Person( )<br>• {<br>• this( 0, “” );<br>• ……<br>• }<br>• 在构造方法中调用另一构造方法，则这条调用语句必须放在第一句。</p>
<blockquote>
<p>this 关键字总是指向调用该方法的对象。根据 this 出现位置的不同，<br>this 作为对象的默认引用有两种情形：<br>¾ 构造器中引用该构造器正在初始化的对象；<br>¾ 在方法中引用调用该方法的对象。<br>this 关键字最大的作用就是让类中一个方法， 访问该类里的另一个方法或 Field。 </p>
</blockquote>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>Java的函数必须定义在类的内部，成为类的成员。定义一个函数，要像这样写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;返回类型&gt; &lt;方法名称&gt;(&lt;参数表&gt;) &#123;</span><br><span class="line"></span><br><span class="line">	&lt;方法体&gt;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>返回类型是这个函数运行结束时要返回给调用者的数据的类型，函数可以返回基本数据类型、对象或者void。返回void表示这个函数不返回任何值。函数名称是一个Java名字，一样要遵循和变量一样的命名规则。参数表是0个或1个或多个参数定义，用逗号’,’分隔。</p>
</blockquote>
<blockquote>
<p>在这个阶段，我们要在所有的函数的返回类型前面加上关键字“static”。static表示这个函数属于这个类，而不属于这个类的任何对象，因此我们才可以不制造这个类的对象，而直接从main()函数中调用它。</p>
</blockquote>
<blockquote>
<p>当一个函数被调用时，程序就转到这个函数中去运行，函数体里的语句就一条一条地被调用。一旦函数运行结束，就又回到调用它的地方去继续运行。</p>
</blockquote>
<blockquote>
<p>**  形参与实参，参数与值 **<br>java 永远都是值传递！！！<br>那么当数组或是对象呢？？？</p>
</blockquote>
<blockquote>
<p>本地变量默认不会初始化。<br>而函数的参数在进入函数的时候初始化了。</p>
</blockquote>
<p><strong>方法位置</strong>：</p>
<p>在面向对象编程语言里，类才是一等公民，整个系统由一个个的类组成。因此在 Java 语言里，方法不能独立存在，方法必须属于类或对象。 </p>
<blockquote>
<p>因此，如果需要定义方法，则只能在类体内定义，不能独立定义一个方法。一旦将一个方法定义在<br>某个类的类体内，如果这个方法使用了 static 修饰，则这个方法属于这个类，否则这个方法属于这个类<br>的实例 </p>
</blockquote>
<blockquote>
<p>方法不能独立定义，方法只能在类体里定义。<br>从逻辑意义上来看，方法要么属于该类本身，要么属于该类的一个对象。<br>永远不能独立执行方法，执行方法必须使用类或对象作为调用者</p>
</blockquote>
<p><strong>值传递</strong>: Java 方法的参数传递机制来控制的， Java 里方法的参数传递方式只有一种：值传递。所谓值传递，就是将实际参数值的副本（复制品）传入方法内，而参数本身不会受到任何影响。</p>
<h2 id="形参数量可变："><a href="#形参数量可变：" class="headerlink" title="形参数量可变："></a>形参数量可变：</h2><blockquote>
<p>从 JDK 1.5 之后， Java 允许定义形参个数可变的参数，从而允许为方法指定数量不确定的形参。如果在定义方法时，在最后一个形参的类型后增加三点（…），则表明该形参可以接受多个参数值，多个参数值被当成数组传入。下面程序定义了一个形参个数可变的方法。</p>
</blockquote>
<h2 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h2><blockquote>
</blockquote>
<p>方法重载的要求就是两同一不同：同一个类中方法名相同，参数列表不同。<strong>至于方法的其他部分，<br>如方法返回值类型、修饰符等，与方法重载没有任何关系</strong>。</p>
<h2 id="成员变量和局部变量"><a href="#成员变量和局部变量" class="headerlink" title="成员变量和局部变量"></a>成员变量和局部变量</h2><p><strong>成员</strong>：当系统加载类或创建该类的实例时，系统自动为成员变量分配内存空间，并在分配内存空间后，自动为成员变量指定初始值。</p>
<p><strong>局部</strong>：局部变量定义后，必须经过显式初始化后才能使用，系统不会为局部变量执行初始化。这意味着定义局部变量后，系统并未为这个变量分配内存空间，直到等到程序为这个变量赋初始值时，系统才会为局部变量分配内存，并将初始值保存到这块内存中。</p>
<h1 id="容器（集合）"><a href="#容器（集合）" class="headerlink" title="容器（集合）"></a>容器（集合）</h1><p>linked链表，双向的</p>
<blockquote>
<p>容器是现代程序设计非常基础而重要的手段。</p>
</blockquote>
<blockquote>
<p>所谓容器，就是“放东西的东西”。数组可以看作是一种容器，但是数组的元素个数一旦确定就无法改变，这在实际使用中是很大的不足。一般意义上的容器，是指具有自动增长容量能力的存放数据的一种数据结构。在面向对象语言中，这种数据结构本身表达为一个对象。所以才有“放东西的东西”的说法。</p>
</blockquote>
<blockquote>
<p>Java具有丰富的容器，Java的容器具有丰富的功能和良好的性能。熟悉并能充分有效地利用好容器，是现代程序设计的基本能力。</p>
</blockquote>
<blockquote>
<p>顺序容器，即放进容器中的对象是按照指定的顺序（放的顺序）排列起来的，而且允许具有相同值的多个对象存在。</p>
</blockquote>
<p><em>在一些书中，将容器（英文为collection或container）翻译为“集合”，由于数学中的集合（Set）也是一种特定的容器类型，我们认为将collection翻译为集合是不恰当的。所以我们只会使用容器一词。</em></p>
<p><strong>Iterator</strong> :</p>
<p><strong>迭代器 Iterator (所有的Collection都能产生）</strong><br>Iterator iterator = iterable.iterator();//得到迭代器<br>while( iterator.hasNext()) doSomething( iterator.next());//遍历 ，iterator.next()得到里面的东西</p>
<ul>
<li>iterator.hasNext()//返回Boolean，是否有东西</li>
<li>iterator.next()//得到东西</li>
</ul>
<h2 id="对象-for-each循环："><a href="#对象-for-each循环：" class="headerlink" title="对象 for-each循环："></a>对象 for-each循环：</h2><h3 id="要个可迭代对象-enhanced-for-或叫for-each"><a href="#要个可迭代对象-enhanced-for-或叫for-each" class="headerlink" title="要个可迭代对象(enhanced for)或叫for-each"></a>要个可迭代对象(enhanced for)或叫for-each</h3><p>因为是管理者，管理者管理的东西都是同一个的话，就可以改变堆里的值了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用for-each：</span><br><span class="line">&#x2F;&#x2F;for( Element e : list ) doSomething(e);</span><br><span class="line">  for (Photo photo : album)&#123;</span><br><span class="line">  System.out.println( photo.toString() );</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> 编译器生成了Iterator的while(hasNext（)) &#123;….next() &#125;</span><br></pre></td></tr></table></figure>



<h2 id="Collection-接口"><a href="#Collection-接口" class="headerlink" title="Collection 接口"></a>Collection 接口</h2><p><img src="/images/javaweb/a6.png"></p>
<blockquote>
<p>Collectiion,接口，有两个子接口：</p>
<ul>
<li>List: (Collection的子接口)记录元素的保存顺序，且允许有重复元素 </li>
<li>Set: (Collection的子接口) 不记录元素的保存顺序，且不允许有重复元素 </li>
</ul>
</blockquote>
<p><strong>api:</strong></p>
<p>+add(element : Object) : boolean<br>+remove(element : Object) : boolean<br>+size() : int<br>+isEmpty() : boolean<br>+contains(element : Object) : boolean<br>+iterator() : Iterator</p>
<h3 id="List-接口-线性表（linear-list）"><a href="#List-接口-线性表（linear-list）" class="headerlink" title="List 接口 线性表（linear list）"></a>List 接口 线性表（linear list）</h3><blockquote>
<p>主要的实现类是 **<u>ArrayList. LinkedList</u>**， 以及早期的Vector </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface List&lt;E&gt; extends Collection&lt;E&gt; &#123;</span><br><span class="line"> E get(int index);</span><br><span class="line"> E set(int index, E element);</span><br><span class="line"> void add(int index, E element);</span><br><span class="line"> E remove(int index);</span><br><span class="line"> int indexOf(Object o);</span><br><span class="line">....</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="顺序容器-ArrayList"><a href="#顺序容器-ArrayList" class="headerlink" title="顺序容器 ArrayList"></a>顺序容器 ArrayList</h2><p>泛型；</p>
<p>定义的时候，得给出两个类型：容器的类型，元素的类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line"></span><br><span class="line">ArrayList&lt;String&gt; notes&#x3D;new ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">这个&lt;&gt;读作of 用来存放String的</span><br><span class="line"></span><br><span class="line">方法：</span><br><span class="line"></span><br><span class="line">notes.add();</span><br><span class="line">notes.size();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="ArrayList-操作"><a href="#ArrayList-操作" class="headerlink" title="ArrayList 操作"></a>ArrayList 操作</h3><p>索引也是从零开始的。下标也会越界。</p>
<p>方法：<br>add(index,string);// 把原先的东西往后推，腾出来放<br>get(index);//得到index 位置的内容</p>
<p>remove(int)// 删除内容，返回所删除的内容，删了之后，下标往前推</p>
<p>.toArray(a) //把内容给a</p>
<h2 id="集合容器-set"><a href="#集合容器-set" class="headerlink" title="集合容器 set"></a>集合容器 set</h2><blockquote>
<p>两个重要实现：</p>
<ul>
<li>HashSet，靠哈希码实现</li>
<li>TreeSet，靠TreeMap实现，树实现</li>
</ul>
</blockquote>
<blockquote>
<p>集合就是数学中的集合的概念：所有的元素都具有唯一的值，元素在其中没有顺序。</p>
<p>也就是，</p>
<ul>
<li>hashCode()不等</li>
<li>如果hashCode相等，再看equals 或者 == 是否为false</li>
</ul>
<blockquote>
<p><strong>什么叫无序？</strong>;无法保证元素的添加顺序，但还是按照一定的算法来排的</p>
<p>LinkedHashset : 保证元素添加的自然顺序</p>
<p>TreeSet : 保证元素的自然顺序</p>
<p>HashSet底层维护的table数组添加的顺序是由加入的字符串中的具体字符以及字符串的长度决定的</p>
</blockquote>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HashSet</span><br><span class="line"></span><br><span class="line">HashSet&lt;String&gt; hs&#x3D;new HashSet&lt;String&gt;();</span><br><span class="line">hs.add(s);</span><br><span class="line">hs.contains(s);&#x2F;&#x2F;retrun boolean</span><br><span class="line">for-each可以用</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="Map-映射"><a href="#Map-映射" class="headerlink" title="Map 映射"></a>Map 映射</h2><blockquote>
<p>两个实现HashMap,TreeMap</p>
<p>键只能一个。</p>
</blockquote>
<ul>
<li><strong>键-值对（key-value pair）的集合</strong> </li>
</ul>
<p>其中可以取到</p>
<ul>
<li>entrySet()项 的集合</li>
<li>keySet()键的集合</li>
<li>values()值的集合</li>
</ul>
<p> Map.Entry是一个嵌套接口 Map里定义的接口</p>
<p><img src="/images/javaweb/a7.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Map&lt;String,String&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br></pre></td></tr></table></figure>



<h3 id="散列表-HashMap"><a href="#散列表-HashMap" class="headerlink" title="散列表 HashMap"></a>散列表 HashMap</h3><blockquote>
<p>传统意义上的Hash表，是能以int做值，将数据存放起来的数据结构。Java的Hash表可以以任何实现了hash()函数的类的对象做值来存放对象。</p>
</blockquote>
<blockquote>
<p>Hash表是非常有用的数据结构，熟悉它，充分使用它，往往能起到事半功倍的效果。</p>
</blockquote>
<blockquote>
<p><strong>美元里</strong><br>硬币1分 peny<br>5分    nickel<br>10分  dime<br>25分    quarter</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap&lt;k,value&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> HashMap&lt;Integer,String&gt; coinnames=<span class="keyword">new</span> HashMap&lt;Integer,String&gt;();<span class="comment">//Integer,String  都是对象</span></span><br><span class="line"></span><br><span class="line">方法：</span><br><span class="line">coinnames.put(,);<span class="comment">//放入东西</span></span><br><span class="line">coinnames.get();<span class="comment">//没有的话就是null 由键得值，参数是key</span></span><br><span class="line"></span><br><span class="line">coinnames.containsKey(<span class="keyword">int</span>);<span class="comment">//boolean 存在这个键吗</span></span><br><span class="line"></span><br><span class="line">coinnames.keySet().size()<span class="comment">//coinnames.keySet()得到一个HashMap对象,size()得到元素个数</span></span><br><span class="line"></span><br><span class="line">code:</span><br><span class="line">coinnames.put(<span class="number">1</span>,<span class="string">&quot;rrr&quot;</span>);</span><br><span class="line"></span><br><span class="line">======================</span><br><span class="line"></span><br><span class="line">System.out.println(coinnames.keySet());</span><br><span class="line">System.out.println(coinnames);</span><br><span class="line">结果：</span><br><span class="line">[<span class="number">1</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">25</span>, <span class="number">10</span>]</span><br><span class="line">&#123;<span class="number">1</span>=penny, <span class="number">50</span>=五毛, <span class="number">5</span>=nickel, <span class="number">25</span>=quarter, <span class="number">10</span>=dime&#125;</span><br><span class="line">》》由toString()方法来实现</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="遍历HashMap"><a href="#遍历HashMap" class="headerlink" title="遍历HashMap"></a>遍历HashMap</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(Integer k:coinnames.keySet())</span><br><span class="line">&#123;</span><br><span class="line">    String s&#x3D;coinnames.get(k);</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h3><blockquote>
<p>实现了Map,及Dictionary接口。</p>
</blockquote>
<h2 id="Stack与Queue"><a href="#Stack与Queue" class="headerlink" title="Stack与Queue"></a>Stack与Queue</h2><h3 id="Stack-栈继承自Vector属于LIst"><a href="#Stack-栈继承自Vector属于LIst" class="headerlink" title="Stack,栈继承自Vector属于LIst"></a>Stack,栈继承自Vector属于LIst</h3><p>java.util.Stack;</p>
<blockquote>
<p>是遵循“后进先出” (Last In First Out, LIFO)原则 .</p>
</blockquote>
<p><strong>三个方法</strong>：</p>
<p>public Object push(Object item)：将指定对象压入栈中。<br>public Object pop()：将 栈最上面的元素从栈中取出，并返回这个对象。<br>public boolean empty()：判断栈中没有对象元素。 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import java.util.Stack;</span><br><span class="line"></span><br><span class="line">Stack&lt;String&gt; stk&#x3D;new Stack&lt;&gt;();</span><br></pre></td></tr></table></figure>



<h3 id="Queue，队列，接口，实现类LinkedList"><a href="#Queue，队列，接口，实现类LinkedList" class="headerlink" title="Queue，队列，接口，实现类LinkedList"></a>Queue，队列，接口，实现类LinkedList</h3><blockquote>
<p>import java.util.LinkedList;<br>import java.util.Queue;</p>
</blockquote>
<p>队列遵循<strong>“先进先出”</strong> (First In First Out，FIFO)的原则<br>固定在**一端输入数据(称为入队)，另一端输出数据(称为出队)**。 </p>
<p>函数：</p>
<table>
<thead>
<tr>
<th>功能</th>
<th>可抛出异常的</th>
<th>返回元素的，没有的话返回null</th>
</tr>
</thead>
<tbody><tr>
<td>Insert（插入）</td>
<td>add(e)</td>
<td>offer(e)</td>
</tr>
<tr>
<td>Remove（移除）</td>
<td>remove()</td>
<td>poll()</td>
</tr>
<tr>
<td>Examine（检查）</td>
<td>element()</td>
<td>peek()</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Queue&lt;String&gt; que&#x3D;new LinkedList&lt;&gt;();</span><br></pre></td></tr></table></figure>








<h2 id="对象数组："><a href="#对象数组：" class="headerlink" title="对象数组："></a>对象数组：</h2><blockquote>
<p><strong>当数组的元素的类型是类的时候，<u>数组</u>的每一个元素其实只是对象的管理者而不是对象本身。因此，仅仅创建数组并没有创建其中的每一个对象！</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String[] a&#x3D;new String[10];</span><br><span class="line">a[0].length()会出错。</span><br><span class="line">里面存放的都是null.</span><br></pre></td></tr></table></figure>







<h2 id="直接输出容器"><a href="#直接输出容器" class="headerlink" title="直接输出容器"></a>直接输出容器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; a&#x3D;new ArrayList&lt;String&gt;();</span><br><span class="line">HashSet&lt;String&gt; b&#x3D;new HashSet&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">a.add(&quot;hi&quot;);</span><br><span class="line">a.add(&quot;hi&quot;);</span><br><span class="line">a.add(&quot;hey&quot;);</span><br><span class="line"></span><br><span class="line">b.add(&quot;hi&quot;);</span><br><span class="line">b.add(&quot;hi&quot;);</span><br><span class="line">b.add(&quot;hey&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(a);&#x2F;&#x2F;放在了System.out.println()里面了。</span><br><span class="line">System.out.println(b);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">[hi, hi, hey]</span><br><span class="line">[hi, hey]</span><br></pre></td></tr></table></figure>





<h2 id="早期集合对比"><a href="#早期集合对比" class="headerlink" title="早期集合对比"></a>早期集合对比</h2><p>• Vector， 现多用 ArrayList<br><strong>相当于动态数组</strong>(比JDK1.0中的 ArrayList好), elementAt,<br>• Stack， 现多用 LinkedList<br>Stack是Vector的子类, push, pop, peek<br>• Hashtable， 现多用 HashMap<br>Hashtable实现Map接口, 参见Properties类<br>• Enumeration， 现多用Iterator<br>Enumeration用另一种方式实现Iterator的功能<br>如Vector可以得到枚举器<br><code>Enumeration&lt;E&gt; e = v.elements();</code><br>while(e.hasMoreElements()) doSomething(e.nextElement()) </p>
<h1 id="封装Encapsulation"><a href="#封装Encapsulation" class="headerlink" title="封装Encapsulation"></a>封装Encapsulation</h1><blockquote>
<p>它指的是将对象的状态信息隐藏在对象内部，不允许外部程序直接访问对象内部信息，而是通过该类所提供的方法来实现对内部信息的操作和访问。</p>
</blockquote>
<p>封装是面向对象编程语言对客观世界的模拟，客观世界里的 Field 都是被隐藏在对象内部的，外界<br>无法直接操作和修改。就如刚刚说的 Person 对象的 age Field，只能随着岁月的流逝， age Field 才会增加，通常不能随意修改 Person 对象的 age Field。对一个类或对象实现良好的封装，可以实现以下目的。</p>
<ul>
<li>隐藏类的实现细节。</li>
<li>让使用者只能通过事先预定的方法来访问数据，从而可以在该方法里加入控制逻辑，限制对 Field<br>的不合理访问。</li>
<li>可进行数据检查，从而有利于保证对象信息的完整性。</li>
<li>便于修改，提高代码的可维护性。</li>
</ul>
<p>为了实现良好的封装，需要从两个方面考虑。</p>
<ul>
<li>将对象的 Field 和实现细节隐藏起来，不允许外部直接访问。</li>
<li>把方法暴露出来，让方法来控制对这些 Field 进行安全的访问和操作。<br>因此，封装实际上有两个方面的含义：把该隐藏的隐藏起来，把该暴露的暴露出来。这两个方面都<br>需要通过使用 Java 提供的访问控制符来实现</li>
</ul>
<h2 id="使用访问控制符"><a href="#使用访问控制符" class="headerlink" title="使用访问控制符"></a>使用访问控制符</h2><blockquote>
<p>private（当前类访问权限）：如果类里的一个成员（包括 Field、方法和构造器等）使用 private<br>访问控制符来修饰，则这个成员只能在当前类的内部被访问。很显然，这个访问控制符用于修<br>饰 Field 最合适，使用它来修饰 Field 就可以把 Field 隐藏在该类的内部。</p>
</blockquote>
<blockquote>
<p>default（包访问权限）：如果类里的一个成员（包括 Field、方法和构造器等）或者一个外部类不<br>使用任何访问控制符修饰，我们就称它是包访问权限， default 访问控制的成员或外部类可以被<br>相同包下的其他类访问。</p>
</blockquote>
<blockquote>
<p>protected（子类访问权限）：如果一个成员（包括 Field、方法和构造器等）使用 protected 访问<br>控制符修饰，那么这个成员既可以被同一个包中的其他类访问，也可以被不同包中的子类访问。<br>在通常情况下，如果使用 protected 来修饰一个方法，通常是希望其子类来重写这个方法。</p>
</blockquote>
<blockquote>
<p>public（公共访问权限）：这是一个最宽松的访问控制级别，如果一个成员（包括 Field、方法和<br>构造器等）或者一个外部类使用 public 访问控制符修饰，那么这个成员或外部类就可以被所有<br>类访问，不管访问类和被访问类是否处于同一个包中，是否具有父子继承关系。</p>
</blockquote>
<p><strong>建议</strong>：</p>
<p>类里的绝大部分 Field 都应该使用 private 修饰，只有一些 static 修饰的、类似全局变量的 Field，<br>才可能考虑使用 public 修饰。除此之外，有些方法只是用于辅助实现该类的其他方法，这些方<br>法被称为工具方法，工具方法也应该使用 private 修饰。</p>
<p>如果某个类主要用做其他类的父类，该类里包含的大部分方法可能仅希望被其子类重写，而不<br>想被外界直接调用，则应该使用 protected 修饰这些方法。</p>
<p>希望暴露出来给其他类自由调用的方法应该使用 public 修饰。 因此， 类的构造器通过使用 public<br>修饰，从而允许在其他地方创建该类的实例。因为外部类通常都希望被其他类自由使用，所以<br>大部分外部类都使用 public 修饰。</p>
<h2 id="类的访问修饰符public"><a href="#类的访问修饰符public" class="headerlink" title="类的访问修饰符public"></a>类的访问修饰符public</h2><p>对于<strong>外部类</strong>而言，它也可以使用访问控制符修饰，但外部类只能有两种访问控制级别：<code> public 和默认</code>，外部类不能使用 private 和 protected 修饰，<u>因为外部类没有处于任何类的内部，也就没有其所在类的内部、所在类的子类两个范围，因此 private 和 protected 访问控制符对外部类没有意义</u>。外部类可以使用 public 和包访问控制权限，使用 public 修饰的外部类可以被所有类使用，如声明变量、创建实例；不使用任何访问控制符修饰的外部类只能被同一个包中的其他类使用。</p>
<h2 id="package-与-import"><a href="#package-与-import" class="headerlink" title="package   与 import"></a>package   与 import</h2><blockquote>
<p>package 语句必须作为源文件的第一条非注释性语句，一个源文件只能指定一个包，即只能包含一<br>条 package 语句，该源文件中可以定义多个类，则这些类将全部位于该包下。<br>如果没有显式指定 package 语句，则处于默认包下。在实际企业开发中，通常不会把类定义在默认<br>包下</p>
</blockquote>
<blockquote>
<p>同一个包下的类可以自由访问，例如下面的 HelloTest 类，如果把它也放在 lee 包下，则这个 HelloTest类可以直接访问 Hello 类，无须添加包前缀。</p>
</blockquote>
<p><strong>import 语句中的星号（<em>）只能代表类，不能代表包。因此使用 import lee.</em>;语句时，它表明导<br>入 lee 包下的所有类</strong></p>
<p><strong>导入静态方法</strong>：<br>静态导入使用 import static 语句，静态导入也有两种语法，分别用于导入指定类的单个静态 Field、<br>方法和全部静态 Field、方法，其中导入指定类的单个静态 Field、方法的语法格式如下：<br><code>import static package.subpackage...ClassName.fieldName|methodName;</code></p>
<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>解决代码复制，代码复制是代码质量不良的一种体现</p>
<p>将来要维护时，麻烦，不具有可扩展性</p>
<p>父类有什么，子类就有什么，能不能用呢？？访问权限问题</p>
<p><strong>继承表达了一种is-a关系，就是说，子类的对象可以被看作是父类的对象。比如鸡是从鸟派生出来的，因此任何一只都可以被称作是一只鸟。但是反过来不行，有些鸟是鸡，但并不是所有的鸟都是鸡。如果你设计的继承关系，导致当你试图把一个子类的对象看作是父类的对象时显然很不合逻辑，比如你让鸡类从水果类得到继承，然后你试图说：这只本鸡是一种水果，所以这本鸡煲就像水果色拉。这显然不合逻辑，如果出现这样的问题，那就说明你的类的关系的设计是不正确的。Java的继承只允许单继承，即一个类只能有一个父类。</strong></p>
<h2 id="子类与父类的关系"><a href="#子类与父类的关系" class="headerlink" title="子类与父类的关系"></a>子类与父类的关系</h2><blockquote>
<p>对理解继承来说，最重要的事情是，知道哪些东西被继承了，或者说，子类从父类那里得到了什么。答案是：所有的东西，所有的父类的成员，包括变量和方法，都成为了子类的成员，<strong>除了构造方法。构造方法是父类所独有的，因为它们的名字就是类的名字，所以父类的构造方法在子类中不存在。</strong>除此之外，子类继承得到了父类所有的成员。</p>
</blockquote>
<blockquote>
<p><strong>但是得到不等于可以随便使用</strong>。每个成员有不同的访问属性，子类继承得到了父类所有的成员，但是不同的访问属性使得子类在使用这些成员时有所不同：有些父类的成员直接成为子类的对外的界面，有些则被深深地隐藏起来，即使子类自己也不能直接访问。下表列出了不同访问属性的父类成员在子类中的访问属性：</p>
</blockquote>
<table>
<thead>
<tr>
<th>父类成员访问属性</th>
<th>在父类中的含义</th>
<th>在子类中的含义</th>
</tr>
</thead>
<tbody><tr>
<td>private</td>
<td>只有自己可以访问</td>
<td>不能访问</td>
</tr>
<tr>
<td>缺省</td>
<td>只有包内其它类可以访问</td>
<td>如果子类与父类在同一个包内：只有包内其它类可以访问 否则：相当于private，不能访问</td>
</tr>
<tr>
<td>protected</td>
<td>只有包内其它类、自己和子类可以访问</td>
<td>只有包内其它类、自己和子类可以访问</td>
</tr>
</tbody></table>
<p>public的成员直接成为子类的public的成员，protected的成员也直接成为子类的protected的成员。Java的protected的意思是包内和子类可访问，所以它比缺省的访问属性要宽一些。而对于父类的缺省的未定义访问属性的成员来说，他们是在父类所在的包内可见，如果子类不属于父类的包，那么在子类里面，这些缺省属性的成员和private的成员是一样的：不可见。父类的private的成员在子类里仍然是存在的，只是子类中不能直接访问。我们不可以在子类中重新定义继承得到的成员的访问属性。<strong>如果我们试图重新定义一个在父类中已经存在的成员变量，那么我们是在定义一个与父类的成员变量完全无关的变量，在子类中我们可以访问这个定义在子类中的变量，在父类的方法中访问父类的那个。尽管它们同名但是互不影响。</strong></p>
<blockquote>
<p>在构造一个子类的对象时，父类的构造方法也是会被调用的，而且父类的构造方法在子类的构造方法之前被调用。在程序运行过程中，子类对象的一部分空间存放的是父类对象。因为子类从父类得到继承，在子类对象初始化过程中可能会使用到父类的成员。<strong>所以父类的空间正是要先被初始化</strong>的，然后子类的空间才得到初始化。在这个过程中，<strong>如果父类的构造方法需要参数，如何传递参数就很重要了。</strong></p>
</blockquote>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>定义初始化，构造器</p>
<p>super() 默认是这个。</p>
<blockquote>
<p>类是规则，用来制造对象的规则。我们不断地定义类，用定义的类制造一些对象。类定义了对象的属性和行为，就像图纸决定了房子要盖成什么样子。</p>
</blockquote>
<blockquote>
<p>一张图纸可以盖很多房子，它们都是相同的房子，但是坐落在不同的地方，会有不同的人住在里面。假如现在我们想盖一座新房子，和以前盖的房子很相似，但是稍微有点不同。任何一个建筑师都会拿以前盖的房子的图纸来，稍加修改，成为一张新图纸，然后盖这座新房子。所以一旦我们有了一张设计良好的图纸，我们就可以基于这张图纸设计出很多相似但不完全相同的房子的图纸来。</p>
</blockquote>
<blockquote>
<p>基于已有的设计创造新的设计，就是面向对象程序设计中的继承。在继承中，新的类不是凭空产生的，而是基于一个已经存在的类而定义出来的。通过继承，新的类自动获得了基础类中所有的成员，包括成员变量和方法，包括各种访问属性的成员，无论是public还是private。当然，在这之后，程序员还可以加入自己的新的成员，包括变量和方法。显然，通过继承来定义新的类，远比从头开始写一个新的类要简单快捷和方便。继承是支持代码重用的重要手段之一。</p>
</blockquote>
<blockquote>
<p>类这个词有分类的意思，具有相似特性的东西可以归为一类。比如所有的鸟都有一些共同的特性：有翅膀、下蛋等等。鸟的一个子类，比如鸡，具有鸟的所有的特性，同时又有它自己的特性，比如飞不太高等等；而另外一种鸟类，比如鸵鸟，同样也具有鸟类的全部特性，但是又有它自己的明显不同于鸡的特性。</p>
</blockquote>
<blockquote>
<p>如果我们用程序设计的语言来描述这个鸡和鸵鸟的关系问题，首先有一个类叫做“鸟”，它具有一些成员变量和方法，从而阐述了鸟所应该具有的特征和行为。然后一个“鸡”类可以从这个“鸟”类派生出来，它同样也具有“鸟”类所有的成员变量和方法，然后再加上自己特有的成员变量和方法。无论是从“鸟”那里继承来的变量和方法，还是它自己加上的，都是它的变量和方法。</p>
</blockquote>
<h2 id="继承概述"><a href="#继承概述" class="headerlink" title="继承概述"></a>继承概述</h2><blockquote>
<p>• 继承(inheritance)是面向对象的程序设计中最为重要的特征之一<br>• 子类（subclass），父类或超类（superclass）<br>父类包括所有直接或间接被继承的类</p>
</blockquote>
<p><strong>Java支持单继承：一个类只能有一个直接父类。</strong></p>
<blockquote>
<p>• Java中的继承是通过extends关键字来实现的<br>• class Student extends Person {<br>• ……<br>• }<br>• 如果没有extends子句，则该类默认为java.lang.Object的子类。<br>所有的类都是通过直接或间接地继承java.lang.Object得到的。</p>
</blockquote>
<h2 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h2><blockquote>
<p>• 1．字段的继承<br> 子类可以继承父类的所有字段<br> Student自动具有Person的属性（name，age）</p>
</blockquote>
<blockquote>
<p>• 2. 字段的隐藏<br> 子类重新定义一个与从父类那里继承来的域变量完全相同的变量，称为域的隐藏。域的隐藏在实际编程中用得<br>较少。</p>
</blockquote>
<blockquote>
<p>• 3．字段的添加<br> 在定义子类时，加上新的域变量，就可以使子类比父类多一些属性。如：<br> class Student extends Person<br> {<br> String school;<br> int score;<br> }</p>
</blockquote>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><blockquote>
<p>• 1．方法的继承<br>父类的非私有方法也可以被子类自动继承。如，Student自动继承Person的方<br>法sayHello和isOlderThan。<br>• 2．方法的覆盖(Override)（修改）<br>子类也可以重新定义与父类同名的方法，实现对父类方法的覆盖(Override)。</p>
</blockquote>
<h2 id="super"><a href="#super" class="headerlink" title="super"></a>super</h2><p>1．使用super访问父类的域和方法<br>• 注意：正是由于继承，使用this可以访问父类的域和方法。但有时为了明确地指明父类的域和方法，就要用关<br>键字super。<br>• 例如：父类Student有一个域age，在子类Student中用age, this.age, super.age来访问age是完全一样的：<br>• void testThisSuper(){<br>• int a;<br>• a = age;<br>• a = this.age;<br>• a = super.age;<br>• }<br>• 当然，使用super不能访问在子类中添加的域和方法。</p>
<p>• 有时需要使用super以区别同名的域与方法<br>使用super可以访问被子类所隐藏了的同名变量。<br>又如，当覆盖父类的同名方法的同时，又要调用父类的方法，就必须使用super。如：<br>• void sayHello(){<br>• super.sayHello();<br>• System.out.println( “My school is “ + school );<br>• }<br>• 在覆盖父类的方法的同时，又利用已定义好的父类的方法。</p>
<p>2．使用父类的构造方法<br>• 构造方法是不能继承的<br>比如，父类Person有一个构造方法Person(String, int)，不能说子类Student也自动有一个构造方<br>法Student(String, int)。<br>• 但是，子类在构造方法中，可以用super来调用父类的构造方法。<br>• Student(String name, int age, String school ){<br>• super( name, age );<br>• this.school = school;<br>• }<br>• 使用时，super()必须放在第一句。</p>
<h2 id="造型"><a href="#造型" class="headerlink" title="造型"></a>造型</h2><blockquote>
<p>父类对象与子类对象的转换 Java程序设计<br>• 类似于基本数据类型数据之间的强制类型转换，存在继承关系的父类对象和<br>子类对象之间也可以在一定条件下相互转换。<br>• (1) 子类对象可以被视为其父类的一个对象<br>如一个Student对象也是一个Person对象。<br>• (2) 父类对象不能被当做其某一个子类的对象。<br>• (3) 如果一个方法的形式参数定义的是父类对象，那么调用这个方法时，可<br>以使用子类对象作为实际参数。<br>• (4) 如果父类对象引用指向的实际是一个子类对象，那么这个父类对象的引<br>用可以用强制类型转换（casting)成子类对象的引用</p>
</blockquote>
<h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><h2 id="多态变量"><a href="#多态变量" class="headerlink" title="多态变量"></a>多态变量</h2><p><strong>一个声明类型，动态类型。</strong></p>
<blockquote>
<p>子类型类似于类的层次,类型也构成了类型层次。子类所定义的类型是其超类的类型的子类型。</p>
</blockquote>
<p>当把一个对象赋值给一个变量时,对象的类型必须与变量的类型相匹配,如:</p>
<pre><code>Car myCar = new Car(); </code></pre>
<p>是一个有效的赋值,因为Car类型的对象被赋值给声明为保存Car类型对象的变量。但是由于引入 了继承,这里的类型规则就得叙述得更完整些:<br>​    一个变量可以保存其所声明的类型或该类型的任何子类型。</p>
<p>对象变量可以保存其声明的类型的对象,或该类型的任何子类型的对象。<br>Java中保存对象类型的变量是多态变量。“多态”这个术语(字面意思是许多形态)是指一个变量可以保存不同类型(即其声明的类型或任何子类型)的对象。</p>
<h2 id="向上造型-cast"><a href="#向上造型-cast" class="headerlink" title="向上造型 cast"></a>向上造型 cast</h2><p>把子类实例当作父类对象看待！！向上造型，不需要().</p>
<blockquote>
<p>两个类 Vechicle(父类)   Car(子类)</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">造型：</span><br><span class="line"></span><br><span class="line">Vechicle v&#x3D;new Vechicle();&#x2F;&#x2F;v管理着Vechicle</span><br><span class="line">Car c；</span><br><span class="line">c&#x3D;v;&#x2F;&#x2F; 编译就不过，不行父类不能当作子类</span><br><span class="line">c&#x3D;(Car)v;&#x2F;&#x2F;编译会过，但运行会出一个叫ClassCastException的异常</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">但：</span><br><span class="line"></span><br><span class="line">Car cc&#x3D;new Car();</span><br><span class="line">v&#x3D;cc;</span><br><span class="line">Car ccc&#x3D;(Car)v;&#x2F;&#x2F;就可以，v实际上就是管理者Car</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">造型：不是类型转换</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>造型：不是类型转换</strong>,对象本身没有改变。</p>
<h2 id="实例多态：方法覆盖"><a href="#实例多态：方法覆盖" class="headerlink" title="实例多态：方法覆盖"></a>实例多态：方法覆盖</h2><blockquote>
<p>如果子类的方法覆盖了父类的方法，我们也说父类的那个方法在子类有了新的版本或者新的实现。覆盖的新版本具有与老版本相同的方法签名：相同的方法名称和参数表。因此，对于外界来说，子类并没有增加新的方法，仍然是在父类中定义过的那个方法。不同的是，这是一个新版本，所以通过子类的对象调用这个方法，执行的是子类自己的方法。</p>
</blockquote>
<blockquote>
<p><strong>覆盖关系并不说明父类中的方法已经不存在了</strong>，而是当通过一个子类的对象调用这个方法时，子类中的方法取代了父类的方法，父类的这个方法被“覆盖”起来而看不见了。而当通过父类的对象调用这个方法时，实际上执行的仍然是父类中的这个方法。注意我们这里说的是对象而不是变量，因为一个类型为父类的变量有可能实际指向的是一个子类的对象。</p>
</blockquote>
<blockquote>
<p><u>当调用一个方法时，究竟应该调用哪个方法，这件事情叫做绑定</u>。绑定表明了调用一个方法的时候，我们使用的是哪个方法。<strong>绑定有两种：一种是早绑定，又称静态绑定，这种绑定在编译的时候就确定了；另一种是晚绑定，即动态绑定。动态绑定在运行的时候根据变量当时实际所指的对象的类型动态决定调用的方法。Java缺省使用动态绑定。</strong></p>
</blockquote>
<h3 id="Override"><a href="#Override" class="headerlink" title="@Override"></a>@Override</h3><p><strong>方法名相同，参数相同</strong></p>
<p>• @Override //JDK1.5以后可以用这个注记来表示(不用也是可以的）<br>• void sayHello(){<br>• System.out.println(“Hello! My name is “ + name + “. My school is “ + school );<br>• }<br>• 通过方法的覆盖，能够修改对象的同名方法的具体实现方法。</p>
<p>一个类中可以有几个同名的方法，这称为方法的重载（Overload）。<br>同时，还可以重载父类的同名方法。与方法覆盖不同的是，重载不要求参数<br>类型列表相同。 重载的方法实际是新加的方法。</p>
<h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><p>• package pkg1[.pkg2[.pkg3…]];<br>• 包及子包的定义，实际上是为了解决名字空间、名字冲突<br>它与类的继承没有关系。事实上，一个子类与其父类可以位于不同的包中。<br>• 包有两方面的含义<br>一是名字空间、存储路径（文件夹）、<br>一是可访问性（同一包中的各个类，默认情况下可互相访问）</p>
<blockquote>
<p>• 包层次的根目录是由环境变量CLASSPATH来确定的。<br>• 在简单情况下，没有package语句，这时称为无名包（unnamed<br>package）<br>在Eclipse中，也叫(default package)。<br>• Java的JDK提供了很多包<br>java.applet，java.awt，java.awt.image，java.awt.peer，java.io，<br>java.lang，java.net，java.util，javax.swing，等。</p>
</blockquote>
<h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><blockquote>
<p>• 为了能使用Java中已提供的类，需要用import语句来导入所需要的类。<br>• import语句的格式为：<br>import package1[.package2…]. (classname |<em>);<br>• 例如：<br>import java.util.Date;<br>• 这样，程序中 java.util.Date可以简写为Date<br>import java.awt.</em>;<br>import java.awt.event.<em>;<br>注意：使用星号(</em>)只能表示本层次的所有类，不包括子层次下的类。<br>• Java编译器自动导入包java.lang.*<br>• Eclipse等IDE可以方便地生成import语句</p>
</blockquote>
<h2 id="CLASSPATH"><a href="#CLASSPATH" class="headerlink" title="CLASSPATH"></a>CLASSPATH</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 在编译和运行程序中，经常要用到多个包，怎样指明这些包的根目录呢？</span><br><span class="line">简单地说，包层次的根目录是由环境变量CLASSPATH来确定的。具体操作</span><br><span class="line">有两种方法。</span><br><span class="line">• 一是在java及javac命令行中，用-classpath（或-cp)选项来指明，如：</span><br><span class="line">• java –classpath d:\tang\ch04;c:\java\classes;.</span><br><span class="line">pk.TestPkg</span><br><span class="line">• 二是设定classpath环境变量，用命令行设定环境变量，如：</span><br><span class="line">• set classpath&#x3D; d:\tang\ch04;c:\java\classes;.</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="常用包："><a href="#常用包：" class="headerlink" title="常用包："></a>常用包：</h2><p>Java 语言中的常用包。<br>java.lang：这个包下包含了 Java 语言的核心类，如 String、 Math、 System 和 Thread 类等，使用<br>这个包下的类无须使用 import 语句导入，系统会自动导入这个包下的所有类。<br>java.util：这个包下包含了 Java 的大量工具类/接口和集合框架类/接口，例如 Arrays 和 List、 Set 等。<br>java.net：这个包下包含了一些 Java 网络编程相关的类/接口。<br>java.io：这个包下包含了一些 Java 输入/输出编程相关的类/接口。<br>java.text：这个包下包含了一些 Java 格式化相关的类。<br>java.sql：这个包下包含了 Java 进行 JDBC 数据库编程的相关类/接口。<br>java.awt：这个包下包含了抽象窗口工具集（Abstract Window Toolkits）的相关类/接口，这些类<br>主要用于构建图形用户界面（GUI）程序。<br>java.swing：这个包下包含了 Swing 图形用户界面编程的相关类/接口，这些类可用于构建平台无<br>关的 GUI 程序。 </p>
<h1 id="访问控制符"><a href="#访问控制符" class="headerlink" title="访问控制符"></a>访问控制符</h1><p>• 修饰符（modifiers）分为两类<br>访问修饰符（access modifiers）<br>• 如public/private等<br>其他修饰符<br>• 如abstract等<br>• 可以修饰类、也可以修饰类的成员（字段、方法） </p>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>同一个类中</th>
<th>同一个包中</th>
<th>不同包中的 子类</th>
<th>不同包中的 非子类</th>
</tr>
</thead>
<tbody><tr>
<td>private</td>
<td>Yes</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>默认 （包可访问）friendly</td>
<td>Yes</td>
<td>Yes</td>
<td></td>
<td></td>
</tr>
<tr>
<td>protected</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td>public</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
</tr>
</tbody></table>
<h2 id="类的访问控制符"><a href="#类的访问控制符" class="headerlink" title="类的访问控制符"></a>类的访问控制符</h2><p>• 在定义类时，也可以用访问控制符。<br>• 类的访问控制符或者为public，或者默认。<br>若使用public，其格式为:<br>• public class 类名{<br>• ……<br>• }<br>如果类用public修饰，则该类可以被其他类所访问；<br>若类默认访问控制符，则该类只能被同包中的类访问。 </p>
<h2 id="setter-与-getter"><a href="#setter-与-getter" class="headerlink" title="setter 与 getter"></a>setter 与 getter</h2><p>• 将字段用private修饰，从而更好地将信息进行封装和隐藏。<br>• 用setXXXX和getXXXX方法对类的属性进行存取，分别称为setter与getter。<br>• 这种方法有以下优点<br>（1）属性用private更好地封装和隐藏，外部类不能随意存取和修改。</p>
<p>（2）提供方法来存取对象的属性，在方法中可以对给定的参数的合法性进行检验。<br>（3）方法可以用来给出计算后的值。<br>（4）方法可以完成其他必要的工作（如清理资源、设定状态，等等）。<br>（5）只提供getXXXX方法，而不提供setXXXX方法，可以保证属性是只读的。 </p>
<h1 id="非访问控制符"><a href="#非访问控制符" class="headerlink" title="非访问控制符"></a>非访问控制符</h1><table>
<thead>
<tr>
<th>基 本 含 义</th>
<th>修 饰 类</th>
<th>修 饰 成 员</th>
<th>修饰局部变量</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>static</td>
<td>静态的、非实例的、类的</td>
<td>可以修饰内部类</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td>final</td>
<td>最终的、不可改变的</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr>
<td>abstract</td>
<td>抽象的、不可实例化的</td>
<td>Yes</td>
<td>Yes</td>
<td></td>
</tr>
</tbody></table>
<h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p>• 静态字段最本质的特点是：<br>它们是类的字段，不属于任何一个对象实例。<br>• 它不保存在某个对象实例的内存区间中，而是保存在类的内存区域的<br>公共存储单元。<br>• 类变量可以通过类名直接访问，也可以通过实例对象来访问，两种方<br>法的结果是相同的。<br>• 如System类的in和out对象，就是属于类的域，直接用类名来访问，<br>即System.in和System.out。</p>
<p><strong>static方法</strong>：</p>
<p>• 用static修饰符修饰的方法仅属于类的静态方法，又称为类方法。<br>• 与此相对，不用static修饰的方法，则为实例方法。<br>• 类方法的本质是该方法是属于整个类的，不是属于某个实例的。<br>• 声明一个方法为static有以下几重含义。<br>• (1) 非static的方法是属于某个对象的方法，在这个对象创建时，对象的方法在内存中拥有自己专用的代码段。而static的方法是属于整个类的，它在内存中的代码段将随着类的定义而进行分配和装载，不被任何一个对象专有。</p>
<p>• (2) 由于static方法是属于整个类的，所以它不能操纵和处理属于某个对象的成员变量，而只能处理属于整个类的成员变量，即static方法只能处理本类中的static域或调用static方法。<br>• (3) static方法中，不能访问实例变量，不能使用this 或super。<br>• (4) 调用这个方法时，应该使用类名直接调用，也可以用某一个具体的对象名</p>
<blockquote>
<p>静态初始化块的执行时机需要注意，它在类加载器第一次加载类时调用，不一定非要创建对象，例如使用类名.静态方法名。</p>
</blockquote>
<h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p>• 1．final类<br>如果一个类被final修饰符所修饰和限定，说明这个类不能被继承，即不可能有<br>子类。<br>• 2．final方法<br>final修饰符所修饰的方法，是不能被子类所覆盖的方法。</p>
<p>• 3．final字段及final局部变量<br>• final字段、 final局部变量(方法中的变量)<br> 它们的值一旦给定，就不能更改。<br> 是只读量，它们能且只能被赋值一次，而不能被赋值多次。<br>• 一个字段被static final两个修饰符所限定时，它可以表示常量，<br> 如Integer. MAX_VALUE(表示最大整数)、 Math.PI(表示圆周率)就是这种常量。<br>• 关于赋值<br> 在定义static final域时，若不给定初始值，则按默认值进行初始化（数值为0，boolean型为false，引用型为<br>null）。<br> 在定义final字段时，若不是static的域，则必须且只能赋值一次，不能缺省。<br>• 这种域的赋值的方式有两种：一是在定义变量时赋初始值，二是在每一个构造函数中进行赋值。<br> 在定义final局部变量时，也必须且只能赋值一次。它的值可能不是常量，但它的取值在变量存在期间不会改变。</p>
<p>final 关键字可用于修饰类、变量和方法， final 关键字有点类似 C#里的 sealed 关键字，用于表示它<br>修饰的类、方法和变量不可改变。 </p>
<blockquote>
<p>final 修饰变量时，表示该变量一旦获得了初始值就不可被改变， final 既可以修饰成员变量（包括类<br>变量和实例 Z 变量），也可以修饰局部变量、形参。有的书上介绍说 final 修饰的变量不能被赋值，这种<br>说法是错误的！严格的说法是， final 修饰的变量不可被改变，一旦获得了初始值，该 final 变量的值就不<br>能被重新赋值。 </p>
</blockquote>
<p>Java 语</p>
<blockquote>
<p>法规定： final 修饰的成员变量必须由程序员显式地指定初始值。 </p>
</blockquote>
<p>归纳起来， final 修饰的类 Field、实例 Field 能指定初始值的地方如下。<br>¾ 类 Field：必须在静态初始化块中或声明该 Field 时指定初始值。<br>¾ 实例 Field：必须在非静态初始化块、声明该 Field 或构造器中指定初始值。 </p>
<h3 id="修饰方法"><a href="#修饰方法" class="headerlink" title="修饰方法"></a>修饰方法</h3><p>final 修饰的方法不可被重写，如果出于某些原因，不希望子类重写父类的某个方法，则可以使用<br>final 修饰该方法。 </p>
<p>Java 提供的 Object 类里就有一个 final 方法： getClass()，因为 Java 不希望任何类重写这个方法，所<br>以使用 final 把这个方法密封起来。 </p>
<p>private final void test(){} </p>
<h3 id="修饰类"><a href="#修饰类" class="headerlink" title="修饰类"></a>修饰类</h3><p>final 修饰的类不可以有子类，例如 java.lang.Math 类就是一个 final 类，它不可以有子类。<br>当子类继承父类时，将可以访问到父类内部数据，并可通过重写父类方法来改变父类方法的实现细<br>节，这可能导致一些不安全的因素。为了保证某个类不可被继承，则可以使用 final 修饰这个类。下面<br>代码示范了 final 修饰的类不可被继承。 </p>
<p>public final class FinalClass {} </p>
<h2 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h2><p>• 1．abstract类<br>凡是用abstract修饰符修饰的类被称为抽象类。<br>抽象类不能被实例化<br>• 2．abstract方法<br>被abstract所修饰的方法叫抽象方法，抽象方法的作用在为所有子类定义一个统一的<br>接口。对抽象方法只需声明，而不需实现，即用分号（；）而不是用{}，格式如下：<br>abstract returnType abstractMethod( [paramlist] );<br>抽象类中可以包含抽象方法，也可以不包含abstract方法。但是，一旦某个类中包含<br>了abstract方法，则这个类必须声明为abstract类。<br><u><em>抽象方法在子类中必须被实现，否则子类仍然是abstract的。</em></u></p>
<h1 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h1><h2 id="消除代码复制"><a href="#消除代码复制" class="headerlink" title="消除代码复制"></a>消除代码复制</h2><blockquote>
<p>程序中存在相似甚至相同的代码块，是非常低级的代码质量问题。</p>
</blockquote>
<p>代 码复制存在的问题是，如果需要修改一个副本，那么就必须同时修改所有其他的副本，否则就 存在不一致的问题。这增加了维护程序员的工作量，而且存在造成错误的潜在危险。很可能发 生的一种情况是，维护程序员看到一个副本被修改好了，就以为所有要修改的地方都已经改好 了。因为没有任何明显迹象可以表明另外还有一份一样的副本代码存在，所以很可能会遗漏还 没被修改的地方。</p>
<p>我们从消除代码复制开始。消除代码复制的两个基本手段，就是函数和父类。</p>
<h2 id="耦合和聚合"><a href="#耦合和聚合" class="headerlink" title="耦合和聚合"></a>耦合和聚合</h2><blockquote>
<p>要评判某些设计比其他的设计优秀，就得定义一些在类的设计中重要的术语，以用来讨论 设计的优劣。对于类的设计来说，有两个核心术语：<u>耦合和聚合</u>。 耦合这个词指的是类和类之间的联系。之前的章节中提到过，程序设计的目标是一系列通 过定义明确的接口通信来协同工作的类。耦合度反映了这些类联系的紧密度。我们努力要获得 低的耦合度，或者叫作松耦合（loose coupling）。</p>
</blockquote>
<blockquote>
<p>耦合度决定修改应用程序的容易程度。在一个紧耦合的结构中，对一个类的修改也会导致 对其他一些类的修改。这是要努力避免的，否则，一点小小的改变就可能使整个应用程序发生 改变。另外，要想找到所有需要修改的地方，并一一加以修改，却是一件既困难又费时的事情。 另一方面，在一个松耦合的系统中，常常可以修改一个类，但同时不会修改其他类，而且 整个程序还可以正常运作。</p>
</blockquote>
<blockquote>
<p>聚合与程序中一个单独的单元所承担的任务的数量和种类相对应有关，它是针对类或方法 这样大小的程序单元而言的理想情况下，一个代码单元应该负责一个聚合的任务（也就是说，一个任务可以被看作是 一个逻辑单元）。一个方法应该实现一个逻辑操作，而一个类应该代表一定类型的实体。聚合 理论背后的要点是重用：如果一个方法或类是只负责一件定义明确的事情，那么就很有可能在 另外不同的上下文环境中使用。遵循这个理论的一个额外的好处是，当程序某部分的代码需要 改变时，在某个代码单元中很可能会找到所有需要改变的相关代码段。</p>
</blockquote>
<h2 id="可扩展性"><a href="#可扩展性" class="headerlink" title="可扩展性"></a>可扩展性</h2><blockquote>
<p>可扩展性的意思就是代码的某些部分不需要经过修改就能适应将来可能的变化。</p>
</blockquote>
<h2 id="框架加数据"><a href="#框架加数据" class="headerlink" title="框架加数据"></a>框架加数据</h2><blockquote>
<p>从程序中识别出框架和数据，以代码实现框架，将部分功能以数据的方式加载，这样能在很大程度上实现可扩展性。</p>
</blockquote>
<h1 id="抽象，接口-interface"><a href="#抽象，接口-interface" class="headerlink" title="抽象，接口 interface"></a>抽象，接口 interface</h1><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><blockquote>
<p>我们用abstract关键字来定义抽象类。抽象类的作用仅仅是表达接口，而不是具体的实现细节。抽象类中可以存在抽象方法。抽象方法也是使用abstract关键字来修饰。抽象的方法是不完全的，它只是一个方法签名而完全没有方法体。</p>
</blockquote>
<blockquote>
<p><strong>如果一个类有了一个抽象的方法，这个类就必须声明为抽象类。</strong>如果父类是抽象类，那么子类必须覆盖所有在父类中的抽象方法，否则子类也成为一个抽象类。一个抽象类可以没有任何抽象方法，所有的方法都有方法体，但是整个类是抽象的。设计这样的抽象类主要是为了防止制造它的对象出来。</p>
</blockquote>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul>
<li>接口是纯抽象类<ul>
<li>所有的成员函数，都是抽象函数</li>
<li>所有的成员变量都是 public static final</li>
</ul>
</li>
<li>接口规定了长什么样，但是不管里面有什么</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface say()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">implements</span><br></pre></td></tr></table></figure>



<ul>
<li>类可以实现很多接口</li>
<li>接口可以继承接口，倒是不能继承类</li>
<li>接口不能实现接口</li>
</ul>
<p>一个接口可以有多个直接父接口，但接口只能继承接口，不能继承类 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[修饰符] interface 接口名 extends 父接口 1, 父接口 2...</span><br><span class="line">&#123;</span><br><span class="line">零个到多个常量定义...</span><br><span class="line">零个到多个抽象方法定义...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接口的继承和类继承不一样，接口完全支持多继承，即一个接口可以有多个直接父接口。和类<br>继承相似，子接口扩展某个父接口，将会获得父接口里定义的所有抽象方法、常量 Field、内部类和<br>枚举类定义 </p>
<h2 id="面向接口编程"><a href="#面向接口编程" class="headerlink" title="面向接口编程"></a>面向接口编程</h2><ul>
<li>设计程序时，先定义接口，再实现类</li>
<li><strong>任何需要在函数间传入传出的一定是接口，而不是具体的类</strong></li>
<li>java的优势啊，多人合作</li>
</ul>
<p>• 接口，某种特征的约定<br>定义接口 interface<br>• 所有方法都自动是public abstract的<br>实现接口 implements<br>• 可以实现多继承<br>• 与类的继承关系无关<br>• 面向接口编程，而不是面向实现</p>
<blockquote>
<p>• 通常接口以able或ible结尾，表明接口能完成一定的行为。<br>• 接口声明中还可以包括对接口的访问权限以及它的父接口列表。完整的接口声明如下：<br>• [public] interface interfaceName [extends listOfSuperInterface]{<br>• ……<br>• }<br>• 其中public指明任意类均可以使用这个接口，缺省情况下，只有与该接口定义在同一个包<br>中的类才可以访问这个接口。<br>• extends 子句与类声明中的extends子句基本相同，不同的是一个接口可以有多个父接口，<br>用逗号隔开，而一个类只能有一个父类。子接口继承父接口中所有的常量和方法。</p>
</blockquote>
<p>• 方法定义的格式为：<br>• returnType methodName ( [paramlist] )；<br>• 接口中只进行方法的声明，而不提供方法的实现，所以，方法定义没有方法体，且用分号(;)结尾。在接口中声明的方法具有public 和abstract属性。<br>所以定义的时候这两个关键词是可以省略的<br>• 另外，如果在子接口中定义了和父接口同名的常量或相同的方法，则<br>父接口中的常量被隐藏，方法被重载。</p>
<h2 id="接口的实现"><a href="#接口的实现" class="headerlink" title="接口的实现"></a>接口的实现</h2><p>• 在类的声明中用implements子句来表示一个类使用某个接口，在类<br>体中可以使用接口中定义的常量，而且必须实现接口中定义的所有方<br>法。一个类可以实现多个接口。</p>
<h2 id="接口类型"><a href="#接口类型" class="headerlink" title="接口类型"></a>接口类型</h2><p>• 接口可以作为一种引用类型来使用。任何实现该接口的类的实例都可<br>以存储在该接口类型的变量中，通过这些变量可以访问类所实现的接<br>口中的方法。 Java运行时系统动态地确定该使用哪个类中的方法。<br>• 把接口作为一种数据类型可以不需要了解对象所对应的具体的类</p>
<h2 id="实现了接口的类"><a href="#实现了接口的类" class="headerlink" title="实现了接口的类"></a>实现了接口的类</h2><p>一个类实现了一个或多个接口之后，这个类必须完全实现这些接口里所定义的全部抽象方法（也就<br>是重写这些抽象方法）；否则，该类将保留从父接口那里继承到的抽象方法，该类也必须定义成抽象类。 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[修饰符] class 类名 extends 父类 implements 接口 1,接口 2...</span><br><span class="line">&#123;</span><br><span class="line">类体部分</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>• 异常（exception ) 又称为例外、差错、违例<br>• 对应着Java运行错误处理机制 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try&#123;</span><br><span class="line">语句组</span><br><span class="line">&#125;catch(异常类名 异常形式参数名)&#123;</span><br><span class="line">异常处理语句组；</span><br><span class="line">&#125;catch(异常类名 异常形式参数名)&#123;</span><br><span class="line">异常处理语句组；</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">异常处理语句组；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>• finally语句<br>无论是否有异常都要执行<br>• 即使其中有break,return等语句<br>• 在编译时，finally部分代码生成了多遍 </p>
<p>• 一般所说的异常<br>• 是指Exception及其子类 </p>
<p>• 多异常的处理<br>子类异常要排在父类异常的前面 </p>
<h2 id="拿到了异常"><a href="#拿到了异常" class="headerlink" title="拿到了异常"></a>拿到了异常</h2><p>String getMessage()</p>
<p>String toString()</p>
<p>void printStackTrace()</p>
<h2 id="throw-与throws"><a href="#throw-与throws" class="headerlink" title="throw 与throws"></a>throw 与throws</h2><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><h3 id="Throwable"><a href="#Throwable" class="headerlink" title="Throwable"></a>Throwable</h3><p>• Throwable<br>Error: JVM的错误<br>Exception： 异常 </p>
<h3 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h3><p>• Exception分两种<br>RuntimeException及其子类，可以不明确处理<br>否则，称为受检的异常（checked Exception) </p>
<p>• 受检的异常，要求明确进行语法处理<br>要么捕（catch）<br>要么抛（throws）：在方法的签名后面用throws xxxx来声明<br>• 在子类中，如果要覆盖父类的一个方法，若父类中的方法声明了<br>throws异常，则子类的方法也可以throws异常<br>• 可以抛出子类异常（更具体的异常），但不能抛出更一般的异常 </p>
<h1 id="流"><a href="#流" class="headerlink" title="流"></a>流</h1><blockquote>
<p>输入输出的方式。</p>
</blockquote>
<p>流的基础类：作用的都是<strong>字节</strong></p>
<ol>
<li>InputStream</li>
<li>OutputStream</li>
</ol>
<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><blockquote>
<p><a href="https://www.cnblogs.com/zhengbin/p/5654805.html">https://www.cnblogs.com/zhengbin/p/5654805.html</a></p>
<p>Java语言提供了一种稍弱的同步机制，即volatile变量，用来确保将变量的更新操作通知到其他线程。当把变量声明为volatile类型后，编译器与运行时都会注意到这个变量是共享的，因此不会将该变量上的操作与其他内存操作一起重排序。volatile变量不会被缓存在寄存器或者对其他处理器不可见的地方，因此在读取volatile类型的变量时总会返回最新写入的值。</p>
</blockquote>
<h2 id="Thread-类"><a href="#Thread-类" class="headerlink" title="Thread 类"></a>Thread 类</h2><blockquote>
<p>1000毫秒，也就是一秒钟！</p>
</blockquote>
<p>主要的两个方法</p>
<p>run（）:子类必须覆盖这个方法</p>
<p>start():会执行run()</p>
<p>sleep(毫秒) 会抛出异常：InterruptedException e </p>
<h2 id="线程的创建"><a href="#线程的创建" class="headerlink" title="线程的创建"></a>线程的创建</h2><p>线程：程序中单个顺序的流控制称为线程 </p>
<p>一个进程中可以含有多个线程<br>在操作系统中可以查看线程数<br>如：在Windows中，在任务管理器，右键，选择列，选中“线程数” </p>
<p>一个进程中的多个线程<br>分享CPU（并发的或以时间片的方式）<br>共享内存（如多个线程访问同一对象） </p>
<p>java.lang中的类 Thread </p>
<h2 id="线程体"><a href="#线程体" class="headerlink" title="线程体"></a>线程体</h2><p>• 线程体—- run()方法来实现的。<br>• 线程启动后，系统就自动调用run()方法。<br>• 通常，run()方法执行一个时间较长的操作<br>如一个循环<br>显示一系列图片<br>下载一个文件 </p>
<h2 id="创建线程的两种方法"><a href="#创建线程的两种方法" class="headerlink" title="创建线程的两种方法"></a>创建线程的两种方法</h2><ol>
<li><p>通过Thread类创建线程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new Thread()&#123;</span><br><span class="line">    public void run()&#123;</span><br><span class="line">        for(int i&#x3D;0;i&lt;10;i++)</span><br><span class="line">        	System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.start();</span><br></pre></td></tr></table></figure>

<p>或用lambda表达式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new Thread(()-&gt;&#123;任务&#125;).start()</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li>通过向Thread（Runnable）构造方法传递Runnable对象来创建线程</li>
</ol>
<p>Runnable是个接口。给Thread这个构造用。</p>
<ul>
<li>可使用匿名类来实现Runnable</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Counter implements Runnable &#123;</span><br><span class="line">	int id;</span><br><span class="line">	Counter(int id)&#123;</span><br><span class="line">		this.id &#x3D; id;</span><br><span class="line">	&#125;</span><br><span class="line">	public void run() &#123;&#x2F;&#x2F;必须实现这个方法</span><br><span class="line">		int i&#x3D;0;</span><br><span class="line">		while( i++&lt;&#x3D;10 )&#123;</span><br><span class="line">			System.out.println(&quot;ID: &quot; + id + &quot;  No. &quot; + i);</span><br><span class="line">			try&#123; Thread.sleep(10); &#125; catch( InterruptedException e )&#123;&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="线程的状态与生命周期"><a href="#线程的状态与生命周期" class="headerlink" title="线程的状态与生命周期"></a>线程的状态与生命周期</h2><p>概览图：</p>
<p>• 线程的启动<br>start()</p>
<p>• 线程的结束（run方法做完了）<br>设定一个</u>标记变量</u>，以结束相应的循环及方法。</p>
<p>• 暂时阻止线程的执行<br>try{ Thread.sleep( 1000 );} catch( InterruptedException e ){ }</p>
<p>• 设定线程的优先级<br>setPriority( int priority)方法</p>
<p>MIN_PRIORITY，MAX_PRIORITY，NORM_PRIORITY </p>
<p><strong>后台线程</strong></p>
<h3 id="线程有两种"><a href="#线程有两种" class="headerlink" title="线程有两种"></a>线程有两种</h3><p>与虚拟机相关：</p>
<p>一类是普通线程（非Daemon线程）<br>• <strong>在Java程序中，若还有非Demon线程，则整个程序就不会结束</strong></p>
<p>一类是Daemon线程（守护线程，后台线程）<br>• 如果普通线程结束了，则后台线程自动终止<br>• 注：垃圾回收线程是后台线程 </p>
<h4 id="把一个线程设为后台线程"><a href="#把一个线程设为后台线程" class="headerlink" title="把一个线程设为后台线程"></a>把一个线程设为后台线程</h4><p>方法：</p>
<p>setDaemon(true)</p>
<h2 id="线程的同步"><a href="#线程的同步" class="headerlink" title="线程的同步"></a>线程的同步</h2><h3 id="线程的不确定性"><a href="#线程的不确定性" class="headerlink" title="线程的不确定性"></a>线程的不确定性</h3><p><strong>同时运行的线程要共享数据</strong></p>
<p>转变为机器指令时，一条语句被解释为多条指令。</p>
<h3 id="同步：解决方式，控制方式"><a href="#同步：解决方式，控制方式" class="headerlink" title="同步：解决方式，控制方式"></a>同步：解决方式，控制方式</h3><p>考虑其它线程的状态与行为</p>
<blockquote>
<p>Java引入对象互斥锁的概念，保证共享数据操作的完整性。一种状态。</p>
<ul>
<li>互斥锁：每个对象都对应一个monitor(监视器)，上面有一个称为“互斥锁（lock,mutex)”的标记，这个标记用来表示在任一时刻，只能有一个线程能访问该对象。</li>
<li>synchronized:关键字，用来与对象的互斥锁联系。取得锁的这么一个过程。</li>
</ul>
<p>比如，商城里的试衣间。</p>
</blockquote>
<h4 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 对代码片段：</span><br><span class="line">synchronized(对象)&#123;....&#125;&#x2F;&#x2F;取得对象的锁，才能进&#123;&#125;里面。其它线程是进不来的。&#123;&#125;结束了，就释放锁</span><br><span class="line"></span><br><span class="line">* synchronized 放在方法声明中</span><br><span class="line"></span><br><span class="line">• public synchronized void push(char c )&#123; 。。。。 &#125;</span><br><span class="line">• 相当于对synchronized(this), 表示整个方法为同步方法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="wait-notify-notifyAll-与对象锁"><a href="#wait-notify-notifyAll-与对象锁" class="headerlink" title="wait)(),notify(),notifyAll() 与对象锁"></a>wait)(),notify(),notifyAll() 与对象锁</h3><blockquote>
<p>不是简单的锁住。等待，通知。</p>
</blockquote>
<ol>
<li><p>在执行A时，需要等待别的资源或条件，等待别的对象释放锁，就需要等待，A在等待的时候，先把自己的那个锁释放掉给别人用。就使用wait（）方法：暂时释放对象锁。</p>
</li>
<li><p>B的线程使用notify()来告诉A，你可以接着走了，使其进入就绪状态</p>
</li>
</ol>
<h2 id="实例："><a href="#实例：" class="headerlink" title="实例："></a><strong>实例</strong>：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">生产者与消费者问题：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">生产者：</span><br><span class="line"></span><br><span class="line">private int data[] &#x3D; new int[3];</span><br><span class="line">private int index &#x3D; 0;</span><br><span class="line">public synchronized void put(int value) &#123;</span><br><span class="line">		while (index &gt;&#x3D; data.length) &#123;&#x2F;&#x2F;index代表有几个东西，满的时候就等待消费者来拿，没满就放进去</span><br><span class="line">			try &#123;</span><br><span class="line">				wait(); &#x2F;&#x2F; waits for notify() call from consumer</span><br><span class="line">			&#125; catch (InterruptedException e) &#123;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(&quot;Producer &quot; + &quot; put: &quot; + value);</span><br><span class="line">		data[index] &#x3D; value;</span><br><span class="line">		index ++;</span><br><span class="line">		notify();&#x2F;&#x2F;执行到这里，说明我产生了东西了，通知消费者要不要来拿。</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">消费者：</span><br><span class="line">class CubbyHole &#123;</span><br><span class="line">	private int data[] &#x3D; new int[3];</span><br><span class="line">	private int index &#x3D; 0;</span><br><span class="line"></span><br><span class="line">	public synchronized int get() &#123;</span><br><span class="line">		while (index &lt;&#x3D; 0) &#123;</span><br><span class="line">			try &#123;</span><br><span class="line">				&#x2F;&#x2F;消费者，没东西吃了，要个东西吃，就等待</span><br><span class="line">				wait(); &#x2F;&#x2F; waits for notify() call from Producer</span><br><span class="line">			&#125; catch (InterruptedException e) &#123;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		index --;</span><br><span class="line">		int value &#x3D; data[index];</span><br><span class="line">		System.out.println(&quot;Consumer &quot; +  &quot; got: &quot; + data[index]);</span><br><span class="line">		notify();&#x2F;&#x2F;通知</span><br><span class="line">		return value;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------------</span><br><span class="line"></span><br><span class="line">class Producer extends Thread &#123;</span><br><span class="line">	private CubbyHole cubbyhole;</span><br><span class="line">	private int number;</span><br><span class="line"></span><br><span class="line">	public Producer(CubbyHole c, int number) &#123;</span><br><span class="line">		cubbyhole &#x3D; c;</span><br><span class="line">		this.number &#x3D; number;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void run() &#123;</span><br><span class="line">		for (int i &#x3D; 0; i &lt;10; i++) &#123;</span><br><span class="line">			cubbyhole.put(i);</span><br><span class="line">			&#x2F;&#x2F;System.out.println(&quot;Producer #&quot; + this.number + &quot; put: &quot; + i);</span><br><span class="line">			&#x2F;&#x2F;try &#123;</span><br><span class="line">			&#x2F;&#x2F;	sleep((int)(Math.random() * 100));</span><br><span class="line">			&#x2F;&#x2F;&#125; catch (InterruptedException e) &#123;</span><br><span class="line">			&#x2F;&#x2F;&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Consumer extends Thread &#123;</span><br><span class="line">	private CubbyHole cubbyhole;</span><br><span class="line">	private int number;</span><br><span class="line"></span><br><span class="line">	public Consumer(CubbyHole c, int number) &#123;</span><br><span class="line">		cubbyhole &#x3D; c;</span><br><span class="line">		this.number &#x3D; number;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void run() &#123;</span><br><span class="line">		int value &#x3D; 0;</span><br><span class="line">		for (int i &#x3D; 0; i &lt;10; i++) &#123;</span><br><span class="line">			value &#x3D; cubbyhole.get();</span><br><span class="line">			&#x2F;&#x2F;System.out.println(&quot;Consumer #&quot; + this.number + &quot; got: &quot; + value);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class CubbyHole1</span><br><span class="line">&#123;</span><br><span class="line">	private int seq;</span><br><span class="line">	public synchronized int get() &#123;</span><br><span class="line">		return seq;</span><br><span class="line">	&#125;</span><br><span class="line">	public synchronized void put(int value) &#123;</span><br><span class="line">		seq &#x3D; value;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class CubbyHole2</span><br><span class="line">&#123;</span><br><span class="line">	private int seq;</span><br><span class="line">	private boolean available &#x3D; false;</span><br><span class="line"></span><br><span class="line">	public synchronized int get() &#123;</span><br><span class="line">		while (available &#x3D;&#x3D; false) ; &#x2F;&#x2F;dead locked !!!</span><br><span class="line">		return seq;</span><br><span class="line">	&#125;</span><br><span class="line">	public synchronized void put(int value) &#123;</span><br><span class="line">		while (available &#x3D;&#x3D; true) ;</span><br><span class="line">		seq &#x3D; value;</span><br><span class="line">		available &#x3D; true;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class CubbyHole3 &#123;</span><br><span class="line">	private int seq;</span><br><span class="line">	private boolean available &#x3D; false;</span><br><span class="line"></span><br><span class="line">	public synchronized int get() &#123;</span><br><span class="line">		while (available &#x3D;&#x3D; false) &#123;</span><br><span class="line">			try &#123;</span><br><span class="line">				wait(); &#x2F;&#x2F; waits for notify() call from Producer</span><br><span class="line">			&#125; catch (InterruptedException e) &#123;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		available &#x3D; false;</span><br><span class="line">		notify();</span><br><span class="line">		return seq;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public synchronized void put(int value) &#123;</span><br><span class="line">		while (available &#x3D;&#x3D; true) &#123;</span><br><span class="line">			try &#123;</span><br><span class="line">				wait(); &#x2F;&#x2F; waits for notify() call from consumer</span><br><span class="line">			&#125; catch (InterruptedException e) &#123;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		seq &#x3D; value;</span><br><span class="line">		available &#x3D; true;</span><br><span class="line">		notify();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CubbyHole &#123;</span><br><span class="line">	private int data[] &#x3D; new int[3];</span><br><span class="line">	private int index &#x3D; 0;</span><br><span class="line"></span><br><span class="line">	public synchronized int get() &#123;</span><br><span class="line">		while (index &lt;&#x3D; 0) &#123;</span><br><span class="line">			try &#123;</span><br><span class="line">				wait(); &#x2F;&#x2F; waits for notify() call from Producer</span><br><span class="line">			&#125; catch (InterruptedException e) &#123;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		index --;</span><br><span class="line">		int value &#x3D; data[index];</span><br><span class="line">		System.out.println(&quot;Consumer &quot; +  &quot; got: &quot; + data[index]);</span><br><span class="line">		notify();</span><br><span class="line">		return value;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public synchronized void put(int value) &#123;</span><br><span class="line">		while (index &gt;&#x3D; data.length) &#123;</span><br><span class="line">			try &#123;</span><br><span class="line">				wait(); &#x2F;&#x2F; waits for notify() call from consumer</span><br><span class="line">			&#125; catch (InterruptedException e) &#123;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(&quot;Producer &quot; + &quot; put: &quot; + value);</span><br><span class="line">		data[index] &#x3D; value;</span><br><span class="line">		index ++;</span><br><span class="line">		notify();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ProducerConsumerStack &#123;</span><br><span class="line">	public static void main(String args[]) &#123;</span><br><span class="line">		CubbyHole c &#x3D; new CubbyHole();</span><br><span class="line">		Producer p1 &#x3D; new Producer(c, 1);</span><br><span class="line">		Consumer c1 &#x3D; new Consumer(c, 1);</span><br><span class="line">		p1.start();</span><br><span class="line">		c1.start();</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="并发api"><a href="#并发api" class="headerlink" title="并发api"></a>并发api</h2><h3 id="原子变量及线程安全的集合"><a href="#原子变量及线程安全的集合" class="headerlink" title="原子变量及线程安全的集合"></a>原子变量及线程安全的集合</h3><p>java.util.concurrent包及其子包。提供一些东西更好的操作线程。</p>
<p>里面有单变量，集合，Timer，线程池</p>
<p><strong>原子变量</strong>：java.util.concurrent.atomic包</p>
<ul>
<li>AtomicInteger类，原子整数</li>
<li>上类有个getAndIncrement()方法//安全的，不会像n++那样执行到一半就被其它线程那去了。</li>
</ul>
<p><strong>集合</strong>：ArrayList与HashMap在线程里也是不安全的。不一致性问题。</p>
<ul>
<li>Vector/HashTable是安全的</li>
</ul>
<p>jdk 1.5以后：对于集合，java.util.concurrent.包增加了一些类，以便更灵活的使用锁机制。</p>
<ul>
<li>CopyOnWriteArrayList、 CopyOnWriteArraySet<br><strong>适合于很少写入而读取频繁的对象</strong> </li>
<li>ConcurrentHashMap//映射<br>putIfAbsent(), remove(), replace()</li>
<li>ArrayBlockingQueue//队列<br> 生产者与消费者，使用put()及take() //wait()或notify()已经帮我们实现好了，不用从底层实现了。</li>
</ul>
<h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><blockquote>
<p>每开一个线程，系统就要为它建一些环境，相应的机制，开销是很大的。并不是线程越多，程序运行越快。</p>
<p>线程池，一个线程执行完毕，并没有被销毁掉。线程池里有一些线程。</p>
<p>线程池相关的类：</p>
<ul>
<li>ExecutorService 接口、 ThreadPoolExecutor 类 </li>
<li>Executors 工具类</li>
</ul>
<p>用法：</p>
<ul>
<li>ExecutorService pool = Executors.newCachedThreadPool(); 创建一个线程池</li>
<li>使用pool.execute( Runnable r)方法,收一个Runnable对象</li>
<li>pool. shutdown()关闭线程池。</li>
</ul>
</blockquote>
<p>线程池相关的类<br>ExecutorService 接口、 ThreadPoolExecutor 类<br>Executors 工具类 </p>
<h3 id="Timer"><a href="#Timer" class="headerlink" title="Timer"></a>Timer</h3><blockquote>
<p>两个Timer：底层是一个线程，循环的执行任务</p>
<ul>
<li>java.util.Timer类重复某件事，计时器</li>
<li>javax.swing.Timer类，重复执行ActionListener</li>
</ul>
</blockquote>
<h3 id="线程中对图形界面的更新"><a href="#线程中对图形界面的更新" class="headerlink" title="线程中对图形界面的更新"></a>线程中对图形界面的更新</h3><p>要调用：SwingUtilites.invokeLater (Runnable r)</p>
<h2 id="流式操作及并行流"><a href="#流式操作及并行流" class="headerlink" title="流式操作及并行流"></a>流式操作及并行流</h2><blockquote>
<p>java8开始提供的新特性。</p>
</blockquote>
<p><strong>为什么要有这么个特性</strong>：</p>
<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p><a href="https://www.sczyh30.com/posts/Java/java-reflection-1/">https://www.sczyh30.com/posts/Java/java-reflection-1/</a></p>
<h1 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h1><p><a href="https://tech.meituan.com/nio.html">https://tech.meituan.com/nio.html</a></p>
<h1 id="java-特性"><a href="#java-特性" class="headerlink" title="java  特性"></a>java  特性</h1><h2 id="内部类-Inner-class"><a href="#内部类-Inner-class" class="headerlink" title="内部类 Inner class"></a>内部类 Inner class</h2><p><strong>定义</strong>：</p>
<p>将类B的定义class xxxx{…}置入一个A类的内部即可<br>编译器生成A$B这样的class文件<br>内部类不能够与外部类同名 </p>
<p><strong>使用</strong>：</p>
<ul>
<li><p>类A里面用：**与普通类的使用方式相同 **</p>
</li>
<li><p>在其他地方使用 ，不在A类使用。</p>
<ul>
<li>类名前要冠以外部类的名字。 A.B.XXX</li>
<li>在用new创建内部类实例时，也要在 new前面冠以对象变量。<br>• 外部对象名A.new 内部类名(参数) </li>
</ul>
</li>
<li><p>内部类中使用外部类的成员</p>
<ul>
<li>内部类中可以直接访问外部类的字段及方法<br>即使private也可以 </li>
<li>如果内部类中有与外部类同名的字段或方法，则可以用<br>外部类名.this.字段及方法 </li>
</ul>
</li>
</ul>
<h3 id="内部类的修饰符"><a href="#内部类的修饰符" class="headerlink" title="内部类的修饰符"></a>内部类的修饰符</h3><blockquote>
<p>内部类B也是类A的一个成员。</p>
<ul>
<li>访问控制符：public,protected,默认及private。<br>• 注：外部类只能够使用public修饰或者默认 </li>
<li>final,abstract </li>
</ul>
</blockquote>
<h3 id="static-1"><a href="#static-1" class="headerlink" title="static"></a>static</h3><p>用static修饰内部类 表明该内部类实际是一种外部类<br>因为它与外部类的实例无关<br>有人认为static的类是嵌套类（nested class），不是内部类inner class </p>
<p><strong>static类在使用时</strong> ：</p>
<p>1、实例化static类时，在 new前面不需要用对象实例变量；<br>2、 <strong>static类中不能访问其外部类的非static的字段及方法，既只能够访问static成员。</strong><br>3、 static<strong>方法中不能访问非static的域及方法</strong>，也<strong>不能够不带前缀地new 一个非</strong><br><strong>static的内部类</strong></p>
<h2 id="lambda表达式，方便你写"><a href="#lambda表达式，方便你写" class="headerlink" title="lambda表达式，方便你写"></a>lambda表达式，方便你写</h2><blockquote>
<p><strong>java 8新增语法。</strong></p>
<p>（λ expression) </p>
<p>相当与一个函数。在Java里相当与匿名类的一个实例。</p>
</blockquote>
<p><strong>写法</strong>：<code>(参数)-&gt;结果</code></p>
<ul>
<li>(String s)-&gt;s.length()//参数有类型</li>
<li>(x)-&gt;x*x//参数类型都省略了</li>
<li>()-&gt;{}//参数都没有</li>
</ul>
<p>**<u>起因</u>**：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Runnable doIt &#x3D; new Runnable()&#123;&#x2F;&#x2F;匿名类，实现了这个Runnable接口。</span><br><span class="line">	public void run()&#123;&#x2F;&#x2F;必须实现的方法。</span><br><span class="line">	System.out.println(&quot;aaa&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">new Thread( doIt ).start();&#x2F;&#x2F;线程需要一个Runnable对象，自己有start（）方法。</span><br><span class="line"></span><br><span class="line">使用lambda表达式：</span><br><span class="line">Runnable doIt &#x3D; () -&gt;System.out.println(&quot;aaa&quot;);&#x2F;&#x2F;()就是哪个run方法</span><br><span class="line">new Thread( doIt ).start();</span><br><span class="line"></span><br><span class="line">甚至是：new Thread(() -&gt;System.out.println(&quot;aaa&quot;) ).start();&#x2F;&#x2F;直接放在Thread的构造里</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以看出：Lambda表达式是接口或者说是接口函数的简写 </p>
<p>把匿名类更加简写。</p>
</blockquote>
<h3 id="实例：-1"><a href="#实例：-1" class="headerlink" title="实例："></a>实例：</h3><blockquote>
<p>求积分：interface Fun { double fun( double x );} 接口</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">double Integral(Fun fun,.....)</span><br><span class="line">&#123;</span><br><span class="line">	。。。。。</span><br><span class="line">&#125;</span><br><span class="line">一开始要这样写：</span><br><span class="line">double d &#x3D; Integral( new Fun()&#123;</span><br><span class="line">	public double fun(double x)&#123;</span><br><span class="line">	return Math.sin(x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;, 0, Math.PI, 1e-5 );</span><br><span class="line"></span><br><span class="line">使用lambda</span><br><span class="line"></span><br><span class="line">double d &#x3D; Integral( x-&gt;Math.sin(x),</span><br><span class="line">0, Math.PI, 1e-5);</span><br></pre></td></tr></table></figure>

<h2 id="使用lambda的条件"><a href="#使用lambda的条件" class="headerlink" title="使用lambda的条件"></a>使用lambda的条件</h2><blockquote>
<p>由于Lambda<strong>只能表示一个函数</strong>，所以 </p>
<p>能写成Lambda的<strong>接口要求包含且最多只能有一个抽象函数</strong> ,自动对应到唯一的抽象函数去了。</p>
<p>把代码当做数据，一定程度上实现了函数式编程。</p>
</blockquote>
<p>这样的接口可以（但不强求）用注记<br>@FunctionalInterface 来表示。<strong>称为函数式接口</strong> </p>
<p>如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">@FunctionalInterface</span><br><span class="line">interface Fun &#123; double fun( double x );&#125; </span><br></pre></td></tr></table></figure>



<h2 id="范型"><a href="#范型" class="headerlink" title="范型"></a>范型</h2><blockquote>
<p>泛型（Generic）是JDK1.5增加的最重要的Java语言特性。 </p>
</blockquote>
<p><strong>使用泛型可以针对不同的类有相同的处理办法</strong><br>• Vector<String> v = new Vector<String> ();<br>• v.addElement( “one” );<br>• String s = v.elementAt(0); </p>
<p>使用泛型的好处<br>• 类型更安全<br>• 适用更广泛，针对不同的类有相同的处理办法，但这些类之间不一定有继承关系。 </p>
<h1 id="深入理解面向对象"><a href="#深入理解面向对象" class="headerlink" title="深入理解面向对象"></a>深入理解面向对象</h1><h2 id="抽象类与接口"><a href="#抽象类与接口" class="headerlink" title="抽象类与接口"></a>抽象类与接口</h2><ol>
<li>抽象类：</li>
</ol>
<hr>
<blockquote>
<p>一个类里有抽象方法就必须是个抽象类。</p>
</blockquote>
<blockquote>
<p>抽象类中可以包含<strong>具体的方法</strong>，当然也可以不包含抽象方法。</p>
</blockquote>
<blockquote>
<p>非抽象类中不可以有抽象方法。所以一个非抽象类继承了一个抽象类，必须实现父类所有抽象方法。</p>
</blockquote>
<p><a href="https://www.cnblogs.com/chenssy/p/3376708.html">https://www.cnblogs.com/chenssy/p/3376708.html</a></p>
<blockquote>
<p><strong>抽象类不能被实例化，实例化的工作应该交由它的子类来完成，它只需要有一个引用即可</strong></p>
</blockquote>
<ol start="2">
<li>接口：</li>
</ol>
<hr>
<blockquote>
<p>同时实现该接口的实现类必须要实现该接口的所有方法，通过使用implements关键字，他表示该类在遵循某个或某组特定的接口，同时也表示着“interface只是它的外貌，但是现在需要声明它是如何工作的”。</p>
</blockquote>
<blockquote>
<p>实现接口的非抽象类必须要实现该接口的所有方法。抽象类可以不用实现。</p>
</blockquote>
<h2 id="对象-引用和指针"><a href="#对象-引用和指针" class="headerlink" title="对象 引用和指针"></a>对象 引用和指针</h2><p>Person p = new Person();，这行代码创建了一个<br>Person 实例，也被称为 Person 对象，这个 Person 对象被赋给 p 变量。 </p>
<p>当一个对象被创建成功以后，这个对象将保存在堆内存中， Java 程序不允许直接访问堆内存中的对<br>象，只能通过该对象的引用操作该对象。也就是说，不管是数组还是对象，都只能通过引用来访问它们。</p>
<blockquote>
<p>这里的关键是理解类的定义和对象的关系，理解对象中的成员变量是怎么来的，怎么就能让成员函数明白自己在和哪个对象打交道。</p>
</blockquote>
<p>在没有引入类之前，变量是跟着代码走的。代码写到哪儿，变量写在哪里，那么运行的时候变量就在那儿。现在，写在类里的成员变量，只是一个声明，变量并不在那里，变量不在类里，变量在每一个对象里。</p>
<p>建议你一定要跟着视频中的方法自己用调试的方法看几遍成员函数的执行，做各种尝试，一定要正确而且充分地理解这里的关系。</p>
<blockquote>
<p><strong>变量初始值</strong>：<br>变量的初始化是程序安全很重要的一环。一旦创建了一个对象，有什么手段可以保证其中的每一个成员变量都有确定的初始值呢？<br>Java提供了多种手段来保障对象创建时的初始化，包括给每个成员变量默认的“0”值、定义初始化和构造函数。</p>
</blockquote>
<p><strong>对象交互</strong></p>
<blockquote>
<p>面向对象程序设计的第一步，就是在问题领域中识别出有效的对象，然后从识别出的对象中抽象出类来。面对纷繁复杂的现实问题，往往存在多种对象划分的方式，而不同的划分会带来类的设计以至于程序结构的各种不同。<br>一个对象当然可以由其他类的对象来组成，就像一个人体里面有心脏、肠胃一样。对象是由其他对象组成的，而类定义了这样的组合关系。</p>
</blockquote>
<blockquote>
<p>那么下一个问题，就是当一个对象里有多个对象的时候，那些对象之间是如何交互的，对象和对象之间的联系是如何建立的，对象如何和其他对象交流。对象和对象之间的联系紧密程度叫做耦合。对象和对象的耦合程度越紧，表现在源代码上，就是它们的代码是互相依赖、互相牵制的。我们理想的模型，是对象和对象之间的耦合要尽可能的松，平行的对象要尽量减少直接联系，让更高层次的对象来提供通信服务。</p>
</blockquote>
<p><strong>封装</strong>：</p>
<blockquote>
<p>封装，就是把数据和对这些数据的操作放在一起，并且用这些操作把数据掩盖起来，是面向对象的基本概念之一，也是最核心的概念。</p>
</blockquote>
<p>我们有一个非常直截了当的手段来保证在类的设计的时候做到封装：</p>
<p>所有的成员变量必须是private的，这样就避免别人任意使用你的内部数据；</p>
<p>所有public的函数，只是用来实现这个类的对象或类自己要提供的服务的，而不是用来直接访问数据的。除非对数据的访问就是这个类及对象的服务。简单地说，给每个成员变量提供一对用于读写的get/set函数也是不合适的设计。</p>
<p><strong>包</strong>：</p>
<blockquote>
<p>当你的程序越来越大的时候，你就会需要有一个机制帮助你管理一个工程中众多的类了。包就是Java的类库管理机制，它借助文件系统的目录来管理类库，一个包就是一个目录，一个包内的所有的类必须放在一个目录下，那个目录的名字必须是包的名字。</p>
</blockquote>
<p>你可以忽略不看包，反正一切靠Eclipse。但是作为一个Java程序员，你不能不懂包。要不然，在使用别人的类库和部署你的程序的时候，会遇到不少莫名其妙的麻烦。</p>
<p>因为，包治百病啊！</p>
<p><strong>类变量</strong>：</p>
<blockquote>
<p>类是描述，对象是实体。在类里所描述的成员变量，是位于这个类的每一个对象中的。</p>
</blockquote>
<blockquote>
<p>而如果某个成员有static关键字做修饰，它就不再属于每一个对象，而是属于整个类的了。</p>
</blockquote>
<p>通过每个对象都可以访问到这些类变量和类函数，但是也可以通过类的名字来访问它们。类函数由于不属于任何对象，因此也没有办法建立与调用它们的对象的关系，就不能访问任何非static的成员变量和成员函数了。</p>
<p><strong>方法</strong>：属于类</p>
<p><strong>static</strong>:</p>
<p>如果在 static 修饰的方法中使用 this<br>关键字， 则这个关键字就无法指向合适的对象。 所以， static 修饰的方法中不能使用 this 引用。 由于 static<br>修饰的方法不能使用 this 引用， 所以 static 修饰的方法不能访问不使用 static 修饰的普通成员， 因此 Java<br>语法规定：静态成员不能直接访问非静态成员 </p>
<h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><blockquote>
<p>构造器不是没有返回值吗？为什么不能void 修饰？？</p>
<blockquote>
<p>简单地说， 这是 Java 的语法规定。 实际上，<br>类的构造器是有返回值的，当我们用 new 关键字来调用构造器时，构造器返回该类的实例，可以把这个类的实例当成构造器的返回值， 因此构造器的返回值类型总是当前类，无须定义返回值类型。但必须注意：不能在构造器里显式使用 return 来返回当前类的对象，因为构造器的返回值是隐式的。</p>
</blockquote>
</blockquote>
<blockquote>
<p>如果程序员没有为 Java 类提供任何构造器，则系统会为这个类提供一个无参数的构<br>造器，这个构造器的执行体为空，不做任何事情。无论如何， Java 类至少包含一个构造器。 </p>
</blockquote>
<blockquote>
<p>一旦程序员提供了自定义的构造器，系统就不再提供默认的构造器</p>
</blockquote>
<blockquote>
<p>因为构造器主要用于被其他方法调用，用以返回该类的实例，因而通常把构造器设置成 public 访问<br>权限，从而允许系统中任何位置的类来创建该类的对象。除非在一些极端的情况下，我们需要限制创建该类的对象，可以把构造器设置成其他访问权限，例如设置为 protected，主要用于被其子类调用；把其设置为 private，阻止其他类创建该类的实例。</p>
</blockquote>
<h1 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h1><h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h2><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public String toString()&#123;</span><br><span class="line"></span><br><span class="line">return &quot;&quot;;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">当使用System.out.println(对象)；时，自动调用toString()方法</span><br></pre></td></tr></table></figure>



<h3 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h3><p>判断是否为同管理一个对象</p>
<h1 id="控制反转与MVC"><a href="#控制反转与MVC" class="headerlink" title="控制反转与MVC"></a>控制反转与MVC</h1><p>GUI（图形用户界面）给应用程序提供界面,其中包括窗口、菜单、按钮和其他图形组件,这就是今天大多 数人所熟悉的“典型”应用程序界面。</p>
<p>图形用户界面所涉及的细节很多,我们的课程并不打算教授GUI，但是我们打算借助GUI来介绍两个设计思想：控制反转和MVC设计模式。</p>
<p>部件是创建GUI的独立部分,比如像按钮、菜单、菜单项、选择框、滑动条、文本框等。Java类库中有不少现成的部件。</p>
<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><blockquote>
<p>布局是指如何在屏幕上放置组件。过去,大多数简单的GUI系统让程序员在二维坐标系上 指定每个组件的x和y坐标(以像素点为单位),这对于现代的GUI系统来说太简单了。因为现代的GUI系统还得考虑不同的屏幕分辨率、不同的字体、用户可改变的窗口尺寸,以及许多其他使得布局困难的因素。所以需要有一种能更通用地指定布局的方法,比如,要求“这个部件应该在那个部件的下面“或者”这个部件在窗口改变尺寸时能自动拉伸,但是其他部件保持尺寸不变”。这些可以通过布局管理器(layout manager)来实现。</p>
</blockquote>
<p><strong>事件</strong>：</p>
<p>事件处理是用来响应用户输入的技术。创建了部件并且放在屏幕上合适的位置以后,就得 要有办法来处理诸如用户点击按钮这样的事情。Java类库处理这类事情的模型是基于事件的。 如果用户激活了一个部件(比如,点击按钮或者选择菜单项),系统就会产生一个事件。应用 程序可以收到关于这个事件的通知(以程序的一个方法被调用的方式),然后就可以采取程序该做的动作了。</p>
<h2 id="控制反转-注入反转"><a href="#控制反转-注入反转" class="headerlink" title="控制反转/注入反转"></a>控制反转/注入反转</h2><p><strong>swing</strong>:<br>Swing使用一个非常灵活的模型来处理GUI的输入:采用事件监听器的事件处理(event handling)模型。</p>
<p>Swing框架本身以及大部分部件在发生一些情况时会触发相关的事件,而其他的对象也许会对这些事件感兴趣。不同类型的动作会导致不同类型的事件。当点击一个按钮或选中一个菜单项,部件就会触发动作事件;而当点击或移动鼠标时,会触发鼠标事件;当框架被关闭或最小化时,会触发窗口事件。另外还有许多种其他事件。</p>
<p>所有的对象都可以成为任何这些事件的监听器,而一旦成为监听器,就可以得到这些事件触发的通知。</p>
<p>实现了众多监听器接口之一的对象就成为一个事件监听器。如果对象实现了恰当的接口, 就可以注册到它想监听的组件上。</p>
<p><strong>内部类</strong>：</p>
<p>内部类就是指一个类定义在另一个类的内部，从而成为外部类的一个成员。因此一个类中可以有成员变量、方法，还可以有内部类。实际上Java的内部类可以被称为成员类，内部类实际上是它所在类的成员。所以内部类也就具有和成员变量、成员方法相同的性质。比如，成员方法可以访问私有变量，那么成员类也可以访问私有变量了。也就是说，成员类中的成员方法都可以访问成员类所在类的私有变量。<strong>内部类最重要的特点就是能够访问外部类的所有成员。</strong></p>
<blockquote>
<p>内部类又分为成员内部类<br>函数内部类，匿名类</p>
</blockquote>
<p>Swing的消息机制广泛使用匿名类</p>
<h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><p>M</p>
<p>V</p>
<p>C</p>
<blockquote>
<p>C与V逻辑上是没有关系的，C不知道V，C只通知M，V会去M那得到所有数据，重新画一遍，不关心具体细节。<br><strong>V常常与C合并在一起。</strong></p>
</blockquote>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="javase"><a href="#javase" class="headerlink" title="javase"></a>javase</h2><h3 id="构造器问题"><a href="#构造器问题" class="headerlink" title="构造器问题"></a>构造器问题</h3><blockquote>
<p>问：一个类中的静态方法可以访问构造方法？</p>
<p>答：<code>分清楚是new Object(),还是Object()</code></p>
</blockquote>
<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="辗转相除法-求最大公约数"><a href="#辗转相除法-求最大公约数" class="headerlink" title="辗转相除法 求最大公约数"></a>辗转相除法 求最大公约数</h2><p>这里有两个数 u,v，求最大公约数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int u&#x3D;32;</span><br><span class="line">int v&#x3D;26;</span><br><span class="line">while(v!&#x3D;0)&#123;</span><br><span class="line">    int temp&#x3D;u%v;</span><br><span class="line">    u&#x3D;v;</span><br><span class="line">    v&#x3D;temp;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(u);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol>
<li>如果v=0,u就是最大公约数；</li>
<li>否则，计算u除以v的余数，让u等于v，而v等于那个余数。</li>
<li>直到第一步。</li>
</ol>
<h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><h2 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h2><h3 id="这个厉害"><a href="#这个厉害" class="headerlink" title="这个厉害"></a>这个厉害</h3><p>阿里巴巴，可投简历：</p>
<p>实在厉害</p>
<p><a href="https://www.hollischuang.com/">https://www.hollischuang.com/</a></p>
<h1 id="项目1：坦克大战"><a href="#项目1：坦克大战" class="headerlink" title="项目1：坦克大战"></a>项目1：坦克大战</h1><p><a href="https://blog.csdn.net/zhujunxxxxx/article/details/40460931">https://blog.csdn.net/zhujunxxxxx/article/details/40460931</a></p>
<p><a href="http://qq-24665727.iteye.com/blog/2261314">http://qq-24665727.iteye.com/blog/2261314</a></p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据</title>
    <url>/2018/11/25/%E5%A4%A7%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p>初识大数据</p>
<p>Hadoop</p>
<p><a href="http://dblab.xmu.edu.cn/blog/285/">http://dblab.xmu.edu.cn/blog/285/</a></p>
<a id="more"></a>

<h1 id="大数据概述"><a href="#大数据概述" class="headerlink" title="大数据概述"></a>大数据概述</h1><h2 id="三次信息化浪潮"><a href="#三次信息化浪潮" class="headerlink" title="三次信息化浪潮"></a>三次信息化浪潮</h2><p>根据IBM前首席执行官郭士纳的观点， IT领域每隔十五年就会迎来一次重大变革 ：</p>
<table>
<thead>
<tr>
<th>信息化浪潮</th>
<th>发生时间</th>
<th>标志</th>
<th>解决问题</th>
<th>代表企业</th>
</tr>
</thead>
<tbody><tr>
<td>第一次浪潮</td>
<td>1980年前后</td>
<td>个人计算机</td>
<td>信息处理</td>
<td>Intel、 AMD、 IBM、苹 果、微软、联想、戴 尔、惠普等</td>
</tr>
<tr>
<td>第二次浪潮</td>
<td>1995年前后</td>
<td>互联网</td>
<td>信息传输</td>
<td>雅虎、谷歌、阿里巴 巴、百度、腾讯等</td>
</tr>
<tr>
<td>第三次浪潮</td>
<td>2010年前后</td>
<td>物联网、云计 算和大数据</td>
<td>信息爆炸</td>
<td>将涌现出一批新的市 场标杆企业</td>
</tr>
</tbody></table>
<h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><blockquote>
<p>数据存储：压缩</p>
<p>来自斯威本科技大学（Swinburne University of Technology）的研究团队，在2013年6月29日刊出的《自然通讯（Nature Communications） 》 杂志的文章中，描述了一种全新的数据存储方式，可1PB（1024TB）的数据存储到一张仅DVD大小的聚合、物碟片上。 </p>
</blockquote>
<p>cpu中晶体管数量</p>
<h3 id="RFID"><a href="#RFID" class="headerlink" title="RFID"></a>RFID</h3><p>感知使系统。</p>
<h2 id="大数据发展历程"><a href="#大数据发展历程" class="headerlink" title="大数据发展历程"></a>大数据发展历程</h2><table>
<thead>
<tr>
<th>阶段</th>
<th>时间</th>
<th>内容</th>
</tr>
</thead>
<tbody><tr>
<td>第一阶段：萌芽 期</td>
<td>上世纪90年代 至本世纪初</td>
<td>随着数据挖掘理论和数据库技术的逐步成熟，一批 商业智能工具和知识管理技术开始被应用，如数据 仓库、专家系统、知识管理系统等。</td>
</tr>
<tr>
<td>第二阶段：成熟 期</td>
<td>本世纪前十年</td>
<td>Web2.0应用迅猛发展，非结构化数据大量产生， 传统处理方法难以应对，带动了大数据技术的快速 突破，大数据解决方案逐渐走向成熟，形成了并行 计算与分布式系统两大核心技术，谷歌的GFS和 MapReduce等大数据技术受到追捧， Hadoop平台 开始大行其道</td>
</tr>
<tr>
<td>第三阶段：大规 模应用期</td>
<td>2010年以后</td>
<td>大数据应用渗透各行各业，数据驱动决策，信息社 会智能化程度大幅提高</td>
</tr>
</tbody></table>
<h2 id="4V"><a href="#4V" class="headerlink" title="4V"></a>4V</h2><ul>
<li>数据量大 volume</li>
<li>数据类型多 variety</li>
</ul>
<p>大数据是由结构化和非结构化数据组成的<br>– 10%的结构化数据，存储在数据库中<br>– 90%的非结构化数据，它们与人类信息密切相关 </p>
<ul>
<li>处理速度快 velocity</li>
</ul>
<p>1秒定律</p>
<ul>
<li>value 价值密度低</li>
</ul>
<p>以视频为例，连续不间断监控过程中，可能有用的数据仅仅有一两秒，但是具有很高的商业价值 </p>
<h2 id="大数据影响"><a href="#大数据影响" class="headerlink" title="大数据影响"></a>大数据影响</h2><blockquote>
<p>图灵奖获得者、著名数据库专家Jim Gray 博士观察并总结人类自古以来，在科学研究上，先后历经了<strong>实验、理论、计算和数据</strong>四种范式 </p>
</blockquote>
<h2 id="大数据技术"><a href="#大数据技术" class="headerlink" title="大数据技术"></a>大数据技术</h2><p>大数据技术的不同层面及其功能</p>
<table>
<thead>
<tr>
<th>技术层面</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>数据采集</td>
<td>利用ETL工具将分布的、异构数据源中的数据如关系数据、平面数 据文件等，抽取到临时中间层后进行清洗、转换、集成，最后加载 到数据仓库或数据集市中，成为联机分析处理、数据挖掘的基础； 或者也可以把实时采集的数据作为流计算系统的输入，进行实时处 理分析</td>
</tr>
<tr>
<td>数据存储和管理</td>
<td>利用分布式文件系统、数据仓库、关系数据库、 NoSQL数据库、云 数据库等，实现对结构化、半结构化和非结构化海量数据的存储和 管理</td>
</tr>
<tr>
<td>数据处理与分析</td>
<td>利用分布式并行编程模型和计算框架，结合机器学习和数据挖掘算 法，实现对海量数据的处理和分析；对分析结果进行可视化呈现， 帮助人们更好地理解数据、分析数据</td>
</tr>
<tr>
<td>数据隐私和安全</td>
<td>在从大数据中挖掘潜在的巨大商业价值和学术价值的同时，构建隐 私数据保护体系和数据安全体系，有效保护个人隐私和数据安全</td>
</tr>
</tbody></table>
<h3 id="两大关键技术"><a href="#两大关键技术" class="headerlink" title="两大关键技术"></a>两大关键技术</h3><ul>
<li><p>分布式存储</p>
</li>
<li><p>分布式处理</p>
</li>
</ul>
<h3 id="计算模式"><a href="#计算模式" class="headerlink" title="计算模式"></a>计算模式</h3><table>
<thead>
<tr>
<th>大数据计算模式</th>
<th>解决问题</th>
<th>代表产品</th>
</tr>
</thead>
<tbody><tr>
<td>批处理计算</td>
<td>针对大规模数据的批量 处理</td>
<td>MapReduce、 Spark等</td>
</tr>
<tr>
<td>流计算</td>
<td>针对流数据的实时计算</td>
<td>Storm、 S4、 Flume、 Streams、 Puma、 DStream、 Super Mario、银 河流数据处理平台等</td>
</tr>
<tr>
<td>图计算</td>
<td>针对大规模图结构数据 的处理</td>
<td>Pregel、 GraphX、 Giraph、 PowerGraph、 Hama、 GoldenOrb等</td>
</tr>
<tr>
<td>查询分析计算</td>
<td>大规模数据的存储管理 和查询分析</td>
<td>Dremel、 Hive、 Cassandra、 Impala 等</td>
</tr>
</tbody></table>
<h2 id="大数据，云计算，物联网"><a href="#大数据，云计算，物联网" class="headerlink" title="大数据，云计算，物联网"></a>大数据，云计算，物联网</h2><h3 id="云计算"><a href="#云计算" class="headerlink" title="云计算"></a>云计算</h3><p>• 云计算实现了通过网络提供可伸缩的、廉价的分布式计算能力，用户只需要在具备网络接入条件的地方，就可以随时随地获得所需的各种IT资源</p>
<p><strong>SaaS</strong> Software as a Service   Google Apps, Microsoft “Software+Services”<br><strong>PaaS</strong> Platform as a Service   IBM IT factory, Google App Engine, Force.com<br><strong>IaaS</strong> Infrastructure as a Service  Amazon EC2, IBM Blue Cloud, Sun Grid </p>
<p><strong>云计算关键技术包括：虚拟化、分布式存储、分布式计算、多租户等</strong> </p>
<h3 id="云计算数据中心"><a href="#云计算数据中心" class="headerlink" title="云计算数据中心"></a>云计算数据中心</h3><p>复杂，刀片服务器，温度</p>
<h3 id="物联网"><a href="#物联网" class="headerlink" title="物联网"></a>物联网</h3><p>关键技术包括识别和感知技术（二维码、 RFID、传感器等）、网络与通信技术、数据挖掘与融合技术等 rfid芯片公交卡</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>云计算为大数据提供了技术基础<br>大数据为云计算提供用武之地 </p>
<p>物联网是大数据的重要来源<br>大数据技术为物联网数据分析提供支撑 </p>
<p>云计算为物联网提供海量数据存储能力<br>物联网为云计算技术提供了广阔的应用空间 </p>
<h1 id="初识hadoop"><a href="#初识hadoop" class="headerlink" title="初识hadoop"></a>初识hadoop</h1><p><img src="/images/bigdata/h1.png"></p>
<p><img src="/images/bigdata/h2.png"></p>
<p>Hadoop项目结构 :</p>
<table>
<thead>
<tr>
<th>组件</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>HDFS</td>
<td>分布式文件系统</td>
</tr>
<tr>
<td>MapReduce</td>
<td>分布式并行编程模型</td>
</tr>
<tr>
<td>YARN</td>
<td>资源管理和调度器</td>
</tr>
<tr>
<td>Tez</td>
<td>运行在YARN之上的下一代Hadoop查询处理框架</td>
</tr>
<tr>
<td>Hive</td>
<td>Hadoop上的数据仓库</td>
</tr>
<tr>
<td>HBase</td>
<td>Hadoop上的非关系型的分布式数据库</td>
</tr>
<tr>
<td>Pig</td>
<td>一个基于Hadoop的大规模数据分析平台，提供类似SQL的查询语言Pig Latin</td>
</tr>
<tr>
<td>Sqoop</td>
<td>用于在Hadoop与传统数据库之间进行数据传递</td>
</tr>
<tr>
<td>Oozie</td>
<td>Hadoop上的工作流管理系统</td>
</tr>
<tr>
<td>Zookeeper</td>
<td>提供分布式协调一致性服务</td>
</tr>
<tr>
<td>Storm</td>
<td>流计算框架</td>
</tr>
<tr>
<td>Flume</td>
<td>一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统</td>
</tr>
<tr>
<td>Ambari</td>
<td>Hadoop快速部署工具，支持Apache Hadoop集群的供应、管理和监控</td>
</tr>
<tr>
<td>Kafka</td>
<td>一种高吞吐量的分布式发布订阅消息系统，可以处理消费者规模的网站中的所有动作流数据</td>
</tr>
<tr>
<td>Spark</td>
<td>类似于Hadoop MapReduce的通用并行框架</td>
</tr>
</tbody></table>
<p>• Hadoop是Apache软件基金会旗下的一个开源分布式计算平台，为用户提供了系统底层细节透明的分布式基础架构<br>• Hadoop是基于Java语言开发的，具有很好的跨平台特性，并且可以部署在廉价的计算机集群中<br>• Hadoop的核心是分布式文件系统HDFS（Hadoop Distributed File System）和MapReduce<br>• Hadoop被公认为行业大数据标准开源软件，在分布式环境下提供了海量数据的处理能力<br>• 几乎所有主流厂商都围绕Hadoop提供开发工具、开源软件、商业化工具和技术服务，如谷歌、雅虎、微软、思科、淘宝等，都支持Hadoop </p>
<p>NDFS（Nutch Distributed File System），也就是HDFS的前身 </p>
<p>• 2004年，谷歌公司又发表了另一篇具有深远影响的论文，阐述了MapReduce分布式编程思想<br>• 2005年， Nutch开源实现了谷歌的MapReduce </p>
<p>可查看hadoop的生态系统图！！</p>
<h2 id="Hadoop安装方式"><a href="#Hadoop安装方式" class="headerlink" title="Hadoop安装方式"></a>Hadoop安装方式</h2><p>下载hadoop： xxx.tar.gz</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">解压： tar -zxf xxx.tar.gz -C /usr/<span class="built_in">local</span>/</span><br></pre></td></tr></table></figure>

<blockquote>
<p>/usr/local目录：</p>
<p><a href="http://www.ruanyifeng.com/blog/2012/02/a_history_of_unix_directory_structure.html">http://www.ruanyifeng.com/blog/2012/02/a_history_of_unix_directory_structure.html</a></p>
</blockquote>
<blockquote>
<p>/usr/local/  存放用户自己安装的程序。</p>
<p><strong>/opt</strong>：在某些系统，用于存放第三方厂商开发的程序，所以取名为option，意为”选装”。</p>
</blockquote>
<p>《Hadoop安装教程_单机/伪分布式配置_Hadoop2.6.0/Ubuntu14.04》<br><a href="http://dblab.xmu.edu.cn/blog/install-hadoop/">http://dblab.xmu.edu.cn/blog/install-hadoop/</a> </p>
<p>访问地址:<a href="http://dblab.xmu.edu.cn/blog/285/">http://dblab.xmu.edu.cn/blog/285/</a></p>
<blockquote>
<p>hadoop学习指南：<a href="http://dblab.xmu.edu.cn/blog/285/">http://dblab.xmu.edu.cn/blog/285/</a></p>
</blockquote>
<h3 id="创建hadoop用户"><a href="#创建hadoop用户" class="headerlink" title="创建hadoop用户"></a>创建hadoop用户</h3><p>添加相应的权限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">填。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。</span><br><span class="line"></span><br><span class="line">1.类ubuntu：</span><br><span class="line"></span><br><span class="line"><span class="variable">$sudo</span> useradd -m hadoop</span><br><span class="line">或者：<span class="variable">$sudo</span> useradd -m hadoop -s /bin/bash</span><br><span class="line"></span><br><span class="line">-m 顺便创建家目录。</span><br><span class="line"></span><br><span class="line">-s 指定bash为shell，默认就是他</span><br><span class="line"></span><br><span class="line">2. 然后要设置密码</span><br><span class="line"></span><br><span class="line"><span class="variable">$sudo</span> password hadoop</span><br><span class="line"></span><br><span class="line">3. 为hadoop添加管理员权限</span><br><span class="line"></span><br><span class="line"><span class="variable">$sudo</span> adduser hadoop sudo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>hadoop版本问题：</p>
<h3 id="SSH登录权限设置"><a href="#SSH登录权限设置" class="headerlink" title="SSH登录权限设置"></a>SSH登录权限设置</h3><blockquote>
<p>配置ssh，可实现其它机器无密码登陆。</p>
<p>hadoop的名称节点负责启动集群中的所有节点，名称节点需要登陆其他机器，hadoop没有密码登陆其他机器的功能，所以需要无密码登陆。</p>
</blockquote>
<p>Secure Shell 的缩写：</p>
<blockquote>
<p>一个安全协议，建立在应用层和传输层。</p>
<p>一般用于 远程登陆会话。一种安全性协议。</p>
<p>最初是unix上的一个程序。</p>
<p>ssh由客户端与服务端两个组成。</p>
<p>​    服务端是一个守护进程（daemon），在后端运行，负责接受客户端的请求。</p>
<p>​    客户端除了ssh本身，还像scp(远程拷贝)、slogin(远程登陆)、sftp(安全文件传输)等其他的应用程序。</p>
</blockquote>
<p>配置SSH的原因：<br>Hadoop名称节点（NameNode）需要启动集群中所有机器的Hadoop守护进程，这个过程需要通过SSH登录来实现。 Hadoop并没有提供SSH输入密码登录的形式，因此，为了能够顺利登录每台机器，需要将所有机器配置为名称节点可以无密码登录它们 </p>
<h3 id="安装java开发环境"><a href="#安装java开发环境" class="headerlink" title="安装java开发环境"></a>安装java开发环境</h3><h3 id="配置hadoop"><a href="#配置hadoop" class="headerlink" title="配置hadoop"></a>配置hadoop</h3><h3 id="三种安装方式："><a href="#三种安装方式：" class="headerlink" title="三种安装方式："></a>三种安装方式：</h3><blockquote>
<p>这三种方式的配置有区别！！！</p>
</blockquote>
<p>《Hadoop安装教程_单机/伪分布式配置_Hadoop2.6.0/Ubuntu14.04》<br><a href="http://dblab.xmu.edu.cn/blog/install-hadoop/">http://dblab.xmu.edu.cn/blog/install-hadoop/</a></p>
<p><strong>单机模式：</strong></p>
<p><strong>伪分布式模式</strong>：</p>
<blockquote>
<p>Hadoop 可以在单节点上以伪分布式的方式运行,Hadoop 进程以分离的 Java 进程来运行,节点既作为 NameNode 也作为 DataNode,同时,读取的是HDFS 中的文件.</p>
<p>我目前学习的就是这种！</p>
</blockquote>
<h4 id="修改两个文件："><a href="#修改两个文件：" class="headerlink" title="修改两个文件："></a>修改两个文件：</h4><blockquote>
<p>/usr/local/hadoop/etc/hadoop/ 中,伪分布式需要修改2个配置文件 core-site.xml 和 hdfs-site.xml</p>
<p>xml 格式,每个配置以声明 property 的 name和 value 的方式来实现</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">core-site.xml:</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">description</span>&gt;</span>Abase for other temporary directories.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">临时存放数据目录，NameNode的数据，也包括DataNode的数据。该路径任意指定,只要实际存在该文件夹即可。</span><br><span class="line"></span><br><span class="line">* name为fs.defaultFS的值,表示hdfs路径的逻辑名称，也就是浏览器访问路径。</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop/tmp/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop/tmp/dfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">几个name：</span><br><span class="line"></span><br><span class="line">•dfs.replication		表示副本的数量,伪分布式要设置为1</span><br><span class="line">•dfs.namenode.name.dir  表示本地磁盘目录,是存储fsimage文件的地方</span><br><span class="line">•dfs.datanode.data.dir  表示本地磁盘目录,HDFS数据存放block的地方</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<blockquote>
<p>三种shell命令方式的区别： 本地文件系统与hdfs文件系统的区别。</p>
<ol>
<li>hadoop fs  适用不同的文件系统</li>
<li>hadoop dfs  只适用与hdfs文件系统</li>
<li>hdfs dfs  同上</li>
</ol>
</blockquote>
<h2 id="hadoop-集群中的节点类型"><a href="#hadoop-集群中的节点类型" class="headerlink" title="hadoop 集群中的节点类型"></a>hadoop 集群中的节点类型</h2><blockquote>
<p>Hadoop框架中最核心的设计是为海量数据提供存储的HDFS和对数据进行计算的 MapReduce</p>
<p>MapReduce的作业主要包括:</p>
<p>​    (1)从磁盘或从网络读取数据,即IO密集工作;</p>
<p>​    (2)计算数据,即CPU密集工作</p>
</blockquote>
<p><strong>一个基本的Hadoop集群中的节点主要有</strong><br>•NameNode:负责协调集群中的数据存储<br>•DataNode:存储被拆分的数据块<br>•JobTracker:协调数据计算任务<br>•TaskTracker:负责执行由JobTracker指派的任务<br>•SecondaryNameNode:帮助NameNode收集文件系统运行的状态信息</p>
<h2 id="Hadoop-企业去部署它"><a href="#Hadoop-企业去部署它" class="headerlink" title="Hadoop 企业去部署它"></a>Hadoop 企业去部署它</h2><blockquote>
<p>MapReduce有两大核心组件。处理作业</p>
<p>JobTracker：相当于一个作业管家，一个大作业拆分为一个个小的作业，分发到不同的机器去处理。</p>
<p>TaskTracker：不同的机器上都有一个，负责跟踪和执行分配给自己的小作业。</p>
</blockquote>
<blockquote>
<p>HDFS的组件，SecondNameNode在1.0版本中不是热备份。</p>
</blockquote>
<p>一个机器节点可以是TaskTracker也可以是DataNode.</p>
<p>现在问题来啦，怎么选硬件呢？？</p>
<p>NameNode的数据大部分都是存储在内存当中的。所以内存要特别大。16～72G，内存要进行通道优化</p>
<p>集群可能有几千台，以T增加，还有日志文件，在大集群里，NameNode 与JobTracker一般是两个机器。</p>
<p>自动化部署工具，然后测试，HDFS与MapReduce</p>
<p>在云计算部署，</p>
<h2 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h2><p>Amazon EC2运行hadoop。弹性云</p>
<h1 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h1><blockquote>
<p>分布式文件系统：（Distributed File System):把文件分布存储到多个计算机节点上，成千上万的计算机节点构成计算机集群 .<br>目前的分布式文件系统所采用的计算机集群，都是由普通硬件构成的，这就大大降低了硬件上的开销 .</p>
</blockquote>
<p><strong>分布式文件系统在物理结构上是由计算机集群中的多个节点构成的，这些节点分为两类，一类叫“主节点” (Master Node)或者也被称为“名称结点” (NameNode)，另一类叫“从节点”（Slave Node）或者也被称为“数据节点” (DataNode)</strong> </p>
<p>hdfs:(hadoop distributed file system) </p>
<p><strong>目的：</strong></p>
<p>●兼容廉价的硬件设备<br>●流数据读写<br>●大数据集<br>●简单的文件模型，只允许追加，不允许修改<br>●强大的跨平台兼容性 </p>
<p><strong>缺陷：</strong></p>
<p>●不适合低延迟数据访问<br>●无法高效存储大量小文件<br>●不支持多用户写入及任意修改文件 </p>
<h2 id="HDFS相关概念："><a href="#HDFS相关概念：" class="headerlink" title="HDFS相关概念："></a>HDFS相关概念：</h2><p>关键词： 块，名称节点，数据节点，第二名称节点</p>
<h3 id="块："><a href="#块：" class="headerlink" title="块："></a>块：</h3><p>为提高磁盘读写效率，不以字节为单位。 默认大小是64MB。</p>
<blockquote>
<p>一个文件可以被分为许多的块，以块为存储单位，例如机械硬盘寻找数据时，可以最小化寻址开销。<br>每个块可以冗余存储到多个节点上。<br>可以分离出元数据来放到不同的文件系统上。</p>
</blockquote>
<h3 id="名称节点与数据节点"><a href="#名称节点与数据节点" class="headerlink" title="名称节点与数据节点"></a>名称节点与数据节点</h3><p><em>名称节点</em>：NameNode</p>
<blockquote>
<p>负责管理分布式文件系统的命名空间（Namespace），保存了两个核心的数据结构，即FsImage和EditLog .</p>
<ul>
<li>FsImage用于维护文件系统树以及文件树中所有的文件和文件夹的<strong>元数据</strong> ,也就是数据在哪里</li>
<li>操作日志文件EditLog中记录了所有针对文件的<strong>创建、删除、重命名等操作</strong> .</li>
</ul>
</blockquote>
<p>FsImage文件:包含文件系统中所有<strong>目录和文件inode的序列化形式</strong>。 </p>
<blockquote>
<p>每个inode是一个<strong>文件或目录的元数据</strong>的内部表示，并包含此类信息： 文件的复制等级、修改和访问<br>修改和访问时间、访问权限、块大小以及组成文件的块。对于目录，则存储修改时间、权限和配额元数据 </p>
<p><strong>FsImage文件没有记录块存储在哪个数据节点</strong>。即不持久化存储这些信息，在系统启动时扫描所有数据节点重构得到这些信息。</p>
<p>由名称节点把这些映射保留在内存中，当数据节点加入HDFS集群时，数据节点会把自己所包含的块列表告知给名称节点，此后会定期执行这种告知操作，以确保名称节点的块映射是最新的。 是在内存中</p>
</blockquote>
<p><u>名称节点的启动</u>：如何处理这两大数据结构的</p>
<blockquote>
<p>shell命令    在名称节点启动的时候，<strong>它会将FsImage文件中的内容加载到内存中</strong>，之后再执行EditLog文件中的各项操作，<strong>使得内存中的元数据和实际的同步</strong>，<em>存在内存中的元数</em> </p>
<p><em>据支持客户端的读操作</em>。 </p>
<p>一旦在内存中成功建立文件系统元数据的映射，**<strong>则创建一个新的FsImage文件和一个</strong>空的EditLog文件** </p>
<p>名称节点起来之后， HDFS中的更新操作会重新写到EditLog文件中，因为FsImage文件一般都很大（GB级别的很常见），   <strong>如果所有的更新操作都往FsImage文件中添</strong>加，这样会导致系统运行的十分缓慢<strong>，  但是，如果往EditLog文件里面写就不会这样，</strong>因为EditLog 要小很多**。每次执行写操作之后，且在向客户端发送成功代码之前，edits文件都需要同步更新 </p>
</blockquote>
<p><u>名称节点运行期间EditLog不断变大的问题</u> :</p>
<blockquote>
<p>在名称节点运行期间， HDFS的所有更新操作都是直接写到EditLog中，久而久之， EditLog文件将会变得很大 .</p>
<p>当名称节点重启的时候，名称节点需要先将FsImage里面的所有内容映像到内存中，然后再一条一条地执行EditLog中的记录，当EditLog文件非常大的时候，会导致名称节点启动操作非常慢，而在这段时间内HDFS系统处于安全模式，一直无法对外提供写操作，影响了用户的使用 .解决方法是使用<strong>第二名称节点</strong>：</p>
<p><em>第二名称节点</em>：是HDFS架构中的一个组成部分，它<strong>是用来保存名称节点中对HDFS 元</strong> <strong>数据信息的备份</strong>，并减少名称节点重启的时间。 SecondaryNameNode一般是单独运行在一台机器 。</p>
</blockquote>
<p><strong>SecondaryNameNode的工作情况</strong>： </p>
<blockquote>
<p>（1） SecondaryNameNode会定期和NameNode通信，请求其停止使用EditLog文件，暂时将新的   <strong>写操作写到一个新的文件edit.new上来</strong>，这个操作是瞬间完成，上层写日志的函数完全感觉不到差别； </p>
<p>（2） SecondaryNameNode通过HTTP GET方式从NameNode上获取到FsImage和EditLog文件，并下载到本地的相应目录下； </p>
<p>（3） SecondaryNameNode将下载下来的FsImage载入到内存，然后一条一条地执行EditLog文件中的各项更新操作，使得内存中的FsImage保持最新；<strong>这个过程就是EditLog和</strong> <strong>FsImage文件合并</strong>； </p>
<p>（4） SecondaryNameNode执行完（3）操作之后，会通过post方式将新的FsImage文件发送到NameNode节点上 </p>
<p>（5） NameNode将从SecondaryNameNode接收到的新的FsImage替换旧的FsImage文件，同时将edit.new替换EditLog文件，通过这个过程EditLog就变小了 </p>
</blockquote>
<p><em>数据节点</em>：（DataNode） </p>
<blockquote>
<p>•数据节点是分布式文件系统HDFS的工作节点，负责数据的存储和读取，<strong>会根据客</strong> <strong>户端或者是名称节点的调度来</strong>进行数据的存储和检索，<strong>并且向名称节点定期发送自己</strong> <strong>所存储的块的列表</strong><br>每个数据节点中的数据会被保存在<strong>各自节点的本地Linux文件系统中</strong> </p>
</blockquote>
<h2 id="HDFS-体系结构"><a href="#HDFS-体系结构" class="headerlink" title="HDFS 体系结构"></a>HDFS 体系结构</h2><p>HDFS采用了主从（Master/Slave）结构模型，一个HDFS集群包括一个名称节点（NameNode）和若干个数据节点（DataNode） 。 </p>
<p>有图：HDFS体系结构。</p>
<h3 id="命名空间管理-NameNode"><a href="#命名空间管理-NameNode" class="headerlink" title="命名空间管理(NameNode)"></a>命名空间管理(NameNode)</h3><blockquote>
<p>• 在HDFS1.0体系结构中， 在整个HDFS集群中只有一个命名空间， <strong>并且只有唯一一个名称节点， 该节点负责对这个命名空间进行管理</strong> </p>
<p>命名空间管理：支持对HDFS中的目录，文件，和块做 创建，修改，删除等操作。</p>
</blockquote>
<h3 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h3><p>数据通过网络进行传输。    而传输就就需要传输协议，HDFS都是构建在TCP/IP协议基础之上的。</p>
<blockquote>
<p>• 客户端通过一个可配置的端口向名称节点主动发起TCP连接， 并使用客户端协议与名称节点进行交互 </p>
<p>• 名称节点和数据节点之间则使用数据节点协议进行交互 </p>
<p>• 客户端与数据节点的交互是通过RPC（Remote Procedure Call） 来实现的。 在设计上， 名称节点不会主动发起RPC， 而是响应来自客户端和数据节点的RPC请求 </p>
</blockquote>
<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><blockquote>
<p>HDFS客户端是一个库， 暴露了HDFS文件系统接口， 这些接口隐藏了HDFS实现中的大部分复杂性 </p>
<p>• 严格来说， 客户端并不算是HDFS的一部分<br>• 客户端可以支持打开、 读取、 写入等常见的操作， 并且提供了类似Shell的命令行方式来访问HDFS中的数据<br>• 此外， HDFS也提供了Java API， 作为应用程序访问文件系统的客户端编程接口 </p>
</blockquote>
<h3 id="HDFS体系结构的局限性"><a href="#HDFS体系结构的局限性" class="headerlink" title="HDFS体系结构的局限性"></a>HDFS体系结构的局限性</h3><p>（1） <strong>命名空间的限制：名称节点是保存在<u>内存中的</u>，因此，名称节点能够容纳的对象（文件、块）的个数会受到内存空间大小的限制。</strong><br>（2） 性能的瓶颈：整个分布式文件系统的吞吐量，受限于单个名称节点的吞吐量。名称节点<br>（3） 隔离问题：由于集群中只有一个名称节点，只有一个命名空间，因此，无法对不同应用程序进行隔离。<br>（4） <strong>集群的可用性：一旦这个唯一的名称节点发生故障，会导致整个集群变得不可用 。（单点故障，第二名称节点是冷备份！！hdfs1.0）</strong> hdfs2.0得到了改善，变成了热备份</p>
<h2 id="HDFS存储原理"><a href="#HDFS存储原理" class="headerlink" title="HDFS存储原理"></a>HDFS存储原理</h2><p>冗余数据保存问题    数据保存策略问题     数据恢复问题</p>
<p><img src="/images/bigdata/a1.png"></p>
<p><img src="/images/bigdata/a2.png"></p>
<ul>
<li>数据的冗余存储。</li>
</ul>
<blockquote>
<p>作为一个分布式文件系统，为了保证系统的容错性和可用性， HDFS采用了多副本方式对数据进行冗余存储，通常一个数据块的多个副本会被分布到不同的数据节点上,优点：</p>
<p> （1） 加快数据传输速度<br> （2） 容易检查数据错误<br> （3） 保证数据可靠性 </p>
</blockquote>
<ul>
<li>数据存取策略</li>
</ul>
<blockquote>
<ul>
<li>存储数据：默认是3个副本</li>
</ul>
<p>一个hdfs集群通常包含多个机架，不同的机架通过交换机或者路由器来数据通信.每个机架上有很多廉价的机器，成为数据节点。</p>
<p>•第一个副本：放置在上传文件的数据节点；如果是集群外提交，则随机挑选一台磁盘不太满、 CPU不太忙的节点<br>•第二个副本：放置在与第一个副本不同的机架的节点上<br>•第三个副本：与第一个副本相同机架的其他节点上<br>•更多副本：随机节点 </p>
<ul>
<li><p>读取数据：</p>
<p>就近读取，网络开销小。</p>
<p>怎么知道离客户端近？？<br>•HDFS提供了一个API可以确定一个数据节点所属的机架ID，客户端也可以调用API获取自己所属的机架ID<br>•当客户端读取数据时，从名称节点获得数据块不同副本的存放位置列表，列表中包含了副本所在的数据节点，可以调用API来确定客户端和这些数据节点所属的机架ID，当发现某个数据块副本对应的机架ID和客户端对应的机架ID相同时，就优先选择该副本读取数据，<strong>如果没有发现，就随机选择一个副本读取数据</strong>  </p>
</li>
<li><p>数据复制：</p>
<p>采用流水线复制策略，提高了效率。</p>
</li>
</ul>
</blockquote>
<ul>
<li><p>数据错误与恢复</p>
<p><img src="/images/bigdata/a3.png"></p>
<p><img src="/images/bigdata/a4.png"></p>
<p><img src="/images/bigdata/a5.png"></p>
<blockquote>
<p>HDFS具有较高的容错性，可以兼容廉价的硬件，<em>它把硬件出错看作一种常态，</em>而不是异常，并设计了相应的机制检测数据错误和进行自动恢复，主要包括以下几种情形：<strong>名称节点出错、数据节点出错和数据出错。</strong></p>
<ol>
<li><p>名称节点出错<br>名称节点保存了所有的元数据信息，其中，最核心的两大数据结构是<strong>FsImage</strong> <strong>和Editlog</strong>，如果这两个文件发生损坏，那么整个HDFS实例将失效。因此， HDFS设置了备份机制，把这些核心文件同步复制到备份服务器<strong>SecondaryNameNode上</strong>。当名称节点出错时，就可以根据备份服务器SecondaryNameNode中的FsImage和Editlog数据进行恢复 .</p>
</li>
<li><p>数据节点出错<br>•每个数据节点会<strong>定期向名称节点发送“心跳”信息</strong>，向名称节点报告自己的状态<br>•当数据节点发生故障，或者网络发生断网时，名称节点就无法收到来自一些数据节点的心跳信息，这时，这些数据节点就会被标<strong>记为“宕机”</strong>，节点上面的所有数据都会被标记为“不可读”，名称节点不会再给它们发送任何I/O请求<br>•这时，有可能出现一种情形，即由于一些数据节点的不可用，会导致一些数据块的副本数量小于冗余因子<br>•名称节点会定期检查这种情况，一旦发现某个数据块的副本数量小于冗余因子，就会启动数据冗余复制，为它生成新的副本<br>•HDFS和其它分布式文件系统的最大区别就是可以调整冗余数据的位置 </p>
</li>
<li><p>数据出错<br>•网络传输和磁盘错误等因素，都会造成数据错误<br>•客户端在读取到数据后，<strong>会采用md5和sha1对数据块进行校验，</strong>以确定读取到正确的数据<br>•在文件<strong>被创建时</strong>，客户端就会对每一个文件块进行信息摘录，并把这些信息写入到同一个路径的隐藏文件里面•当客户端读取文件的时候，会先读取该信息文件，然后，利用该信息文件对每个读取的数据块进行校验，如果校验出错，客户端就会请求到另外一个数据节点读取该文件块，并且向名称节点报告这个文件块有错误，名称节点会定期检查并且重新复制这个块      </p>
</li>
</ol>
</blockquote>
</li>
</ul>
<h2 id="读写过程"><a href="#读写过程" class="headerlink" title="读写过程"></a>读写过程</h2><h3 id="读文件代码："><a href="#读文件代码：" class="headerlink" title="读文件代码："></a>读文件代码：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader ;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration ;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem ;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path ;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataInputStream ;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter3</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	Configuration conf = <span class="keyword">new</span> Configuration();<span class="comment">//构造方法</span></span><br><span class="line">	FileSystem fs = FileSystem.get(conf);<span class="comment">//使用环境变量</span></span><br><span class="line">	Path filename = <span class="keyword">new</span> Path(“hdfs:<span class="comment">//localhost:9000/user/hadoop/test.txt&quot;);//访问hdfs文件系统下的文件</span></span><br><span class="line">	FSDataInputStream is = fs.open(filename);</span><br><span class="line">	BufferedReader d = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</span><br><span class="line">	String content = d.readLine(); <span class="comment">//读取文件一行</span></span><br><span class="line">	System.out.println(content);</span><br><span class="line">	d.close(); <span class="comment">//关闭文件</span></span><br><span class="line">	fs.close(); <span class="comment">//关闭hdfs</span></span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">	e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="写文件代码："><a href="#写文件代码：" class="headerlink" title="写文件代码："></a>写文件代码：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataOutputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter3</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">	FileSystem fs = FileSystem.get(conf);</span><br><span class="line">	<span class="keyword">byte</span>[] buff = <span class="string">&quot;Hello world&quot;</span>.getBytes(); <span class="comment">// 要写入的内容</span></span><br><span class="line">	String filename = <span class="string">&quot; hdfs://localhost:9000/user/hadoop/test.txt &quot;</span>; <span class="comment">//要写入的文件名</span></span><br><span class="line">	FSDataOutputStream os = fs.create(<span class="keyword">new</span> Path(filename));</span><br><span class="line">	os.write(buff,<span class="number">0</span>,buff.length);</span><br><span class="line">	System.out.println(<span class="string">&quot;Create:&quot;</span>+ filename);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>解释</strong>：</p>
<p><img src="/images/bigdata/a6.png"></p>
<blockquote>
<p>•FileSystem是一个通用文件系统的抽象基类，可以被分布式文件系统继承，所有可能使用Hadoop文件系统的代码，都要使用这个类 </p>
<p>•Hadoop为FileSystem这个抽象类提供了多种具体实现<br>•DistributedFileSystem就是FileSystem在HDFS文件系统中的具体实现 </p>
<p>•FileSystem的open()方法返回的是一个输入流FSDataInputStream对象，在HDFS文件系统中，具体的输入流就是DFSInputStream； FileSystem中的create()方法返回的是一个输出流FSDataOutputStream对象，在HDFS文件系统中，具体的输出流就是DFSOutputStream。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">&gt;FileSystem fs = FileSystem.get(conf);</span><br><span class="line">&gt;FSDataInputStream in = fs.open(<span class="keyword">new</span> Path(uri));</span><br><span class="line">&gt;FSDataOutputStream out = fs.create(<span class="keyword">new</span> Path(uri));</span><br></pre></td></tr></table></figure>

<p>备注： <strong>创建一个Configuration对象时，其构造方法会默认加载工程项目下两个配置文件，分别是</strong> <strong>hdfs-site.xml以及core-site.xml，</strong>这两个文件中会有访问HDFS所需的参数值，主要是<em>fs.defaultFS</em>（指定了HDFS的地址（比如hdfs://localhost:9000）） ，有了这个地址客户端就可以通过这个地址访问HDFS了 </p>
</blockquote>
<h3 id="读文件具体过程："><a href="#读文件具体过程：" class="headerlink" title="读文件具体过程："></a>读文件具体过程：</h3><p>看图：</p>
<p><img src="/images/bigdata/a7.png"></p>
<blockquote>
<p>客户端调用 open(),read(),close() 读取数据</p>
</blockquote>
<ul>
<li><p>1.打开文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//生成了：FileSystem其实是个 DistributedFileSystem</span></span><br><span class="line"><span class="comment">//操作：通过FileSystem.open()打开文件</span></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem</span><br><span class="line">Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">FileSystem fs = FileSystem.get(conf);<span class="comment">//生成了：FileSystem其实是个 DistributedFileSystem</span></span><br><span class="line">FSDataInputStream in = fs.open(<span class="keyword">new</span> Path(uri));<span class="comment">//创建输入流。uri文件地址	</span></span><br><span class="line"><span class="comment">//封装了DFSInputStream,由它来真正和名称节点打交道。</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>





</li>
</ul>
<ul>
<li><p>2.获取数据块信息</p>
<blockquote>
<p>DFSInputStream的构造函数通过ClientProtocal.getBlockLocations()</p>
<blockquote>
<p>远程调用<strong>名称节点</strong>，获得文件开始部分数据块的位置</p>
<blockquote>
<p>对于该数据块，名称节点返回保存该数据块的所有数据节点的地址并根据<strong>距离客户端远近进行排序</strong> </p>
<p>DistributedFileSystem利用DFSInputStream来实例化FSDataInputStream,返回给客户端。</p>
</blockquote>
</blockquote>
</blockquote>
</li>
<li><ol start="3">
<li>读取请求 read()函数</li>
</ol>
<blockquote>
<p>客户端获得输入流FSDataInputStream以后调用read()函数开始读取数据</p>
<p>输入流根据前面的排序结果<br>选择距离客户端最近的数据节点<br>建立连接并读取数据 </p>
</blockquote>
<p>客户端获得输入流FSDataInputStream以后 调用read()函数开始读取数据</p>
<p>输入流根据前面的排序结果<br>选择距离客户端最近的数据节点<br>建立连接并读取数据</p>
<p>客户端获得输入流FSDataInputStream以后 调用read()函数开始读取数据</p>
<p>输入流根据前面的排序结果<br>选择距离客户端最近的数据节点<br>建立连接并读取数据</p>
</li>
</ul>
<ul>
<li><ol start="4">
<li><p>读取数据</p>
<blockquote>
<p>数据从数据节点读到客户端，当该数据块读取完毕时<br>FSDataInputStream关闭和该数据节点的连接 (可能没读完)</p>
</blockquote>
</li>
</ol>
</li>
<li><p>5.再次获取数据块信息（不一定发生）</p>
<blockquote>
<p>通过ClientProtocal.getBlockLocations()<br>查找下一个数据块 </p>
</blockquote>
</li>
<li><ol start="6">
<li>找到数据节点，读取数据</li>
</ol>
</li>
<li><ol start="7">
<li>FSDataInputStream 的close（）函数。</li>
</ol>
</li>
</ul>
<p><img src="/images/bigdata/a8.png"></p>
<h3 id="写文件具体过程："><a href="#写文件具体过程：" class="headerlink" title="写文件具体过程："></a>写文件具体过程：</h3><p><img src="/images/bigdata/a9.png"></p>
<blockquote>
<p>FSDataOutputStream, </p>
<p>客户端连续调用 create(),write(),close()等方法</p>
</blockquote>
<ul>
<li><ol>
<li>创建文件请求</li>
</ol>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//FileSystem.create()创建文件，由DistributedFileSystem创建输出流FSDataOutputStream,里面封装了DFSOutputStream</span></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem</span><br><span class="line">Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">FileSystem fs = FileSystem.get(conf);</span><br><span class="line">FSDataOutputStream out = fs.create(<span class="keyword">new</span> Path(uri));</span><br></pre></td></tr></table></figure>


</blockquote>
</li>
<li><ol start="2">
<li><p>创建文件元数据 </p>
<blockquote>
<p>RPC远程调用名称节点<br>在文件系统的命名空间中新建一个文件<br>名称节点会执行一些检查（文件是否存在，客户端权限） </p>
<p>远程方法调用结束后，DistributedFileSystem 会利用DFSOutputStream来实例化FSDataOutputStream,返回给客户端，来使用以达写入数据。</p>
</blockquote>
</li>
</ol>
</li>
<li><ol start="3">
<li>写入数据，通过调用write()</li>
</ol>
</li>
<li><ol start="4">
<li><p>写入数据包</p>
<blockquote>
<p>数据被分成一个个分包<br>分包被放入DFSOutputStream对象的内部队列<br>DFSOutputStream向名称节点申请<br>保存数据块的若干数据节点 </p>
<p><strong>流水性复制</strong>：数据由数据节点形成数据管道来一个个复制，流水线，再由数据节点来一个个通知写入成功。以达第5步。</p>
</blockquote>
</li>
</ol>
</li>
<li><ol start="5">
<li><p>接收确认 包</p>
<blockquote>
<p>这些数据节点形成一个数据流管道<br>队列中的分包最后被打包成数据包<br>发往数据流管道中的第一个数据节点<br>第一个数据节点将数据包发送到第二个节点<br>依此类推，形成“流水线复制” </p>
<p>确认则流程相反，直到客户端呢</p>
</blockquote>
</li>
</ol>
</li>
<li><ol start="6">
<li><p>关闭文件</p>
<blockquote>
<p>客户端通知，通过close关闭输入流</p>
</blockquote>
</li>
</ol>
</li>
</ul>
<h2 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h2><p>《大数据技术原理与应用 第三章 Hadoop分布式文件系统 学习指南》<br>访问地址： <a href="http://dblab.xmu.edu.cn/blog/290-2/">http://dblab.xmu.edu.cn/blog/290-2/</a> </p>
<p>备注：</p>
<blockquote>
<p>备注： Hadoop中有三种Shell命令方式：<br>hadoop fs适用于任何不同的文件系统，比如本地文件系统和HDFS文件系统<br>hadoop dfs只能适用于HDFS文件系统<br>hdfs dfs跟hadoop dfs的命令作用一样，也只能适用于HDFS文件系统 </p>
</blockquote>
<h1 id="分布式数据库HBase"><a href="#分布式数据库HBase" class="headerlink" title="分布式数据库HBase"></a>分布式数据库HBase</h1><blockquote>
<p>分布式数据库。</p>
</blockquote>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="BigTable"><a href="#BigTable" class="headerlink" title="BigTable"></a>BigTable</h3><p>谷歌公司的BigTable</p>
<p>BigTable是一个分布式存储系统<br>BigTable起初用于解决典型的互联网搜索问题 </p>
<blockquote>
<p>怎么使用呢？？</p>
<p>•<strong>建立互联网索引</strong><br>1 网络爬虫持续不断地抓取新页面，这些页面每页一行地存储到BigTable里<br>2 MapReduce计算作业运行在整张表上，生成索引，为网络搜索应用做准备</p>
<p>•<strong>搜索互联网</strong><br>3 用户发起网络搜索请求<br>4 网络搜索应用查询建立好的索引，从BigTable得到网页<br>5 搜索结果提交给用户 </p>
</blockquote>
<p><img src="/images/bigdata/a10.png"></p>
<blockquote>
<p>•BigTable是一个分布式存储系统  </p>
<p>底层是GFS，负责存储。</p>
<p>•利用谷歌提出的<strong>MapReduce分布</strong>式并行计算模型来处理海量数据<br>•使用谷歌分布式文件系统<strong>GFS作为底层数据存储</strong><br>•采用<strong>Chubby提供协同服务管理</strong></p>
<p>•可以扩展到PB级别的数据和上千台机器，具备广泛应用性、可扩展性、高性能和高可用性等特点<br>•谷歌的许多项目都存储在BigTable中，包括搜索、地图、财经、打印、社交网站Orkut、视频共享网站YouTube和博客网站Blogger等 </p>
</blockquote>
<h2 id="HBase-简介"><a href="#HBase-简介" class="headerlink" title="HBase 简介"></a>HBase 简介</h2><blockquote>
<p>HBase是一个高可靠、高性能、**<u>面向列</u><strong>、可伸缩的分布式数据库，是谷歌BigTable的开源实现，</strong>主要用来存储非结构化和半结构化的松散数据<strong>。 HBase的目标是处理非常庞大的表，可以通过</strong>水平扩展**的方式，利用廉价计算机集群处理由超过10亿行数据和数百万列元素组成的数据表 </p>
</blockquote>
<p><img src="/images/bigdata/a11.png"></p>
<p>HBase和BigTable的底层技术对应关系 </p>
<table>
<thead>
<tr>
<th></th>
<th>BigTable</th>
<th>HBase</th>
</tr>
</thead>
<tbody><tr>
<td>文件存储系统</td>
<td>GFS</td>
<td>HDFS</td>
</tr>
<tr>
<td>海量数据处理</td>
<td>MapReduce</td>
<td>Hadoop MapReduce</td>
</tr>
<tr>
<td>协同服务管理</td>
<td>Chubby</td>
<td>Zookeeper</td>
</tr>
</tbody></table>
<p><em>为什么需要HBase？？</em></p>
<p><img src="/images/bigdata/a12.png"></p>
<blockquote>
<p>•Hadoop可以很好地解决大规模数据的离线批量处理问题，但是，受限于HadoopMapReduce编程框架的<strong>高延迟</strong>数据处理机制，使得Hadoop无法满足大规模数据实时处理应用的需求<br>•HDFS面向批量访问模式，不是随机访问模式<br>•传统的通用关系型数据库无法应对在数据规模剧增时导致的系统扩展性和性能问题（分库分表也不能很好解决）<br>•传统关系数据库在数据结构变化时一般需要停机维护；空列浪费存储空间<br>•因此，业界出现了一类面向半结构化数据存储和处理的高可扩展、低写入/查询延迟的系统，例如，键值数据库、文档数据库和列族数据库（如BigTable和HBase等）<br>•HBase已经成功应用于互联网服务领域和传统行业的众多在线式数据分析处理系统中 </p>
</blockquote>
<p><em>HBase与传统关系数据库的对比分析 :</em></p>
<blockquote>
<p>• HBase与传统的关系数据库的区别主要体现在以下几个方面：</p>
<p>• （1）数据类型：关系数据库采用关系模型，具有丰富的数据类型和存储方式，HBase则采用了<strong>更加简单的数据模型，它把数据存储为未经解释的字符串</strong>，由开发人员读取后再处理。</p>
<p>• （2）数据操作：关系数据库中包含了丰富的操作，其中会涉及复杂的多表连接。HBase操作则<strong>不存在复杂的表与表之间的关系</strong>，只有简单的插入、查询、删除、清空等，因为HBase在设计上就避免了复杂的表和表之间的关系<br>• （3）存储模式：<strong>关系数据库是基于行模式存储的</strong>。 <strong>HBase是基于列存储的</strong>，每个列族都由几个文件保存，不同列族的文件是分离的 </p>
<p>• （4）数据索引：关系数据库通常可以针对不同列构建复杂的多个索引，以提高数据访问性能。 <strong>HBase只有一个索引——行键</strong>，通过巧妙的设计， HBase中的所有访问方法，或者通过行键访问，或者通过行键扫描，从而使得整个系统不会慢下来</p>
<p>• （5）数据维护：在关系数据库中，更新操作会用最新的当前值去替换记录中原来的旧值，旧值被覆盖后就不会存在。<strong>而在HBase中执行更新操作时，并不会删除数</strong> <strong>据旧的版本</strong>，而是生成一个新的版本，旧有的版本仍然保留，时间戳。</p>
<p>• （6）可伸缩性：<strong>关系数据库很难实现横向扩展</strong>，纵向扩展的空间也比较有限。相反， HBase和BigTable这些分布式数据库就是为了实现灵活的水平扩展而开发的，能够轻易地通过在集群中增加或者减少硬件数量来实现性能的伸缩 </p>
</blockquote>
<h3 id="HBase-访问接口"><a href="#HBase-访问接口" class="headerlink" title="HBase 访问接口"></a>HBase 访问接口</h3><p>编程一般用java api：或shell</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>特点</th>
<th>场合</th>
</tr>
</thead>
<tbody><tr>
<td>Native Java API</td>
<td>最常规和高效的访问方式</td>
<td>适合Hadoop MapReduce作业并行批 处理HBase表数据</td>
</tr>
<tr>
<td>HBase Shell</td>
<td>HBase的命令行工具，最简单 的接口</td>
<td>适合HBase管理使用</td>
</tr>
<tr>
<td>Thrift Gateway</td>
<td>利用Thrift序列化技术，支持 C++、 PHP、 Python等多种语 言</td>
<td>适合其他<strong>异构系统</strong>在线访问HBase表 数据</td>
</tr>
<tr>
<td><strong>REST</strong> Gateway</td>
<td>解除了语言限制</td>
<td>支持REST风格的Http API访问HBase</td>
</tr>
<tr>
<td>Pig</td>
<td>使用Pig Latin流式编程语言来 处理HBase中的数据（类似sql）</td>
<td><strong>适合做数据统计</strong></td>
</tr>
<tr>
<td>Hive</td>
<td>简单 （类似sql）</td>
<td>当需要以类似SQL语言方式来访问 HBase的时候</td>
</tr>
</tbody></table>
<h2 id="HBase数据模型"><a href="#HBase数据模型" class="headerlink" title="HBase数据模型"></a>HBase数据模型</h2><blockquote>
<p>关键词：</p>
<p>数据模型概述<br>数据模型相关概念<br>数据坐标<br>概念视图<br>物理视图<br>面向列的存储 </p>
</blockquote>
<ul>
<li><p>概述</p>
<p><img src="/images/bigdata/b1.png"></p>
<blockquote>
<p>• 表： HBase采用表来组织数据，表由行和列组成，列划分为若干个列族<br>• 行：每个HBase表都由若干行组成，每个行由行键（row key）来标识。<br>• 列族：一个HBase表被分组成许多“列族”（Column Family）的集合，它是基本的访问控制单元<br>• 列限定符：列族里的数据通过列限定符（或列）来定位<br>• 单元格：在HBase表中，通过行、列族和列限定符确定一个“单元格”（cell），单元格中存储的数据没有数据类型，总被视为字节数组byte[]<br>• 时间戳：每个单元格都保存着同一份数据的<strong>多个版本</strong>，这些版本采用时间戳进行索引 </p>
</blockquote>
</li>
</ul>
<blockquote>
<p>• HBase是一个稀疏、多维度、排序的映射表，这张表的索引是行键、列族、列限定符和时间戳<br>• 每个值是一个未经解释的字符串，没有数据类型<br>• 用户在表中存储数据，每一行都有一个可排序的行键和任意多的列<br>• 表在水平方向由一个或者多个列族组成，一个列族中可以包含任意多个列，同一个列族里面的数据存储在一起<br>• 列族<strong>支持动态扩展</strong>，可以很轻松地添加一个列族或列，无需预先定义列的数量以及类型，所有列均以字符串形式存储，用<strong>户需要自行进行数据类型转换</strong><br>• HBase中执行更新操作时，并不会删除数据旧的版本，而是生成一个新的版本，旧有的版本仍然保留（<strong>这是和HDFS只允许追加不允许修改的特性相关的</strong>,HBase架构在hdfs之上） </p>
</blockquote>
<ul>
<li>数据坐标</li>
</ul>
<blockquote>
<p>• HBase中需要根据行键、列族、列限定符和时间戳来确定一个单元格，因此，可以视为一个<strong>“四维坐标”</strong>，即[<strong>行键, 列族, 列限定符, 时间戳</strong>] </p>
</blockquote>
<table>
<thead>
<tr>
<th>键</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>[―201505003‖, ―Info‖, ―email‖, 1174184619081]</td>
<td>“xie@qq.com‖</td>
</tr>
<tr>
<td>[―201505003‖, ―Info‖, ―email‖, 1174184620720]</td>
<td>“you@163.com‖</td>
</tr>
</tbody></table>
<h3 id="概念视图与物理视图"><a href="#概念视图与物理视图" class="headerlink" title="概念视图与物理视图"></a>概念视图与物理视图</h3><ul>
<li>概念视图：我们看上去的结构</li>
</ul>
<p><img src="/images/bigdata/b2.png"></p>
<blockquote>
<p>概念上是<u>稀疏表</u>。</p>
</blockquote>
<ul>
<li><p>物理视图：实际存储</p>
<p><img src="/images/bigdata/b3.png"></p>
<blockquote>
<p>按列族存储，没有那么多的空格。</p>
<p>底层是按列族为单位进行存储。与行键，时间戳相分配结合。</p>
</blockquote>
</li>
</ul>
<h3 id="面向列的存储"><a href="#面向列的存储" class="headerlink" title="面向列的存储"></a>面向列的存储</h3><blockquote>
<p>面向行的数据库，与面向列的数据库。</p>
<p><img src="/images/bigdata/b4.png"></p>
</blockquote>
<p><strong>面向行的数据存储</strong>：</p>
<ul>
<li><p>优缺点：</p>
<blockquote>
<p>优: 一次写完整一行记录。事物型操作，OLTP系统。</p>
<p>缺: 要取出，扫描许多行，却只一些字段。<strong>列分析</strong>代价大</p>
<p><img src="/images/bigdata/b5.png"></p>
</blockquote>
</li>
</ul>
<p><strong>面向列的数据存储</strong>：</p>
<ul>
<li><blockquote>
<p>高数据压缩率（数据类型大多相似）。</p>
<p><img src="/images/bigdata/b6.png"></p>
</blockquote>
</li>
</ul>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><blockquote>
<p>HBase功能组件<br>表和Region<br>Region的定位 </p>
</blockquote>
<p><img src="/images/bigdata/b7.png"></p>
<ul>
<li><p>功能组件</p>
<blockquote>
<p>• HBase的实现包括三个主要的功能组件：<br>– （1）库函数：链接到每个客户端<br>– （2）一个Master主服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;• 主服务器Master负责管理和维护HBase表的分区信息，维护Region服务器列表，分配Region，负载均衡</span><br></pre></td></tr></table></figure>



<p>—（3）许多个Region服务器 </p>
<p>一个大的表被分为很多个Region</p>
<p><strong>Region</strong><br><strong>Region是表按照RowKey范围划分的不同的部分，相当于DBMS中的分区。同时Region也是表在集群中分布的最小单位，可以被分配到某一个Region Server上。</strong></p>
<p><strong>Region是HBase的表分区，是数据分片的概念。HBase中表有多个region分区组成。region由一组rowkey有序的行组成。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;• Region服务器负责存储和维护分配给自己的Region，处理来自客户端的读写请求</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>• <strong>客户端并不是直接从Master主服务器上读取数据</strong>，而是在获得Region的存储位置信息后，直接从Region服务器上读取数据 </p>
<p>• 客户端并不依赖Master，<strong>而是通过Zookeeper来获得Region位置信息</strong>，大多数客户端甚至从来不和Master通信，这种设计方式使得Master负载很小 </p>
</blockquote>
</blockquote>
</li>
</ul>
<h3 id="表和Region"><a href="#表和Region" class="headerlink" title="表和Region"></a>表和Region</h3><p>**一个HBase表被划分成多个Region **：一个表可能在多个服务器上</p>
<p><img src="/images/bigdata/c1.png"></p>
<blockquote>
<p>•开始只有一个Region，后来不断分裂<br>•Region拆分操作非常快，接近瞬间，<strong>因为拆分之后的Region读取的仍然是原存储文件，</strong>(修改的之时指向哪里的区别)直到<strong>“合并</strong>”过程把存储文件异步地写到独立的文件之后，才会读取新文件 .</p>
<p><img src="/images/bigdata/c2.png"></p>
</blockquote>
<p>​    </p>
<p><strong>region的配置</strong>：</p>
<blockquote>
<p><strong>大小</strong>：</p>
<p>•每个Region默认大小是100MB到200MB（2006年以前的硬件配置）<br>•每个Region的最佳大小取决于单台服务器的有效处理能力<br>•目前每个Region最佳大小建议1GB-2GB（2013年以后的硬件配置）</p>
<p><strong>位置</strong>：</p>
<p>•<u>同一个Region不会被分拆到多个Region服务器（由Master）服务器来配置</u><br>•每个Region服务器存储10-1000个Region </p>
<p><img src="/images/bigdata/c3.png"></p>
</blockquote>
<p><strong>region定位问题</strong>：</p>
<blockquote>
<p>•元数据表，又名.META.表，存储了Region和Region服务器的映射关系 </p>
<p>构建一个元素据表，里面有两项内容；构成映射</p>
<ul>
<li>region  id</li>
<li>region 服务器 id</li>
</ul>
<p>随着数据增加，元素据表也会变得很大，<strong>他的存储也需要分裂成多个region，但是这样的话.meta表就分散开来了</strong>，所以我们得构造一个新表，也就是<code>-ROOT-</code>表</p>
<blockquote>
<p>•当HBase表很大时， .META.表也会被分裂成多个Region<br>•根数据表，又名-ROOT-表，<u>记录所有元数据的具体位置</u><br>•-ROOT-表<strong>只有唯一一个Region，名字是在程序中被写死的</strong><br>•<strong>Zookeeper文件记录了-ROOT-表的位置</strong> </p>
</blockquote>
<blockquote>
<p>类似B+树</p>
</blockquote>
<p><img src="/images/bigdata/c4.png"></p>
</blockquote>
<p><strong>客户端访问region</strong>：</p>
<p>-ROOT-的地址在zookeeper里，客户端先访问zookeeper。</p>
<p><strong>三级寻找过程</strong></p>
<table>
<thead>
<tr>
<th>层次</th>
<th>名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>第一层</td>
<td>Zookeeper文 件</td>
<td>记录了-ROOT-表的位置信息</td>
</tr>
<tr>
<td>第二层</td>
<td>-ROOT-表</td>
<td>记录了.META.表的Region位置信息 -ROOT-表只能有一个Region。通过-ROOT- 表，就可以访问.META.表中的数据</td>
</tr>
<tr>
<td>第三层</td>
<td>.META.表</td>
<td>记录了用户数据表的Region位置信息， .META.表可以有多个Region，保存了HBase 中所有用户数据表的Region位置信息</td>
</tr>
</tbody></table>
<p><strong>与内存相关</strong>：</p>
<blockquote>
<p>•<strong>为了加快访问速度， .META.表的全部Region都会被保存在内存中</strong> </p>
<p>•假设.META.表的<strong>每行（一个映射条目）在内存中大约占用1KB</strong>，并且每个Region限制为128MB，那么，上面的三层结构可以保存的用户数据表的Region数目的计算方法是：</p>
<ul>
<li>（-ROOT-表能够寻址的.META.表的Region个数）×（每个.META.表的 Region可以寻址的用户数据表的Region个数） </li>
<li>一个-ROOT-表最多只能有一个Region，也就是最多只能有128MB，按照每行（一个映射条目）占用1KB内存计算， 128MB空间可以容纳128MB/1KB=2^17行，也就是说，一个-ROOT- 表可以寻址2^17个.META.表的Region。 </li>
<li>同理，每个.META.表的 Region可以寻址的用户数据表的Region个数是128MB/1KB=2^17 .</li>
<li>最终，三层结构可以保存的Region数目是(128MB/1KB) × (128MB/1KB) = 2^34个Region </li>
</ul>
</blockquote>
<p><strong>客户端访问数据时的“三级寻址”</strong>:带来的问题<br>•为了加速寻址，<u>客户端会缓存位置信息，同时，需要解决缓存失效问题</u><br>•寻址过程客户端只需要询问Zookeeper服务器，不需要连接Master服务器 </p>
<blockquote>
<p>惰性解决方式： 碰到失效了，再重新寻一次址。</p>
</blockquote>
<h2 id="HBase-运行机制"><a href="#HBase-运行机制" class="headerlink" title="HBase 运行机制"></a>HBase 运行机制</h2><p><strong>HBase系统架构：</strong></p>
<p><img src="/images/bigdata/c5.png"></p>
<p>• 1. 客户端<br>– 客户端包含访问HBase的接口，同时在缓存中维护着已经访问过的Region位置信息，用来加快后续数据访问过程 </p>
<p>• 2. Zookeeper服务器:协同管理服务<br>– Zookeeper可以帮助选举出一个Master作为集群的总管，<strong>并保证在任何时刻总有唯一一个Master在运行，</strong>这就避免了Master的“单点失效”问题，Zookeeper是一个很好的集群管理工具，被大量用于分布式计算，提供配置维护、域名服务、分布式同步、组服务等。 </p>
<p>• 3. Master<br> • <strong>主服务器Master主要负责表和Region的管理工作</strong>：<br>– 管理用户对表的增加、删除、修改、查询等操作<br>– 实现不同Region服务器之间的负载均衡：重新分配Region，把重负载的放到轻负载的服务器上。<br>– 在Region分裂或合并后，负责重新调整Region的分布<br>– 对发生故障失效的Region服务器上的Region进行迁移 </p>
<p>• 4. Region服务器<br>– Region服务器是HBase中最核心的模块，负责维护分配给自己的Region，并响应用户的读写请求 </p>
<h3 id="Region服务器工作原理"><a href="#Region服务器工作原理" class="headerlink" title="Region服务器工作原理"></a>Region服务器工作原理</h3><p><strong>整体概况</strong> ：好多的Region服务器组成Region服务器集群</p>
<blockquote>
<p><img src="/images/bigdata/c6.png"></p>
<p>Region服务器是HBase最核心的模块，管理一系列的Region对象和一个HLog文件。</p>
<p>HLog：磁盘上面的记录文件，记录者所有更新操作。</p>
<p>每个Region又是由多个Store组成的，</p>
<p><strong>每个Store对应表中的一个列族存储</strong>，包含一个MemStore和若干个StoreFile：</p>
<blockquote>
<p>其中，<strong>MemStore是在内存中的缓存</strong>，<u>刷新满了之后再写到StoreFile中去</u>，保存最近跟新的数据，StoreFile是磁盘中的文件，结构是B+树结构，方便快速读取。<strong>StoreFile在底层的实现方式是HDFS文件系统的HFile</strong>，HFile的数据块通常使用压缩方式存储，压缩之后可以大大减少网络I/O和磁盘I/O.</p>
</blockquote>
</blockquote>
<h3 id="用户读取数据过程"><a href="#用户读取数据过程" class="headerlink" title="用户读取数据过程"></a>用户读取数据过程</h3><blockquote>
<p><img src="/images/bigdata/c7.png"></p>
<p>•用户<strong>写入数据时</strong>，被分配到相应Region服务器去执行<br>•用户数据首先被写入到MemStore和Hlog(为保证数据的安全和可恢复性)中<br>​    •只有当操作写入Hlog之后(也就是写入磁盘了)， commit()调用才会将其返回给客户端</p>
<p><img src="/images/bigdata/c8.png"></p>
<p>•当用<strong>户读取数据时</strong>， Region服务器会首先访问MemStore缓存，如果找不到，再去磁盘上面的StoreFile中寻找 </p>
</blockquote>
<h4 id="缓存刷新"><a href="#缓存刷新" class="headerlink" title="缓存刷新"></a>缓存刷新</h4><p><img src="/images/bigdata/c9.png"></p>
<p><strong>注意</strong>：一个Region服务器只有一个HLog文件。</p>
<blockquote>
<p>也就是，StoreFile与MemStore的关系了</p>
</blockquote>
<blockquote>
<p>•系统会周期性地把MemStore缓存里的内容刷写到磁盘的StoreFile文件中，清空缓存，并在Hlog里面写入一个标记<br>•<strong>每次刷写都生成一个新的StoreFile文件</strong>，因此，每个Store包含多个StoreFile文件 </p>
</blockquote>
<blockquote>
<p>•<strong>每个Region服务器都有一个自己的HLog 文件</strong>，每次启动都检查该文件，确认最近一次执行缓存刷新操作之后是否发生新的写入操作；如果发现更新，则先写入MemStore，再刷写到StoreFile，<strong>最后删除旧</strong> <strong>的Hlog文件，开始为用户提供服务</strong> </p>
</blockquote>
<h4 id="StoreFile的合并与分裂"><a href="#StoreFile的合并与分裂" class="headerlink" title="StoreFile的合并与分裂"></a>StoreFile的合并与分裂</h4><p>好多个storefile合并成一个strorefile：A，A再分裂成几个小strorefile</p>
<p>合并需要很大的资源，所以只有一定的阈值才会执行这个操作。</p>
<p><img src="/images/bigdata/c10.png"></p>
<blockquote>
<p>•<strong>每次刷写都生成一个新的StoreFile，数量太多，影响查找速度</strong><br>•调用Store.compact()把多个合并成一个<br>•合并操作比较耗费资源，只有数量达到一个阈值才启动合并 </p>
</blockquote>
<p><strong>合并又会出现问题：</strong>此时又会分裂，此时也就产生了Region的分裂。</p>
<p><img src="/images/bigdata/c12.png"></p>
<h5 id="Store工作原理"><a href="#Store工作原理" class="headerlink" title="Store工作原理"></a>Store工作原理</h5><blockquote>
<p>•Store是Region服务器的核心<br>•多个StoreFile合并成一个<br>•单个StoreFile过大时，又触发分裂操作， 1个父Region被分裂成两个子Region </p>
</blockquote>
<h4 id="HLog工作原理"><a href="#HLog工作原理" class="headerlink" title="HLog工作原理"></a>HLog工作原理</h4><p>考虑系统出错，而产生的日志方法。（<strong>处理的是HLog日志</strong>）</p>
<p><img src="/images/bigdata/c13.png"></p>
<blockquote>
<p>• 分布式环境必须要考虑系统出错。 HBase采用HLog保证系统恢复<br>• HBase系统为每个Region服务器配置了一个HLog文件，它是一种 <strong>预写式日志（Write Ahead Log）</strong>:先记录日志，才能写入缓存。<br>• 用户更新数据必须首先写入日志后，才能写入MemStore缓存，并且，直到MemStore缓存内容对应的日志已经写入磁盘，该缓存内容才能被刷写到磁盘 .</p>
<p><img src="/images/bigdata/c14.png"></p>
</blockquote>
<p><strong>zookeeper来知道哪里出问题</strong>：Zookeeper会实时监测每个Region服务器的状态，当某个Region服务器发生故障时， Zookeeper会通知Master 。</p>
<blockquote>
<p>怎么恢复呢？？？</p>
<ul>
<li>Master首先会处理该故障Region服务器上面遗留的HLog文件，这个遗留的HLog文件中包含了来自多个Region对象的日志记录 .</li>
<li><strong>系统会根据每条日志记录所属的Region对象对HLog数据进行拆分，</strong>分别放到相应Region对象的目录下，然后，再将失效的Region重新分配到可用的Region服务器中，并把与该Region对象相关的<strong>HLog日</strong> **志记录也发送给相应的Region服务器 .**（处理的是HLog日志）</li>
<li>Region服务器领取到分配给自己的Region对象以及与之相关的HLog日志记录以后，会重新做一遍日志记录中的各种操作，把日志记录中的数据写入到MemStore缓存中，然后，刷新到磁盘的StoreFile文件中，完成数据恢复 .</li>
</ul>
</blockquote>
<p><strong>• 共用日志优点（一台Region服务器只有一个HLog）：提高对表的写操作性能；缺点：恢复时需要分拆日志</strong> </p>
<blockquote>
<p>一个Region服务器只有一个HLog,而不是多个HLog，方便读取写入，不方便故障恢复。</p>
<p>但是主流不是故障恢复，毕竟故障不常有。</p>
</blockquote>
<h2 id="HBase-应用方案"><a href="#HBase-应用方案" class="headerlink" title="HBase 应用方案"></a>HBase 应用方案</h2><p><img src="/images/bigdata/c15.png"></p>
<h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><blockquote>
<ul>
<li>某些数据靠近在一起，时间靠近的数据放在一起。</li>
<li>事实性，读写性能比较高<ul>
<li>提升读写性能：设置HColumnDescriptor.setInMemory选项为True，以把相关的表放到Region服务器的缓存当中。根据需要来决定是否放入缓存。</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="行键："><a href="#行键：" class="headerlink" title="行键："></a>行键：</h4><blockquote>
<p><img src="/images/bigdata/c16.png"></p>
<p>行键是按照字典序存储，因此，设计行键时，要充分利用这个排序特点，将经常一起读取的数据存储到一块，将最近可能会被访问的数据放在一块。<br>举个例子：如果最近写入HBase表中的数据是最可能被访问的，可以考虑将时间戳作为行键的一部分，由于是字典序排序，所以可以使用Long.MAX_VALUE -timestamp作为行键，这样能保证新写入的数据在读取时可以被快速命中。 </p>
</blockquote>
<h4 id="InMemory-是否在内存中"><a href="#InMemory-是否在内存中" class="headerlink" title="InMemory 是否在内存中"></a>InMemory 是否在内存中</h4><blockquote>
<p>创建表的时候，可以通过HColumnDescriptor.setInMemory(true)将表放到Region服务器的缓存中，保证在读取的时候被cache命中。<br>•InMemory </p>
</blockquote>
<h4 id="Max-Version-最大版本数"><a href="#Max-Version-最大版本数" class="headerlink" title="Max Version 最大版本数"></a>Max Version 最大版本数</h4><blockquote>
<p>创建表的时候，可以通过HColumnDescriptor.setMaxVersions(int maxVersions)设置表中数据的最大版本，如果只需要保存最新版本的数据，那么可以设置setMaxVersions(1)。 </p>
</blockquote>
<p><img src="/images/bigdata/c17.png"></p>
<blockquote>
<p>时间过了很久还没到最大版本数，数据也没用了。</p>
<p><img src="/images/bigdata/c18.png"></p>
</blockquote>
<h4 id="Time-To-Live-自动删除数据，生命周期"><a href="#Time-To-Live-自动删除数据，生命周期" class="headerlink" title="Time To Live 自动删除数据，生命周期"></a>Time To Live 自动删除数据，生命周期</h4><blockquote>
<p>创建表的时候，可以通过HColumnDescriptor.setTimeToLive(int timeToLive)设置表中数据的存储生命期，过期数据将自动被删除，例如如果只需要存储最近两天的数据，那么可以设置setTimeToLive(2 * 24 * 60 * 60)。 </p>
</blockquote>
<h3 id="HBase性能监视"><a href="#HBase性能监视" class="headerlink" title="HBase性能监视"></a>HBase性能监视</h3><p><strong>工具</strong>：</p>
<p>•Master-status(自带)</p>
<blockquote>
<p>•HBase Master默认基于Web的UI服务端口为60010， HBase region服务器默 认基于Web的UI服务端口为60030.如果master运行在名为master.foo.com的主机中， mater的主页地址就是<code>http://master.foo.com:60010</code>，用户可以通过Web浏览器输入这个地址查看该页面<br>•可以查看HBase集群的当前状态 </p>
</blockquote>
<p>•Ganglia</p>
<blockquote>
<p>Ganglia是UC Berkeley发起的一个开源集群监视项目，用于监控系统性能 </p>
</blockquote>
<p>•OpenTSDB</p>
<blockquote>
<p>OpenTSDB可以从大规模的集群（包括集群中的网络设备、操作系统、应用程序）中获取相应的metrics并进行存储、索引以及服务，从而使得这些数据更容易让人理解，如web化，图形化等 </p>
</blockquote>
<p>•Ambari </p>
<blockquote>
<p>Ambari 的作用就是创建、管理、监视 Hadoop 的集群 </p>
</blockquote>
<h3 id="在HBase之上构建SQL引擎"><a href="#在HBase之上构建SQL引擎" class="headerlink" title="在HBase之上构建SQL引擎"></a>在HBase之上构建SQL引擎</h3><blockquote>
<p>使用sql语句操作HBase</p>
</blockquote>
<ul>
<li>NoSQL区别于关系型数据库的一点就是NoSQL不使用SQL作为查询语言，至于为何在NoSQL数据存储HBase上提供SQL接口，有如下原因： <ul>
<li>1.易使用。使用诸如SQL这样易于理解的语言，使人们能够更加轻松地使用HBase。</li>
<li>2.减少编码。使用诸如SQL这样更高层次的语言来编写，减少了编写的代码量。 </li>
</ul>
</li>
</ul>
<p><strong>如何构建</strong>：</p>
<p>方案：</p>
<ol>
<li>Hive整合HBase</li>
</ol>
<blockquote>
<p>Hive与HBase的整合功能从Hive0.6.0版本已经开始出现，利用两者对外的API接口互相通信，通信主要依靠hive_hbase-handler.jar工具包(Hive Storage Handlers)。由于HBase有一次比较大的版本变动，所以<strong>并不是每个版本的Hive都能和现有的HBase版本进行整合，所以在使用过程中特别注意的就是两者版本的一致性。</strong> </p>
</blockquote>
<ol start="2">
<li>Phoenix </li>
</ol>
<blockquote>
<p>Phoenix由Salesforce.com开源，是构建在Apache HBase之上的一个SQL<strong>中间层</strong>，可以让开发者在HBase上执行SQL查询。 </p>
</blockquote>
<h3 id="构建HBase二级索引"><a href="#构建HBase二级索引" class="headerlink" title="构建HBase二级索引"></a>构建HBase二级索引</h3><p><em>二级索引的概念：</em></p>
<blockquote>
<p>二级索引，又叫辅助索引</p>
<p><strong>关系数据库</strong>里，如学生表对学号字段进行 主索引（Primary Key),然后对姓名和学号字段等构建多个辅助索引或者说二级索引。</p>
<p><strong>而HBase</strong>只有<strong>一个针对行健</strong>的索引 。</p>
</blockquote>
<p><strong>访问HBase</strong>：</p>
<blockquote>
<p><img src="/images/bigdata/c19.png"></p>
<p>访问HBase表中的行，只有三种方式：<br>•通过单个行健访问<br>•通过一个行健的区间来访问<br>•全表扫描 </p>
</blockquote>
<p><u>实际上可能分析不同的列，那就需要索引了</u></p>
<p>所以，考虑构建二级索引</p>
<blockquote>
<p>使用其他产品为HBase行健提供索引功能：<br>•Hindex二级索引<br>•HBase+Redis<br>•HBase+solr<br>原理：采用HBase0.92版本之后引入的Coprocessor特性 ，而开发一些工具来构建</p>
</blockquote>
<p><img src="/images/bigdata/c20.png"></p>
<p><strong>Coprocessor</strong>:endpoint和observer， </p>
<h4 id="Coprocessor怎么构建二级索引"><a href="#Coprocessor怎么构建二级索引" class="headerlink" title="Coprocessor怎么构建二级索引"></a>Coprocessor怎么构建二级索引</h4><blockquote>
<p>•Coprocessor提供了两个实现： endpoint和observer， <strong>endpoint相当于关系型数据库的存储过程，而observer则相当于触发器</strong><br>•observer允许我们在记录put前后做一些处理，因此，而我们可以在插入数据时同步写入索引表 .</p>
<ul>
<li><p>优点</p>
<ul>
<li><blockquote>
<p>非侵入性：引擎构建在HBase之上，<br>既没有对HBase进行任何改动，也<br>不需要上层应用做任何妥协 </p>
</blockquote>
</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li><blockquote>
<p>每插入一条数据需要向索<br>引表插入数据，即耗时是双倍的，<br>对HBase的集群的压力也是双倍<br>的 </p>
</blockquote>
</li>
</ul>
</li>
</ul>
<p><strong><u>从而产生主表与索引表。</u></strong></p>
</blockquote>
<blockquote>
<ul>
<li>像华为通过Coprocessor的这种机制而开发的：Hindex</li>
</ul>
<p><img src="/images/bigdata/c21.png"></p>
<blockquote>
<p>Hindex 是华为公司开发的纯 Java 编写的HBase二级索引，兼容 Apache HBase 0.94.8。当前的特性如下：<br>•多个表索引<br>•多个列索引<br>•基于部分列值的索引 </p>
</blockquote>
<p><strong>注</strong>：索引表一般存储在磁盘中，而频发的更新索引表代价就很高。所以考虑以下方案</p>
<ul>
<li><p>Redis+HBase方案</p>
<blockquote>
<p>•Coprocessor构建二级索引<br>•Redis做客户端缓存<br>•将索引实时更新到Redis等KV系统中，定时从KV更新索引到HBase的索引表中 </p>
</blockquote>
<p><img src="/images/bigdata/c22.png"></p>
</li>
<li><p>Solr+HBase </p>
<blockquote>
<p>Solr是一个高性能，采用Java5开发，基于Lucene的全文搜索服务器。同时对其进行了扩展，提供了比Lucene更为丰富的查询语言，同时实现了可配置、可扩展并对查询性能进行了优化，并且提供了一个完善的功能管理界面，是一款非常优秀的全文搜索引擎。 Solr保存索引 。</p>
<p>​    Solr先构建对其他列的全文索引，再由搜索值对应一行的某个信息，从而找到那个值所对应信息的行键</p>
</blockquote>
<p><img src="/images/bigdata/c23.png"></p>
</li>
</ul>
</blockquote>
<h2 id="HBase安装和配置-shell"><a href="#HBase安装和配置-shell" class="headerlink" title="HBase安装和配置 shell"></a>HBase安装和配置 shell</h2><blockquote>
<p>HBase上机实践，请参考：《大数据原理与应用 第四章 分布式数据库HBase 学习指南》 <code>http://dblab.xmu.edu.cn/blog/588-2/ </code></p>
</blockquote>
<blockquote>
<p>安装完Hadoop时，只包含HDFS和MapReduce等核心组件，并不包含HBase，因此， HBase需要单独安装 </p>
</blockquote>
<blockquote>
<p>HBase 自己带了一个zookeeper 实验用就够了。</p>
<p>但是你也可以自己装一个zookeeper。</p>
</blockquote>
<h3 id="HBase安装"><a href="#HBase安装" class="headerlink" title="HBase安装"></a>HBase安装</h3><p>•下载安装包hbase-1.1.2-bin.tar.gz<br>•解压安装包hbase-1.1.2-bin.tar.gz至路径<code> /usr/local</code><br>•配置系统环境,将hbase下的bin目录添加到系统的path中 </p>
<blockquote>
<p><strong>启动关闭Hadoop和HBase的顺序一定是：</strong><br>启动Hadoop—&gt;启动HBase—&gt;关闭HBase—&gt;关闭Hadoop </p>
<p><code>HBASE_MANAGES_ZK=true，则由HBase自己管理Zookeeper </code></p>
</blockquote>
<h4 id="安装注意事项"><a href="#安装注意事项" class="headerlink" title="安装注意事项"></a>安装注意事项</h4><p><img src="/images/bigdata/d1.png"></p>
<h2 id="HBase-Shell-命令"><a href="#HBase-Shell-命令" class="headerlink" title="HBase Shell 命令"></a>HBase Shell 命令</h2><p><code>http://dblab.xmu.edu.cn/blog/install-hbase/</code></p>
<h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create <span class="string">&#x27;tablename&#x27;</span>,<span class="string">&#x27;l1&#x27;</span>,<span class="string">&#x27;l2&#x27;</span>,<span class="string">&#x27;l3&#x27;</span></span><br><span class="line"><span class="comment"># 表名，三个列名</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>list：列出HBase中所有的表信息 </p>
</blockquote>
<h4 id="put"><a href="#put" class="headerlink" title="put"></a>put</h4><blockquote>
<p>向表、行、列指定的单元格添加数据,一次只能为一个表的一行数据的一个列添加一个数据 </p>
</blockquote>
<h4 id="scan：浏览表的相关信息"><a href="#scan：浏览表的相关信息" class="headerlink" title="scan：浏览表的相关信息"></a>scan：浏览表的相关信息</h4><blockquote>
<p>在添加数据时， HBase会自动为添加的数据添加一个时间戳，当然，也可以在添<br>加数据时人工指定时间戳的值 </p>
</blockquote>
<h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><p>通过表名、行、列、时间戳、时间范围和版本号来获得相应单元格的值 </p>
<h4 id="enable-disable：使表有效或无效"><a href="#enable-disable：使表有效或无效" class="headerlink" title="enable/disable：使表有效或无效"></a>enable/disable：使表有效或无效</h4><h4 id="drop：删除表"><a href="#drop：删除表" class="headerlink" title="drop：删除表"></a>drop：删除表</h4><blockquote>
<p>首先必须让表失效！！！</p>
</blockquote>
<h3 id="Java-API编程实例"><a href="#Java-API编程实例" class="headerlink" title="Java API编程实例"></a>Java API编程实例</h3><p><code>http://dblab.xmu.edu.cn/blog/install-hbase/</code></p>
<h1 id="NoSQL数据库"><a href="#NoSQL数据库" class="headerlink" title="NoSQL数据库"></a>NoSQL数据库</h1><p>Not only SQL </p>
<h2 id="NoSQL简介"><a href="#NoSQL简介" class="headerlink" title="NoSQL简介"></a>NoSQL简介</h2><p>通常， NoSQL数据库具有以下几个特点：<br>（1）灵活的可扩展性，水平扩展<br>（2）灵活的数据模型<br>（3）与云计算紧密融合，根据负载调整服务器数量 </p>
<h3 id="为什么要有NoSQL"><a href="#为什么要有NoSQL" class="headerlink" title="为什么要有NoSQL"></a>为什么要有NoSQL</h3><p>1、 关系数据库已经无法满足Web2.0的需求。 主要表现在以下几个方面：<br>（1）无法满足海量数据的管理需求<br>（2）无法满足数据高并发的需求<br>（3）无法满足高可扩展性和高可用性的需求 </p>
<blockquote>
<p><u>MySQL集群是否可以完全解决问题？</u> </p>
<p>•复杂性：部署、管理、配置很复杂<br>•数据库复制： MySQL主备之间采用复制方式，只能是异步复制，当主库压力较大时可能产生较大延迟，主备切换可能会丢失最后一部分更新事务，这时往往需要人工介入，备份和恢复不方便<br>•扩容问题：如果系统压力过大需要增加新的机器，这个过程涉及数据重新划分，整个过程比较复杂，且容易出错<br>•动态数据迁移问题：如果某个数据库组压力过大，需要将其中部分数据迁移出去，迁移过程需要总控节点整体协调，以及数据库节点的配合。这个过程很难做到自动化 </p>
</blockquote>
<p>2、“One size fits all”模式很难适用于截然不同的业务场景<br>•关系模型作为统一的数据模型既被用于数据分析，也被用于在线业务。但这两者一个强调高吞吐，一个强调低延时，已经演化出完全不同的架构。用同一套模型来抽象显然是不合适的<br>•Hadoop就是针对数据分析<br>•MongoDB、 Redis等是针对在线业务，两者都抛弃了关系模型 </p>
<p>3、 关系数据库的关键特性包括完善的事务机制和高效的查询机制。但是，关系数据库引以为傲的两个关键特性，到了Web2.0时代却成了鸡肋，主要表现在以下几个方面： </p>
<p>（1） Web2.0网站系统通常不要求严格的数据库事务<br>（2） Web2.0并不要求严格的读写实时性<br>（3） Web2.0通常不包含大量复杂的SQL查询（去结构化，存储空间换取更好的查询性能） </p>
<p>4, 对网页的访问，每次都去读取数据库吗。以前使用的是动态网页静态化。面对高并发的情况无能为力。实时生成的数据对数据库的负载非常高。</p>
<pre><code>&gt;比如大公司的MySql集群。
&gt;
&gt;一开使只有一台服务器，数据多了之后采用主从模式,Master/Slave
&gt;
&gt;主服务器的数据通过同步或异步的方式将数据更新到备服务器当中。
&gt;
&gt;这样写负载到主服务器，读负载到备服务器中，实现读写负载分离。但这样也就只有两个服务器，中大型公司还是不够用。
&gt;
&gt;所以出现了分库，分表。但是麻烦。</code></pre>
<p>总结：关系型数据库在web2.0时代不大行啊。</p>
<h2 id="NoSQL与关系数据库的比较"><a href="#NoSQL与关系数据库的比较" class="headerlink" title="NoSQL与关系数据库的比较"></a>NoSQL与关系数据库的比较</h2><table>
<thead>
<tr>
<th>比较标准</th>
<th>RDBMS</th>
<th>NoSQL</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>数据库原理</td>
<td>完全支持</td>
<td>部分支持</td>
<td>RDBMS有关系代数理论作为基础 。NoSQL没有统一的理论基础</td>
</tr>
<tr>
<td>数据规模</td>
<td>大</td>
<td>超大</td>
<td>RDBMS很难实现横向扩展， 纵向扩展的空间也比较有限， 性能 会随着数据规模的增大而降低。 NoSQL可以很容易通过添加更多设备来支持更大规模的数据</td>
</tr>
<tr>
<td>数据库模式</td>
<td>固定</td>
<td>灵活</td>
<td>RDBMS需要定义数据库模式， 严格遵守数据定义和相关约束条 件。 NoSQL不存在数据库模式， 可以自由灵活定义并存储各种不同 类型的数据</td>
</tr>
<tr>
<td>查询效率</td>
<td>快</td>
<td>可以实现高效的简单 查询，但是不具备高 度结构化查询等特性， 复杂查询的性能不尽 人意</td>
<td>RDBMS借助于索引机制可以实现快速查询（包括记录查询和范 围查询） 。很多NoSQL数据库没有面向复杂查询的索引， 虽然NoSQL可以 使用MapReduce来加速查询， 但是， 在复杂查询方面的性能仍 然不如RDBMS</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>比较标准</th>
<th>RDBMS</th>
<th>NoSQL</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>一致性</td>
<td>强一致性</td>
<td>弱一致性</td>
<td>RDBMS严格遵守事务ACID模型， 可以保证事务强一致性 很多NoSQL数据库放松了对事务ACID四性的要求， 而是遵守 BASE模型， 只能保证最终一致性</td>
</tr>
<tr>
<td>数据完整性</td>
<td>容易实现</td>
<td>很难实现</td>
<td>任何一个RDBMS都可以很容易实现数据完整性， 比如通过主键 或者非空约束来实现实体完整性， 通过主键、 外键来实现参照 完整性， 通过约束或者触发器来实现用户自定义完整性 但是， 在NoSQL数据库却无法实现</td>
</tr>
<tr>
<td>扩展性</td>
<td>一般</td>
<td>好</td>
<td>RDBMS很难实现横向扩展， 纵向扩展的空间也比较有限 NoSQL在设计之初就充分考虑了横向扩展的需求， 可以很容易 通过添加廉价设备实现扩展</td>
</tr>
<tr>
<td>可用性</td>
<td>好</td>
<td>很好</td>
<td>RDBMS在任何时候都以保证数据一致性为优先目标， 其次才是 优化系统性能， 随着数据规模的增大， RDBMS为了保证严格的 一致性， 只能提供相对较弱的可用性 大多数NoSQL都能提供较高的可用性</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>比较标准</th>
<th>RDBMS</th>
<th>NoSQL</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>标准化</td>
<td>是</td>
<td>否</td>
<td>RDBMS已经标准化（SQL） NoSQL还没有行业标准， 不同的NoSQL数据库都有自己的查询 语言， 很难规范应用程序接口 StoneBraker认为： NoSQL缺乏统一查询语言， 将会拖慢NoSQL 发展</td>
</tr>
<tr>
<td>技术支持</td>
<td>高</td>
<td>低</td>
<td>RDBMS经过几十年的发展， 已经非常成熟， Oracle等大型厂商 都可以提供很好的技术支持 NoSQL在技术支持方面仍然处于起步阶段， 还不成熟， 缺乏有 力的技术支持</td>
</tr>
<tr>
<td>可维护性</td>
<td>复杂</td>
<td>复杂</td>
<td>RDBMS需要专门的数据库管理员(DBA)维护 NoSQL数据库虽然没有DBMS复杂， 也难以维护</td>
</tr>
</tbody></table>
<p><strong>总结</strong><br>（1）关系数据库<br>优势：以完善的关系代数理论作为基础，有严格的标准，支持事务ACID四性，借助索引机制可以实现高效的查询，技术成熟，有专业公司的技术支持劣势：可扩展性较差，无法较好支持海量数据存储，数据模型过于死板、无法较好支持Web2.0应用，事务机制影响了系统的整体性能等<br>（2） NoSQL数据库<br>优势：可以支持超大规模数据存储，灵活的数据模型可以很好地支持Web2.0应用，具有强大的横向扩展能力等劣势：缺乏数学理论基础，复杂查询性能不高，大都不能实现务强一致性，很难实现数据完整性，技术尚不成熟，缺乏专业团队的技术支持，维护较困难等 </p>
<blockquote>
<p>关系数据库和NoSQL数据库各有优缺点，彼此无法取代<br>•关系数据库应用场景：电信、银行等领域的关键业务系统，需要保证强事务一致性<br>•NoSQL数据库应用场景：互联网企业、传统企业的非关键业务（比如数据分析）<br>采用混合架构<br>•案例：亚马逊公司就使用不同类型的数据库来支撑它的电子商务应用<br>•对于“购物篮”这种临时性数据，采用键值存储会更加高效<br>•当前的产品和订单信息则适合存放在关系数据库中<br>•大量的历史订单信息则适合保存在类似MongoDB的文档数据库中 </p>
</blockquote>
<h2 id="四大类型"><a href="#四大类型" class="headerlink" title="四大类型"></a>四大类型</h2><p><img src="/images/bigdata/no1.png"></p>
<p><img src="/images/bigdata/no2.png"></p>
<p><img src="/images/bigdata/no3.png"></p>
<h3 id="键值数据库"><a href="#键值数据库" class="headerlink" title="键值数据库"></a>键值数据库</h3><table>
<thead>
<tr>
<th>相关产品</th>
<th>Redis、 Riak、 SimpleDB、 Chordless、 Scalaris、 Memcached</th>
</tr>
</thead>
<tbody><tr>
<td>数据模型</td>
<td>键/值对 键是一个字符串对象 值可以是任意类型的数据，比如整型、字符型、数组、列表、集合等</td>
</tr>
<tr>
<td>典型应用</td>
<td>涉及频繁读写、拥有简单数据模型的应用 内容缓存，<strong>比如会话、配置文件、参数、购物车等 存储配置和用户数据信息的移动应用</strong></td>
</tr>
<tr>
<td>优点</td>
<td>扩展性好，灵活性好，大量写操作时性能高</td>
</tr>
<tr>
<td>缺点</td>
<td>无法存储结构化信息，条件查询效率较低</td>
</tr>
<tr>
<td>不适用情形</td>
<td>不是通过键而是通过值来查：键值数据库根本没有通过值查询的途径 需要存储数据之间的关系：在键值数据库中，不能通过两个或两个以上的键来关联数据 需要事务的支持：在一些键值数据库中，产生故障时，不可以回滚</td>
</tr>
<tr>
<td>使用者</td>
<td>百度云数据库（Redis）、 GitHub（Riak）、 BestBuy（Riak）、 Twitter（Redis和Memcached）、 StackOverFlow（Redis）、 Instagram （Redis）、 Youtube（Memcached）、 Wikipedia （Memcached）</td>
</tr>
</tbody></table>
<p>Redis有时候会被人们称为“强化版的Memcached” 支持持久化、数据恢复、更多数据类型 </p>
<p><img src="/images/bigdata/no4.png"></p>
<blockquote>
<p><strong>总结</strong>：</p>
<p>不擅长通过值来查找。</p>
<p>实际应用中作为缓冲层。</p>
</blockquote>
<h3 id="列族数据库"><a href="#列族数据库" class="headerlink" title="列族数据库"></a>列族数据库</h3><table>
<thead>
<tr>
<th>相关产品</th>
<th>BigTable、 HBase、 Cassandra、 HadoopDB、 GreenPlum、 PNUTS</th>
</tr>
</thead>
<tbody><tr>
<td>数据模型</td>
<td>列族</td>
</tr>
<tr>
<td>典型应用</td>
<td>分布式数据存储与管理 数据在地理上分布于多个数据中心的应用程序 可以容忍副本中存在短期不一致情况的应用程序 拥有动态字段的应用程序 拥有潜在大量数据的应用程序，大到几百TB的数据</td>
</tr>
<tr>
<td>优点</td>
<td>查找速度快，可扩展性强，容易进行分布式扩展，复杂性低</td>
</tr>
<tr>
<td>缺点</td>
<td>功能较少， 大都不支持强事务一致性</td>
</tr>
<tr>
<td>不适用情形</td>
<td>需要ACID事务支持的情形， Cassandra等产品就不适用</td>
</tr>
<tr>
<td>使用者</td>
<td>Ebay（Cassandra）、 Instagram（Cassandra）、 NASA（Cassandra）、 Twitter （Cassandra and HBase）、 Facebook（HBase）、 Yahoo!（HBase）</td>
</tr>
</tbody></table>
<h3 id="文档数据库"><a href="#文档数据库" class="headerlink" title="文档数据库"></a>文档数据库</h3><blockquote>
<p>“文档”其实是一个数据记录，这个记录能够对包含的数据类型和内容进行“自我描述”。 XML文档、 HTML文档和JSON 文档就属于这一类。</p>
<p>SequoiaDB就是使用JSON格式的文档数据库，它的存储的数据是这样的： </p>
</blockquote>
<blockquote>
<p>•数据是不规则的，每一条记录包含了所有的有关“SequoiaDB”的信息而没有任何外部的引用，这条记录就是“自包含”的<br>•这使得记录很容易完全移动到其他服务器，因为这条记录的所有信息都包含在里面了，不需要考虑还有信息在别的表没有一起迁移走<br>•同时，因为在移动过程中，只有被移动的那一条记录（文档）需要操作，而不像关系型中每个有关联的表都需要锁住来保证一致性，这样一来ACID的保证就会变得更快速，读写的速度也会有很大的提升 </p>
</blockquote>
<table>
<thead>
<tr>
<th>相关产品</th>
<th>MongoDB、 CouchDB、 Terrastore、 ThruDB、 RavenDB、 SisoDB、 RaptorDB、 CloudKit、 Perservere、 Jackrabbit</th>
</tr>
</thead>
<tbody><tr>
<td>数据模型</td>
<td>键/值 值（value）是版本化的文档</td>
</tr>
<tr>
<td>典型应用</td>
<td>存储、索引并管理面向文档的数据或者类似的半结构化数据 比如，用于后台具有大量读写操作的网站、使用JSON数据结构的应用、使用嵌套结 构等非规范化数据的应用程序</td>
</tr>
<tr>
<td>优点</td>
<td>性能好（高并发） ，灵活性高，复杂性低，数据结构灵活 提供嵌入式文档功能，将经常查询的数据存储在同一个文档中 既可以根据键来构建索引，也可以根据内容构建索引</td>
</tr>
<tr>
<td>缺点</td>
<td>缺乏统一的查询语法</td>
</tr>
<tr>
<td>不适用情形</td>
<td>在不同的文档上添加事务。文档数据库并不支持文档间的事务，如果对这方面有需求 则不应该选用这个解决方案</td>
</tr>
<tr>
<td>使用者</td>
<td>百度云数据库（MongoDB）、 SAP（MongoDB）、 Codecademy （MongoDB）、 Foursquare （MongoDB）、 NBC News （RavenDB）</td>
</tr>
</tbody></table>
<blockquote>
<p><strong>总结</strong>：</p>
<p>自描述</p>
</blockquote>
<h3 id="图形数据库"><a href="#图形数据库" class="headerlink" title="图形数据库"></a>图形数据库</h3><table>
<thead>
<tr>
<th>相关产品</th>
<th>Neo4J、 OrientDB、 InfoGrid、 Infinite Graph、 GraphDB</th>
</tr>
</thead>
<tbody><tr>
<td>数据模型</td>
<td>图结构</td>
</tr>
<tr>
<td>典型应用</td>
<td>专门用于处理具有高度相互关联关系的数据，比较适合于社交网络、模式识别、依赖 分析、推荐系统以及路径寻找等问题</td>
</tr>
<tr>
<td>优点</td>
<td>灵活性高，支持复杂的图形算法，可用于构建复杂的关系图谱</td>
</tr>
<tr>
<td>缺点</td>
<td>复杂性高，只能支持一定的数据规模</td>
</tr>
<tr>
<td>使用者</td>
<td>Adobe（Neo4J）、 Cisco（Neo4J）、 T-Mobile（Neo4J）</td>
</tr>
</tbody></table>
<blockquote>
<p>•MySQL产生年代较早，而且随着LAMP大潮得以成熟。尽管其没有什么大的改进，但是新兴的互联网使用的最多的数据库<br>•MongoDB是个新生事物，提供更灵活的数据模型、异步提交、地理位置索引等五花十色的功能<br>•HBase是个“仗势欺人”的大象兵。依仗着Hadoop的生态环境，可以有很好的扩展性。但是就像象兵一样，使用者需要养一头大象(Hadoop),才能驱使他<br>•Redis是键值存储的代表，功能最简单。提供随机数据存储。就像一根棒子一样，没有多余的构造。但是也正是因此，它的伸缩性特别好。就像悟空手里的金箍棒，大可捅破天，小能成缩成针 </p>
</blockquote>
<h2 id="三大基石"><a href="#三大基石" class="headerlink" title="三大基石"></a>三大基石</h2><p><img src="/images/bigdata/no5.png"></p>
<h3 id="CAP-分布式架构的重要特性"><a href="#CAP-分布式架构的重要特性" class="headerlink" title="CAP:分布式架构的重要特性"></a>CAP:分布式架构的重要特性</h3><p>什么是cap</p>
<blockquote>
<ul>
<li><p>C（Consistency）： 一致性，是指任何一个读操作总是能够读到之前完成的写操作的结果，也就是在分布式环境中，多点的数据是一致的，或者说，所有节点在同一时间具有相同的数据</p>
</li>
<li><p>A:（Availability）： 可用性，是指快速获取数据，可以在确定的时间内返回操作结果，保证每个请求不管成功或者失败都有响应；</p>
</li>
<li><p>P（Tolerance of Network Partition）： 分区容忍性，是指当出现网络分区的情况时（即系统中的一部分节点无法和其他节点进行通信），分离的系统也能够正常运行，也就是说，系统中任意信息的丢失或失败不会影响系统的继续运作 </p>
</li>
</ul>
</blockquote>
<p>CAP理论告诉我们，一个分布式系统不可能同时满足一致性、可用性和分区容忍性这三个需求，最多只能同时满足其中两个，正所谓“鱼和熊掌不可兼得”。 </p>
<p><img src="/images/bigdata/no6.png"></p>
<h4 id="一个牺牲一致性来换取可用性的实例"><a href="#一个牺牲一致性来换取可用性的实例" class="headerlink" title="一个牺牲一致性来换取可用性的实例"></a>一个牺牲一致性来换取可用性的实例</h4><p>（a）初始状态 </p>
<p><img src="/images/bigdata/no7.png"></p>
<p>（b）正常执行过程 </p>
<p><img src="/images/bigdata/no8.png"></p>
<p>(c) 更新传播失败时的执行过程 </p>
<p><img src="/images/bigdata/no9.png"></p>
<h3 id="当处理CAP的问题时，可以有几个明显的选择："><a href="#当处理CAP的问题时，可以有几个明显的选择：" class="headerlink" title="当处理CAP的问题时，可以有几个明显的选择："></a>当处理CAP的问题时，可以有几个明显的选择：</h3><p>1.CA：也就是强调一致性（C）和可用性（A），放弃分区容忍性（P），最简单的做法是把所有与事务相关的内容都放到同一台机器上。很显然，这种做法会严重影响系统的可扩展性。传统的关系数据库（MySQL、 SQL Server和PostgreSQL），都采用了这种设计原则，因此，扩展性都比较差</p>
<p>2.CP：也就是强调一致性（C）和分区容忍性（P），放弃可用性（A），当出现网络分区的情况时，受影响的服务需要等待数据一致，因此在等待期间就无法对外提供服务</p>
<p>3.AP：也就是强调可用性（A）和分区容忍性（P），放弃一致性（C），允许系统返回不一致的数据 </p>
<p>不同产品在CAP理论下的不同设计原则 </p>
<p><img src="/images/bigdata/cap1.png"></p>
<blockquote>
<p><strong>总结</strong>：传统的关系型数据库都是放弃分区容忍性，而保证一致性与可用性。</p>
<p>分布式数据库：大部分NoSql，如Redis,MogoDB是放弃可用性，而保证一致性与分区容忍性</p>
</blockquote>
<h3 id="BASE"><a href="#BASE" class="headerlink" title="BASE"></a>BASE</h3><p>Basically Availble, Soft-state, Eventual consistency </p>
<p>先看ACID ：</p>
<blockquote>
<p>一个数据库事务具有ACID四性：</p>
<ul>
<li>A（Atomicity）：原子性，是指事务必须是原子工作单元，对于其数据修改，要么全都执行，要么全都不执行</li>
<li>C（Consistency）：一致性，是指事务在完成时，必须使所有的数据都保持一致状态</li>
<li>I（Isolation）：隔离性，是指由并发事务所做的修改必须与任何其它并发事务所做的修改隔离</li>
<li>D（Durability）：持久性，是指事务完成之后，它对于系统的影响是永久性的，该修改即使出现致命的系统故障也将一直保持 </li>
</ul>
</blockquote>
<p>再看BASE：</p>
<blockquote>
<p>BASE的基本含义是基本可用（Basically Availble）、软状态（Soft-state）和最终一致性（Eventual consistency）  </p>
<ul>
<li><p>基本可用<br>基本可用，是指一个分布式系统的一部分发生问题变得不可用时，其他部分仍然可以正常使用，也就是允许分区失败的情形出现</p>
</li>
<li><p>软状态<br>“软状态（soft-state）”是与“硬状态（hard-state）”相对应的一种提法。数据库保存的数据是“硬状态”时，可以保证数据一致性，即保证数据一直是正确的。“软状态”是指状态可以有一段时间不同步，具有一定的滞后性 </p>
</li>
<li><p>最终一致性</p>
<blockquote>
<p>​    一致性的类型包括强一致性和弱一致性，二者的主要区别在于高并发的数据访问操作下，后续操作是否能够获取最新的数据。对于强一致性而言，当执行完一次更新操作后，后续的其他读操作就可以保证读到更新后的最新数据；反之，如果不能保证后续访问读到的都是更新后的最新数据，那么就是弱一致性。</p>
<p>​    而最终一致性只不过是弱一致性的一种特例，允许后续的访问操作可以暂时读不到更新后的数据，但是经过一段时间之后，必须最终读到更新后的数据。</p>
<p>​    最常见的实现最终一致性的系统是DNS（域名系统）。一个域名更新操作根据配置的形式被分发出去，并结合有过期机制的缓存；最终所有的客户端可以看到最新的值 </p>
</blockquote>
</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th>ACID</th>
<th>BASE</th>
</tr>
</thead>
<tbody><tr>
<td>原子性(Atomicity)</td>
<td>基本可用(Basically Available)</td>
</tr>
<tr>
<td>一致性(Consistency)</td>
<td>软状态/柔性事务(Soft state)</td>
</tr>
<tr>
<td>隔离性(Isolation)</td>
<td>最终一致性 (Eventual consistency)</td>
</tr>
<tr>
<td>持久性 (Durable)</td>
<td>无</td>
</tr>
</tbody></table>
<blockquote>
<p>总结：</p>
<p>BASE:碱</p>
<p>ACID:酸</p>
</blockquote>
<h3 id="最终一致性"><a href="#最终一致性" class="headerlink" title="最终一致性"></a>最终一致性</h3><p>最终一致性根据更新数据后各进程访问到数据的时间和方式的不同，又可以区分为： </p>
<blockquote>
<ul>
<li><strong>因果一致性</strong>：如果进程A通知进程B它已更新了一个数据项，那么进程B的后续访问将获得A写入的最新值。而与进程A无因果关系的进程C的访问，仍然遵守一般的最终一致性规则</li>
<li><strong>“读己之所写”一致性</strong>：可以视为因果一致性的一个特例。当进程A自己执行一个更新操作之后，它自己总是可以访问到更新过的值，绝不会看到旧值</li>
<li><strong>单调读一致性</strong>：如果进程已经看到过数据对象的某个值，那么任何后续访问都不会返回在那个值之前的值 </li>
<li><strong>会话一致性</strong>：它把访问存储系统的进程放到会话（session）的上下文中，只要会话还存在，系统就保证“读己之所写”一致性。如果由于某些失败情形令会话终止，就要建立新的会话，而且系统保证不会延续到新的会话</li>
<li><strong>单调写一致性</strong>：系统保证来自同一个进程的写操作顺序执行。系统必须保证这种程度的一致性，否则就非常难以编程了 </li>
</ul>
</blockquote>
<p>如何实现各种类型的一致性？ </p>
<blockquote>
<p>对于分布式数据系统：</p>
<blockquote>
<p>•N — 数据复制的份数<br>•W — 更新数据是需要保证写完成的节点数<br>•R — 读取数据的时候需要读取的节点数</p>
<ul>
<li><p>如果W+R&gt;N，写的节点和读的节点重叠，则是强一致性。例如对于典型的一主一备同步复制的关系型数据库， N=2,W=2,R=1，则不管读的是主库还是备库的数据，都是一致的。一般设定是R＋W = N+1，这是保证强一致性的最小设定</p>
</li>
<li><p>如果W+R&lt;=N，则是弱一致性。例如对于一主一备异步复制的关系型数据库，N=2,W=1,R=1，则如果读的是备库，就可能无法读取主库已经更新过的数据，所以是弱一致性。 </p>
</li>
</ul>
</blockquote>
<p>对于分布式系统，为了保证高可用性，一般设置N&gt;=3。不同的N,W,R组合，是在可用性和一致性之间取一个平衡，以适应不同的应用场景。 </p>
<blockquote>
<p>•如果N=W,R=1，任何一个写节点失效，都会导致写失败，因此可用性会降低，但是由于数据分布的N个节点是同步写入的，因此可以保证强一致性。</p>
<blockquote>
<p>实例： HBase是借助其底层的HDFS来实现其数据冗余备份的。 HDFS采用的就是强一致性保证。在数据没有完全同步到N个节点前，写操作是不会返回成功的。也就是说它的W＝N，而读操作只需要读到一个值即可，也就是说它R＝1。</p>
</blockquote>
<p>•像Voldemort， Cassandra和Riak这些类Dynamo的系统，通常都允许用户按需要设置N， R， W三个值，即使是设置成W＋R&lt;= N也是可以的。也就是说他允许用户在强一致性和最终一致性之间自由选择。而在用户选择了最终一致性，或者是W&lt;N的强一致性时，则总会出现一段“各个节点数据不同步导致系统处理不一致的时间”。为了提供最终一致性的支持，这些系统会提供一些工具来使数据更新被最终同步到所有相关节点。 </p>
</blockquote>
</blockquote>
<h2 id="从NoSQL到NewSQL数据库"><a href="#从NoSQL到NewSQL数据库" class="headerlink" title="从NoSQL到NewSQL数据库"></a>从NoSQL到NewSQL数据库</h2><p>大数据引发数据处理架构变革 :</p>
<p><img src="/images/bigdata/no10.png"></p>
<p>关系数据库、 NoSQL和NewSQL数据库产品分类图 :</p>
<p><img src="/images/bigdata/no11.png"></p>
<h2 id="文档数据库MongoDB"><a href="#文档数据库MongoDB" class="headerlink" title="文档数据库MongoDB"></a>文档数据库MongoDB</h2><p>MongoDB指南：</p>
<p><code>http://www.runoob.com/mongodb/mongodb-tutorial.html </code></p>
<p><code>http://dblab.xmu.edu.cn/blog/115/ </code></p>
<blockquote>
<p>•MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。<br>•在高负载的情况下，添加更多的节点，可以保证服务器性能。<br>•MongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。<br>•MongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p>
<p><img src="/images/bigdata/no12.png"> </p>
</blockquote>
<p>主要特点 :</p>
<blockquote>
<p>•提供了一个面向文档存储，操作起来比较简单和容易<br>•可以设置任何属性的索引来实现更快的排序<br>•具有较好的水平可扩展性<br>•支持丰富的查询表达式，可轻易查询文档中内嵌的对象及数组<br>•可以实现替换完成的文档（数据）或者一些指定的数据字段<br>•MongoDB中的Map/Reduce主要是用来对数据进行批量处理和聚合操作<br>•支持各种编程语言:RUBY， PYTHON， JAVA， C++， PHP， C#等语言<br>•MongoDB安装简单 </p>
</blockquote>
<p>在mongodb中基本的概念是文档、集合、数据库 :</p>
<table>
<thead>
<tr>
<th>SQL术语/概念</th>
<th>MongoDB术语/概念</th>
<th>解释/说明</th>
</tr>
</thead>
<tbody><tr>
<td>database</td>
<td>database</td>
<td>数据库</td>
</tr>
<tr>
<td>table</td>
<td>collection</td>
<td>数据库表/集合</td>
</tr>
<tr>
<td>row</td>
<td>document</td>
<td>数据记录行/文档</td>
</tr>
<tr>
<td>column</td>
<td>field</td>
<td>数据字段/域</td>
</tr>
<tr>
<td>index</td>
<td>index</td>
<td>索引</td>
</tr>
<tr>
<td>table joins</td>
<td>表连接,MongoDB不支持</td>
<td></td>
</tr>
<tr>
<td>primary key</td>
<td>primary key</td>
<td>主键,MongoDB自动将_id 字段设置为主键</td>
</tr>
</tbody></table>
<p>一个实例：</p>
<p><img src="/images/bigdata/no13.png"></p>
<p>在一个关系型数据库中，一篇博客（包含文章内容、评论、评论的投票）会被打散在多张数据表中。在文档数据库MongoDB中，能用一个文档来表示一篇博客， 评论与投票作为文档数组，放在正文主文档中。这样数据更易于管<br>理，消除了传统关系型数据库中影响性能和水平扩展性的“JOIN”操作。 </p>
<blockquote>
<p><strong>数据库</strong><br>•一个mongodb中可以建立多个数据库。<br>•MongoDB的默认数据库为”db”，该数据库存储在data目录中。<br>•MongoDB的单个实例可以容纳多个独立的数据库，每一个都有自己的集合和权限，不同的数据库也放置在不同的文件中。<br><strong>文档</strong><br>文档是一个键值(key-value)对(即BSON)。 MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 MongoDB 非常突出的特点。一个简单的文档例子如下：<br>{“site” :“haha.cn” , “name” :“哈哈”} </p>
</blockquote>
<p>下表列出了 RDBMS 与 MongoDB 对应的术语： </p>
<table>
<thead>
<tr>
<th>RDBMS</th>
<th>MongoDB</th>
</tr>
</thead>
<tbody><tr>
<td>数据库</td>
<td>数据库</td>
</tr>
<tr>
<td>表格</td>
<td>集合</td>
</tr>
<tr>
<td>行</td>
<td>文档</td>
</tr>
<tr>
<td>列</td>
<td>字段</td>
</tr>
<tr>
<td>表联合</td>
<td>嵌入文档</td>
</tr>
<tr>
<td>主键</td>
<td>主键 (MongoDB 提供了 key 为 _id )</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>数据库服务和客户端</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>Mysqld/Oracle</td>
<td>mongod</td>
</tr>
<tr>
<td>mysql/sqlplus</td>
<td>mongo</td>
</tr>
</tbody></table>
<blockquote>
<p><strong>集合</strong><br>•集合就是 MongoDB 文档组，类似于 RDBMS （关系数据库管理系统：Relational Database Management System)中的表格。<br>•集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据都会有一定的关联性。<br>比如，我们可以将以下不同数据结构的文档插入到集合中：<br>{“site”:”<code>www.baidu.com</code>“}<br>{“site” :“dblab.xmu.edu.cn” , “name” :“厦门大学数据库实验室”}<br>{“site”:”<code>www.runoob.com&quot;,&quot;name&quot;:&quot;菜鸟教程&quot;,&quot;num&quot;:5</code>} </p>
</blockquote>
<h3 id="MongoDB-数据类型"><a href="#MongoDB-数据类型" class="headerlink" title="MongoDB 数据类型"></a>MongoDB 数据类型</h3><table>
<thead>
<tr>
<th>数据类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>String</td>
<td>字符串。存储数据常用的数据类型。在 MongoDB 中， UTF-8 编码的字符串才是合法的。</td>
</tr>
<tr>
<td>Integer</td>
<td>整型数值。用于存储数值。根据你所采用的服务器，可分为 32 位或 64 位。</td>
</tr>
<tr>
<td>Boolean</td>
<td>布尔值。用于存储布尔值（真/假）。</td>
</tr>
<tr>
<td>Double</td>
<td>双精度浮点值。用于存储浮点值。</td>
</tr>
<tr>
<td>Min/Max keys</td>
<td>将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比。</td>
</tr>
<tr>
<td>Arrays</td>
<td>用于将数组或列表或多个值存储为一个键。</td>
</tr>
<tr>
<td>Timestamp</td>
<td>时间戳。记录文档修改或添加的具体时间。</td>
</tr>
<tr>
<td>Object</td>
<td>用于内嵌文档。</td>
</tr>
<tr>
<td>Null</td>
<td>用于创建空值。</td>
</tr>
<tr>
<td>Symbol</td>
<td>符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。</td>
</tr>
<tr>
<td>Date</td>
<td>日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。</td>
</tr>
<tr>
<td>Object ID</td>
<td>对象 ID。用于创建文档的 ID。</td>
</tr>
<tr>
<td>Binary Data</td>
<td>二进制数据。用于存储二进制数据。</td>
</tr>
<tr>
<td>Code</td>
<td>代码类型。用于在文档中存储 JavaScript 代码。</td>
</tr>
<tr>
<td>Regular expression</td>
<td>正则表达式类型。用于存储正则表达式。</td>
</tr>
</tbody></table>
<h3 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h3><p>启动 MongoDB服务只需要在MongoDB安装目录的bin目录下执行’mongod’即可 </p>
<p>使用 MongoDB shell访问MongoDB</p>
<blockquote>
<p>mongodb://localhost<br>•使用 MongoDB shell 来连接 MongoDB 服务器<br>•使用用户名和密码连接登陆到指定数据库：<br>mongodb://admin:123456@localhost/test </p>
<p><strong>MongoDB 创建数据库</strong><br>MongoDB 创建数据库的语法格式如下：<br>use DATABASE_NAME<br>如果数据库不存在，则创建数据库，否则切换到指定数据库。<br>如果你想查看所有数据库，可以使用 show dbs 命令 </p>
<p><strong>创建集合</strong><br>MongoDB没有单独创建集合名的shell命令，在插入数据的时候，<br>MongoDB会自动创建对应的集合。 </p>
<p>**MongoDB 插入文档 **</p>
<p>文档的数据结构和JSON基本一样。<br>所有存储在集合中的数据都是BSON格式。<br>BSON是一种类JSON的一种二进制形式的存储格式,简称Binary JSON。<br>MongoDB 使用 insert() 或 save() 方法向集合中插入文档，语法如下：<br><code>db.COLLECTION_NAME.insert(document) </code></p>
</blockquote>
<p>使用Java程序访问 MongoDB </p>
<blockquote>
<p>环境配置<br>•在Java程序中如果要使用MongoDB，需要确保已经安装了Java环境及MongoDB JDBC 驱动。<br>•首先必须下载mongo jar包，下载地址： <code>https://github.com/mongodb/mongo-java-driver/downloads</code>, 请确保下载最新版本。<br>•需要将mongo.jar包含在你的 classpath 中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;（<span class="number">1</span>）连接数据库</span><br><span class="line">&gt;<span class="keyword">import</span> com.mongodb.MongoClient;</span><br><span class="line">&gt;……<span class="comment">//这里省略其他需要导入的包</span></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoDBJDBC</span></span>&#123;</span><br><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String args[] )</span></span>&#123;</span><br><span class="line">&gt;<span class="keyword">try</span>&#123;</span><br><span class="line"> <span class="comment">// 连接到 mongodb 服务</span></span><br><span class="line">MongoClient mongoClient = <span class="keyword">new</span> MongoClient( <span class="string">&quot;localhost&quot;</span> , <span class="number">27017</span> );</span><br><span class="line"><span class="comment">// 连接到数据库</span></span><br><span class="line">DB db = mongoClient.getDB( <span class="string">&quot;test&quot;</span> );</span><br><span class="line">System.out.println(<span class="string">&quot;Connect to database successfully&quot;</span>);</span><br><span class="line"><span class="keyword">boolean</span> auth = db.authenticate(myUserName, myPassword);</span><br><span class="line">System.out.println(<span class="string">&quot;Authentication: &quot;</span>+auth);</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">	System.err.println( e.getClass().getName() + <span class="string">&quot;: &quot;</span> + e.getMessage() );</span><br><span class="line"> 			&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;（<span class="number">2</span>）创建集合 可以使用com.mongodb.DB类中的createCollection()来创建集合</span><br><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoDBJDBC</span></span>&#123;</span><br><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String args[] )</span></span>&#123;</span><br><span class="line">&gt;<span class="keyword">try</span>&#123;</span><br><span class="line">&gt;<span class="comment">// 连接到 mongodb 服务</span></span><br><span class="line">&gt;MongoClient mongoClient = <span class="keyword">new</span> MongoClient( <span class="string">&quot;localhost&quot;</span> , <span class="number">27017</span> );</span><br><span class="line">&gt;<span class="comment">// 连接到数据库</span></span><br><span class="line">&gt;DB db = mongoClient.getDB( <span class="string">&quot;test&quot;</span> );</span><br><span class="line">&gt;System.out.println(<span class="string">&quot;Connect to database successfully&quot;</span>);</span><br><span class="line">&gt;<span class="keyword">boolean</span> auth = db.authenticate(myUserName, myPassword);</span><br><span class="line">&gt;System.out.println(<span class="string">&quot;Authentication: &quot;</span>+auth);</span><br><span class="line">&gt;DBCollection coll = db.createCollection(<span class="string">&quot;mycol&quot;</span>);</span><br><span class="line">&gt;System.out.println(<span class="string">&quot;Collection created successfully&quot;</span>);</span><br><span class="line">&gt;&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">&gt;System.err.println( e.getClass().getName() + <span class="string">&quot;: &quot;</span> + e.getMessage() );</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;（<span class="number">3</span>）插入文档 可以使用com.mongodb.DBCollection类的 insert() 方法来插入一个文档</span><br><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoDBJDBC</span></span>&#123;</span><br><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String args[] )</span></span>&#123;</span><br><span class="line">&gt;<span class="keyword">try</span>&#123; <span class="comment">// 连接到 mongodb 服务</span></span><br><span class="line">&gt;MongoClient mongoClient = <span class="keyword">new</span> MongoClient( <span class="string">&quot;localhost&quot;</span> , <span class="number">27017</span> );</span><br><span class="line">&gt;DB db = mongoClient.getDB( <span class="string">&quot;test&quot;</span> ); <span class="comment">// 连接到数据库</span></span><br><span class="line">&gt;System.out.println(<span class="string">&quot;Connect to database successfully&quot;</span>);</span><br><span class="line">&gt;<span class="keyword">boolean</span> auth = db.authenticate(myUserName, myPassword);</span><br><span class="line">&gt;System.out.println(<span class="string">&quot;Authentication: &quot;</span>+auth);</span><br><span class="line">&gt;DBCollection coll = db.getCollection(<span class="string">&quot;mycol&quot;</span>);</span><br><span class="line">&gt;System.out.println(<span class="string">&quot;Collection mycol selected successfully&quot;</span>);</span><br><span class="line">&gt;BasicDBObject doc = <span class="keyword">new</span> BasicDBObject(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;MongoDB&quot;</span>).</span><br><span class="line">&gt;append(<span class="string">&quot;description&quot;</span>, <span class="string">&quot;database&quot;</span>).</span><br><span class="line">&gt;append(<span class="string">&quot;likes&quot;</span>, <span class="number">100</span>).</span><br><span class="line">&gt;append(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;`http://www.w3cschool.cc/mongodb/`&quot;</span>).</span><br><span class="line">&gt;append(<span class="string">&quot;by&quot;</span>, <span class="string">&quot;w3cschool.cc&quot;</span>);</span><br><span class="line">&gt;coll.insert(doc);</span><br><span class="line">&gt;System.out.println(<span class="string">&quot;Document inserted successfully&quot;</span>);</span><br><span class="line">&gt;&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">&gt;System.err.println( e.getClass().getName() + <span class="string">&quot;: &quot;</span> + e.getMessage() );</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>




</blockquote>
<hr>
<h1 id="云数据库"><a href="#云数据库" class="headerlink" title="云数据库"></a>云数据库</h1><h1 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><h3 id="分布式并行编程"><a href="#分布式并行编程" class="headerlink" title="分布式并行编程"></a>分布式并行编程</h3><blockquote>
<p>•“摩尔定律”， CPU性能大约每隔18个月翻一番<br>•从2005年开始摩尔定律逐渐失效 ，需要处理的数据量快速增加，人们开始借助于分布式并行编程来提高程序性能<br>•分布式程序运行在大规模计算机集群上，可以并行执行大规模数据处理任务，从而获得海量的计算能力<br>•谷歌公司最先提出了分布式并行编程模型MapReduce， Hadoop MapReduce是它的开源实现，后者比前者使用门槛低很多 </p>
<blockquote>
<p>问题：在MapReduce出现之前，已经有像MPI这样非常成熟的并行计算框架了，那么为什么Google还需要MapReduce？ MapReduce相较于传统的并行计算框架有什么优势？ </p>
<table>
<thead>
<tr>
<th>传统并行计算框架</th>
<th>MapReduce</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>集群架构/容错性</td>
<td>共享式(共享内存/共享存储)，容错性差</td>
<td>非共享式，容错性好</td>
</tr>
<tr>
<td>硬件/价格/扩展性</td>
<td>刀片服务器、高速网、 SAN，价格贵， 扩展性差</td>
<td>普通PC机，便宜，扩展性好</td>
</tr>
<tr>
<td>编程/学习难度</td>
<td>what-how，难</td>
<td>what，简单</td>
</tr>
<tr>
<td>适用场景</td>
<td>实时、细粒度计算、计算密集型</td>
<td>批处理、非实时、数据密集型</td>
</tr>
</tbody></table>
</blockquote>
</blockquote>
<h3 id="MapReduce模型简介"><a href="#MapReduce模型简介" class="headerlink" title="MapReduce模型简介"></a>MapReduce模型简介</h3><blockquote>
<p>•MapReduce将复杂的、运行于大规模集群上的并行计算过程高度地抽象到了两个函数： Map和Reduce<br>•编程容易，不需要掌握分布式并行编程细节，也可以很容易把自己的程序运行在分布式系统上，完成海量数据的计算<br>•MapReduce采用“分而治之”策略，一个存储在分布式文件系统中的大规模数据集，会被切分成许多独立的分片（split），这些分片可以被多个Map任务并行处理<br>•MapReduce设计的一个理念就是“计算向数据靠拢”，而不是“数据向计算靠拢”，因为，移动数据需要大量的网络传输开销<br>•MapReduce框架采用了Master/Slave架构，包括一个Master和若干个Slave。Master上运行JobTracker， Slave上运行TaskTracker<br>•Hadoop框架是用Java实现的，但是， MapReduce应用程序则不一定要用Java来写 </p>
</blockquote>
<h3 id="Map和Reduce函数"><a href="#Map和Reduce函数" class="headerlink" title="Map和Reduce函数"></a>Map和Reduce函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>输入</th>
<th>输出</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Map</td>
<td>&lt;k1,v1&gt; 如： &lt;行号,”a b c”&gt;</td>
<td>List(&lt;k2,v2&gt;) 如： &lt;“a”,1&gt; &lt;“b”,1&gt; &lt;“c”,1&gt;</td>
<td>1.将小数据集进一步解析成一批 &lt;key,value&gt;对，输入Map函数中进行处理 2.每一个输入的&lt;k1,v1&gt;会输出一批&lt;k2,v2&gt; 。 &lt;k 2,v2&gt;是计算的中间结果</td>
</tr>
<tr>
<td>Reduce</td>
<td>&lt;k 2,List(v2)&gt; 如： &lt;“a”,&lt;1,1,1&gt;&gt;</td>
<td>&lt;k 3,v3&gt; &lt;“a”,3&gt;</td>
<td>输入的中间结果&lt;k2,List(v2)&gt;中的List(v2) 表示是一批属于同一个k2的value</td>
</tr>
</tbody></table>
<h2 id="MapReduce体系结构"><a href="#MapReduce体系结构" class="headerlink" title="MapReduce体系结构"></a>MapReduce体系结构</h2><blockquote>
<p>MapReduce体系结构主要由四个部分组成，分别是： Client、 JobTracker、TaskTracker以及Task </p>
<p><img src="/images/bigdata/mp1.png"></p>
<blockquote>
<p>1） Client<br>•用户编写的MapReduce程序通过Client提交到JobTracker端<br>•用户可通过Client提供的一些接口查看作业运行状态</p>
<p>2） JobTracker<br>•JobTracker负责资源监控和作业调度<br>•JobTracker 监控所有TaskTracker与Job的健康状况，一旦发现失败，就将相应的任务转移到其他节点<br>•JobTracker 会跟踪任务的执行进度、资源使用量等信息，并将这些信息告诉任务调度器（TaskScheduler），而调度器会在资源出现空闲时，选择合适的任务去使用这些资源</p>
<p>3） TaskTracker<br>•TaskTracker 会周期性地通过“心跳”将本节点上资源的使用情况和任务的运行进度汇报给JobTracker，同时接收JobTracker 发送过来的命令并执行相应的操作（如启动新任务、杀死任务等）<br>•TaskTracker 使用“slot”等量划分本节点上的资源量（CPU、内存等）。一个Task 获取到一个slot 后才有机会运行，而Hadoop调度器的作用就是将各个TaskTracker上的空闲slot分配给Task使用。 slot 分为Map slot 和Reduce slot 两种，分别供MapTask 和Reduce Task使用</p>
<p>4） Task<br>Task 分为Map Task 和Reduce Task 两种，均由TaskTracker 启动 </p>
</blockquote>
</blockquote>
<h2 id="MapReduce工作流程"><a href="#MapReduce工作流程" class="headerlink" title="MapReduce工作流程"></a>MapReduce工作流程</h2><h3 id="工作流程概述"><a href="#工作流程概述" class="headerlink" title="工作流程概述"></a>工作流程概述</h3><p><img src="/images/bigdata/mp2.png"></p>
<p>•不同的Map任务之间不会进行通信<br>•不同的Reduce任务之间也不会发生任何信息交换<br>•用户不能显式地从一台机器向另一台机器发送消息<br>•所有的数据交换都是通过MapReduce框架自身去实现的 </p>
<h3 id="MapReduce各个执行阶段"><a href="#MapReduce各个执行阶段" class="headerlink" title="MapReduce各个执行阶段"></a>MapReduce各个执行阶段</h3><p><strong>关于Split（分片）</strong> </p>
<blockquote>
<p>HDFS 以固定大小的block 为基本单位存储数据，而对于MapReduce 而言，其处理单位是split。 split 是一个逻辑概念，它只包含一些元数据信息，比如数据起始位置、数据长度、数据所在节点等。它的划分方法完全由用户自己决定。 </p>
</blockquote>
<p><strong>Map任务的数量</strong> </p>
<blockquote>
<p>•Hadoop为每个split创建一个Map任务， split 的多少决定了Map任务的数目。大多数情况下，理想的分片大小是一个HDFS块 </p>
</blockquote>
<p><strong>Reduce任务的数量</strong><br>•最优的Reduce任务个数取决于集群中可用的reduce任务槽(slot)的数目<br>•通常设置比reduce任务槽数目稍微小一些的Reduce任务个数（这样可<br>以预留一些系统资源处理可能发生的错误） </p>
<h3 id="Shuffle过程详解"><a href="#Shuffle过程详解" class="headerlink" title="Shuffle过程详解"></a>Shuffle过程详解</h3><p><img src="/images/bigdata/mp3.png"></p>
<blockquote>
<p><strong>map端的shuffle</strong></p>
<p>•每个Map任务分配一个缓存<br>•MapReduce默认100MB缓存<br>•设置溢写比例0.8<br>•分区默认采用哈希函数<br>•排序是默认的操作<br>•排序后可以合并（Combine）<br>•合并不能改变最终结果<br>•在Map任务全部结束之前进行归并<br>•归并得到一个大的文件，放在本地磁盘<br>•文件归并时，如果溢写文件数量大于预定值（默认是3）则可以再次启动Combiner，少于3不需要<br>•JobTracker会一直监测Map任务的执行，并通知Reduce任务来领取数据 </p>
<p><strong>合并（Combine）和归并（Merge）的区别：</strong><br><strong>两个键值对&lt;“a”,1&gt;和&lt;“a”,1&gt;，如果合并，会得到&lt;“a”,2&gt;，如果归并，会得到&lt;“a”,&lt;1,1&gt;&gt;</strong> </p>
</blockquote>
<blockquote>
<p><strong>Reduce端的Shuffle过程</strong> </p>
<p>•Reduce任务通过RPC向JobTracker询问Map任务是否已经完成，若完成，则领取数据<br>•Reduce领取数据先放入缓存，来自不同Map机器，先归并，再合并，写入磁盘<br>•多个溢写文件归并成一个或多个大文件，文件中的键值对是排序的<br>•当数据很少时，不需要溢写到磁盘，直接在缓存中归并，然后输出给Reduce </p>
<p><img src="/images/bigdata/mp4.png"></p>
</blockquote>
<blockquote>
<p>MapReduce应用程序执行过程 </p>
<p><img src="/images/bigdata/mp5.png"></p>
</blockquote>
<h2 id="实例分析：-WordCount"><a href="#实例分析：-WordCount" class="headerlink" title="实例分析： WordCount"></a>实例分析： WordCount</h2><h3 id="WordCount程序任务"><a href="#WordCount程序任务" class="headerlink" title="WordCount程序任务"></a>WordCount程序任务</h3><p>任务 </p>
<table>
<thead>
<tr>
<th>程序</th>
<th>WordCount</th>
</tr>
</thead>
<tbody><tr>
<td>输入</td>
<td>一个包含大量单词的文本文件</td>
</tr>
<tr>
<td>输出</td>
<td>文件中每个单词及其出现次数（频数），并按照单词字母顺序排序，每 个单词和其频数占一行，单词和频数之间有间隔</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>输入</th>
<th>输出</th>
</tr>
</thead>
<tbody><tr>
<td>Hello World Hello Hadoop Hello MapReduce</td>
<td>Hadoop 1 Hello 3 MapReduce 1 World 1</td>
</tr>
</tbody></table>
<h3 id="WordCount设计思路"><a href="#WordCount设计思路" class="headerlink" title="WordCount设计思路"></a>WordCount设计思路</h3><blockquote>
<p>• 首先，需要检查WordCount程序任务是否可以采用MapReduce来实现<br>• 其次，确定MapReduce程序的设计思路<br>• 最后，确定MapReduce程序的执行过程 </p>
</blockquote>
<h3 id="一个WordCount执行过程的实例"><a href="#一个WordCount执行过程的实例" class="headerlink" title="一个WordCount执行过程的实例"></a>一个WordCount执行过程的实例</h3><p>Map过程示意图 :</p>
<p>![](/images/bigdata/mp6</p>
<p>用户没有定义Combiner时的Reduce过程示意图 :</p>
<p>![](/images/bigdata/mp7</p>
<p>用户有定义Combiner时的Reduce过程示意图 :</p>
<p>![](/images/bigdata/mp8</p>
<h2 id="MapReduce的具体应用"><a href="#MapReduce的具体应用" class="headerlink" title="MapReduce的具体应用"></a>MapReduce的具体应用</h2><p>MapReduce可以很好地应用于各种计算问题<br>• 关系代数运算（选择、投影、并、交、差、连接）<br>• 分组与聚合运算<br>• 矩阵-向量乘法<br>• 矩阵乘法 </p>
<h3 id="用MapReduce实现关系的自然连接"><a href="#用MapReduce实现关系的自然连接" class="headerlink" title="用MapReduce实现关系的自然连接"></a>用MapReduce实现关系的自然连接</h3><p><img src="/images/bigdata/mp10.png"></p>
<blockquote>
<p>• 假设有关系R(A， B)和S(B,C)，对二者进行自然连接操作<br>• 使用Map过程，把来自R的每个元组&lt;a,b&gt;转换成一个键值对&lt;b, &lt;R,a&gt;&gt;，其中的键就是属性B的值。把关系R包含到值中，这样做使得我们可以在Reduce阶段，只把那些来自R的元组和来自S的元组进行匹配。类似地，使用Map过程，把来自S的每个元组&lt;b,c&gt;，转换成一个键值对&lt;b,&lt;S,c&gt;&gt;<br>• 所有具有相同B值的元组被发送到同一个Reduce进程中， Reduce进程的任务是，把来自关系R和S的、具有相同属性B值的元组进行合并<br>• Reduce进程的输出则是连接后的元组&lt;a,b,c&gt;，输出被写到一个单独的输出文件中 </p>
<p><img src="/images/bigdata/mp11.png"></p>
</blockquote>
<h2 id="MapReduce编程实践"><a href="#MapReduce编程实践" class="headerlink" title="MapReduce编程实践"></a>MapReduce编程实践</h2><p>任务：</p>
<p><img src="/images/bigdata/mp9.png"></p>
<p><code>http://dblab.xmu.edu.cn/blog/631-2/ </code></p>
<h1 id="数据仓库Hive"><a href="#数据仓库Hive" class="headerlink" title="数据仓库Hive"></a>数据仓库Hive</h1><h2 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h2><p><img src="/images/bigdata/hive1.png"></p>
<p>数据仓库（Data Warehouse）是一个面向主题的（Subject Oriented）、集成的（Integrated）、相对稳定的（Non-Volatile）、反映历史变化（Time Variant）的数据集合，用于支持管理决策。 </p>
<p><strong>传统数据仓库面临的挑战</strong></p>
<p>（1）无法满足快速增长的海量数据存储需求<br>（2）无法有效处理不同类型的数据<br>（3） 计算和处理能力不足 </p>
<p><strong>Hive简介</strong></p>
<blockquote>
<p>•Hive是一个构建于Hadoop顶层的数据仓库工具<br>•支持大规模数据存储、分析，具有良好的可扩展性<br>•某种程度上可以看作是用户编程接口，本身不存储和处理数据<br>•依赖分布式文件系统HDFS存储数据<br>•依赖分布式并行计算模型MapReduce处理数据<br>•定义了简单的类似SQL的查询语言——HiveQL<br>•用户可以通过编写的HiveQL语句运行MapReduce任务<br>•可以很容易把原来构建在关系数据库上的数据仓库应用程序移植到Hadoop平台上<br>•是一个可以提供有效、合理、直观组织和使用数据的分析工具 </p>
</blockquote>
<blockquote>
<p><strong>Hive具有的特点非常适用于数据仓库</strong> </p>
<p>•采用批处理方式处理海量数据<br>•Hive需要把HiveQL语句转换成MapReduce任务进行运行<br>•数据仓库存储的是静态数据，对静态数据的分析适合采用批处理方式，不需要快速响应给出结果，而且数据本身也不会频繁变化<br>•提供适合数据仓库操作的工具<br>•Hive本身提供了一系列对数据进行提取、转换、加载（ETL）的工具，可以存储、查询和分析存储在Hadoop中的大规模数据<br>•这些工具能够很好地满足数据仓库各种应用场景 </p>
</blockquote>
<p><strong>Hive与Hadoop生态系统中其他组件的关系</strong></p>
<blockquote>
<p>•Hive依赖于HDFS 存储数据<br>•Hive依赖于MapReduce 处理数据<br>•在某些场景下Pig可以作为Hive的替代工具<br>•HBase 提供数据的实时访问 </p>
<p><img src="/images/bigdata/hive2.png"></p>
</blockquote>
<p><strong>Hive与传统数据库的对比分析</strong></p>
<blockquote>
<p>• Hive在很多方面和传统的关系数据库类似，但是它的底层依赖的是HDFS和MapReduce，所以在很多方面又有别于传统数据库 </p>
<table>
<thead>
<tr>
<th>对比项目</th>
<th>Hive</th>
<th>传统数据库</th>
</tr>
</thead>
<tbody><tr>
<td>数据插入</td>
<td>支持批量导入</td>
<td>支持单条和批量导入</td>
</tr>
<tr>
<td>数据更新</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>索引</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>分区</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>执行延迟</td>
<td>高</td>
<td>低</td>
</tr>
<tr>
<td>扩展性</td>
<td>好</td>
<td>有限</td>
</tr>
</tbody></table>
</blockquote>
<p><strong>Hive在企业中的部署和应用</strong> </p>
<p><img src="/images/bigdata/hive3.png"></p>
<h2 id="Hive系统架构"><a href="#Hive系统架构" class="headerlink" title="Hive系统架构"></a>Hive系统架构</h2><p><img src="/images/bigdata/hive4.png"></p>
<blockquote>
<p>•用户接口模块包括CLI、HWI、 JDBC、 ODBC、Thrift Server<br>•驱动模块（Driver）包括编译器、优化器、执行器等，负责把HiveSQL语句转换成一系列MapReduce作业<br>•元数据存储模块（Metastore）是一个独立的关系型数据库（自带derby数据    库，或MySQL数据库） </p>
</blockquote>
<h2 id="Hive工作原理"><a href="#Hive工作原理" class="headerlink" title="Hive工作原理"></a>Hive工作原理</h2><h3 id="SQL语句转换成MapReduce作业的基本原理"><a href="#SQL语句转换成MapReduce作业的基本原理" class="headerlink" title="SQL语句转换成MapReduce作业的基本原理"></a>SQL语句转换成MapReduce作业的基本原理</h3><p><strong>join的实现原理</strong> </p>
<blockquote>
<p><img src="/images/bigdata/hive5.png"></p>
</blockquote>
<p><strong>group by的实现原理</strong> </p>
<blockquote>
<p><img src="/images/bigdata/hive6.png"><br>存在一个分组（Group By）操作，其功能是把表Score的不同片段按照rank和level的组合值进行合并，计算不同rank和level的组合值分别有几条记录：select rank, level ,count(*) as value from score group by rank, level </p>
</blockquote>
<h3 id="Hive中SQL查询转换成MapReduce作业的过程"><a href="#Hive中SQL查询转换成MapReduce作业的过程" class="headerlink" title="Hive中SQL查询转换成MapReduce作业的过程"></a>Hive中SQL查询转换成MapReduce作业的过程</h3><blockquote>
<p>•当用户向Hive输入一段命令或查询时， Hive需要与Hadoop交互工作来完成该操作：<br>​    •驱动模块接收该命令或查询编译器<br>​    •对该命令或查询进行解析编译<br>​    •由优化器对该命令或查询进行优化计算<br>​    •该命令或查询通过执行器进行执行 </p>
<blockquote>
<p><img src="/images/bigdata/hive7.png"></p>
<p>第1步：由Hive驱动模块中的编译器对用户输入的SQL语言进行词法和语法解析，将SQL语句转<br>化为抽象语法树的形式<br>第2步： 抽象语法树的结构仍很复杂，不方便直接翻译为MapReduce算法程序，因此，把抽象<br>语法书转化为查询块<br>第3步：把查询块转换成逻辑查询计划，里面包含了许多逻辑操作符<br>第4步：重写逻辑查询计划，进行优化，合并多余操作，减少MapReduce任务数量<br>第5步：将逻辑操作符转换成需要执行的具体MapReduce任务<br>第6步：对生成的MapReduce任务进行优化，生成最终的MapReduce任务执行计划<br>第7步：由Hive驱动模块中的执行器，对最终的MapReduce任务进行执行输出 </p>
<blockquote>
<p><strong>几点说明：</strong> </p>
<p>• 当启动MapReduce程序时， Hive本身是不会生成MapReduce算法程序的<br>• 需要通过一个表示“Job执行计划”的XML文件驱动执行内置的、原生的Mapper和Reducer模块<br>• Hive通过和JobTracker通信来初始化MapReduce任务，不必直接部署在JobTracker所在的管理节点上执行<br>• 通常在大型集群上，会有专门的网关机来部署Hive工具。网关机的作用主要是远程操作和管理节点上的JobTracker通信来执行任务<br>• 数据文件通常存储在HDFS上， HDFS由名称节点管理</p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="Hive-HA基本原理"><a href="#Hive-HA基本原理" class="headerlink" title="Hive HA基本原理"></a>Hive HA基本原理</h2><p><u>问题</u>： 在实际应用中， Hive也暴露出不稳定的问题<br><u>解决方案</u>： Hive HA（High Availability）<br>•由多个Hive实例进行管理的，这些Hive实例被纳入到一个资源池中，并由HAProxy提供一个统一的对外接口<br>•对于程序开发人员来说，可以把它认为是一台超强“Hive” </p>
<p><img src="/images/bigdata/hive8.png"></p>
<h2 id="Impala"><a href="#Impala" class="headerlink" title="Impala"></a>Impala</h2><h3 id="Impala简介"><a href="#Impala简介" class="headerlink" title="Impala简介"></a>Impala简介</h3><blockquote>
<p>• Impala是由Cloudera公司开发的新型查询系统，它提供SQL语义，能查询存储在Hadoop的HDFS和HBase上的PB级大数据， 在性能上比Hive高出3~30倍<br>• Impala的运行需要依赖于Hive的元数据<br>• Impala是参照 Dremel系统进行设计的<br>• Impala采用了与商用并行关系数据库类似的分布式查询引擎，可以直接与HDFS和HBase进行交互查询<br>• Impala和Hive采用相同的SQL语法、 ODBC驱动程序和用户接口 </p>
<p>Impala与其他组件关系 :</p>
<p><img src="/images/bigdata/hive9.png"></p>
</blockquote>
<h3 id="Impala系统架构"><a href="#Impala系统架构" class="headerlink" title="Impala系统架构"></a>Impala系统架构</h3><p>Impala和Hive、 HDFS、 HBase等工具是统一部署在一个Hadoop平台上的Impala主要由Impalad， State Store和CLI三部分组成 </p>
<p><img src="/images/bigdata/hive10.png"></p>
<blockquote>
<p>Impala主要由Impalad， State Store和CLI三部分组成 :</p>
<ul>
<li>Impalad<br>• 负责协调客户端提交的查询的执行<br>• 包含Query Planner、 Query Coordinator和Query Exec Engine三个模块<br>• 与HDFS的数据节点（HDFS DN）运行在同一节点上<br>• 给其他Impalad分配任务以及收集其他Impalad的执行结果进行汇总<br>• Impalad也会执行其他Impalad给其分配的任务，主要就是对本地HDFS和HBase里的部分数据进 </li>
<li>State Store<br>• 会创建一个statestored进程<br>• 负责收集分布在集群中各个Impalad进程的资源信息，用于查询调度 </li>
<li>CLI<br>• 给用户提供查询使用的命令行工具<br>• 还提供了Hue、 JDBC及ODBC的使用接口 </li>
</ul>
<p>说明： Impala中的元数据直接存储在Hive中。 Impala采用与Hive相同的元数据、 SQL语法、 ODBC驱动程序和用户接口，从而使得在一个Hadoop平台上，可以统一部署Hive和Impala等分析工具，同时支持批处理和实时查询 </p>
</blockquote>
<h3 id="Impala查询执行过程"><a href="#Impala查询执行过程" class="headerlink" title="Impala查询执行过程"></a>Impala查询执行过程</h3><p><img src="/images/bigdata/hive11.png"></p>
<blockquote>
<p>• 第0步， 当用户提交查询前， Impala先创建一个负责协调客户端提交的查询的Impalad进程， 该进程会向Impala State Store提交注册订阅信息，State Store会创建一个statestored进程， statestored进程通过创建多个<br>线程来处理Impalad的注册订阅信息。 </p>
<p>• 第1步， 用户通过CLI客户端提交一个查询到impalad进程， Impalad的Query Planner对SQL语句进行解析， 生成解析树；然后， Planner把这个查询的解析树变成若干PlanFragment， 发送到Query Coordinator</p>
<p>• 第2步， Coordinator通过从MySQL元数据库中获取元数据， 从HDFS的名称节点中获取数据地址， 以得到存储这个查询相关数据的所有数据节点。</p>
<p>• 第3步， Coordinator初始化相应impalad上的任务执行， 即把查询任务分配给所有存储这个查询相关数据的数据节点。</p>
<p>• 第4步， Query Executor通过流式交换中间输出， 并由Query Coordinator汇聚来自各个impalad的结果。</p>
<p>• 第5步， Coordinator把汇总后的结果返回给CLI客户端  </p>
</blockquote>
<h3 id="Impala与Hive的比较"><a href="#Impala与Hive的比较" class="headerlink" title="Impala与Hive的比较"></a>Impala与Hive的比较</h3><blockquote>
<p><img src="/images/bigdata/hive12.png"></p>
<p><strong>Hive与Impala的不同点总结如下：</strong> </p>
<p>Hive适合于长时间的批处理查询分析， 而Impala适合于实时交互式SQL查询</p>
<p>Hive依赖于MapReduce计算框架， Impala把执行计划表现为一棵完整的执行计划树，直接分发执行计划到各个Impalad执行查询</p>
<p>Hive在执行过程中， 如果内存放不下所有数据， 则会使用外存， 以保证查询能顺序执行完成， 而Impala在遇到内存放不下数据时， 不会利用外存， 所以Impala目前处理查询时会受到一定的限制 </p>
<p><strong>Hive与Impala的相同点总结如下</strong>： </p>
<p>Hive与Impala使用相同的存储数据池， 都支持把数据存储于HDFS和HBase中</p>
<p>Hive与Impala使用相同的元数据</p>
<p>Hive与Impala中对SQL的解释处理比较相似， 都是通过词法分析生成执行计划 </p>
</blockquote>
<p>总结<br>•Impala的目的不在于替换现有的MapReduce工具<br>•把Hive与Impala配合使用效果最佳<br>•可以先使用Hive进行数据转换处理，之后再使用Impala在Hive处理后的结果数据集上进行快速的数据分析 </p>
<h2 id="Hive编程实践"><a href="#Hive编程实践" class="headerlink" title="Hive编程实践"></a>Hive编程实践</h2><p><code>http://dblab.xmu.edu.cn/post/4331/ </code></p>
<p>`<a href="http://dblab.xmu.edu.cn/blog/hive-in-practice">http://dblab.xmu.edu.cn/blog/hive-in-practice</a>     </p>
<h3 id="hive配置"><a href="#hive配置" class="headerlink" title="hive配置"></a>hive配置</h3><p>Hive有三种运行模式，单机模式、伪分布式模式、分布式模式。均是通过修改hive-site.xml文件实现，如果 hive-site.xml文件不存在，我们可以参考$HIVE_HOME/conf目录下的hive-default.xml.template文件新建。 </p>
<h3 id="hive数据类型"><a href="#hive数据类型" class="headerlink" title="hive数据类型"></a>hive数据类型</h3><p>基本数据类型：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>TINYINT</td>
<td>1个字节（8位）有符号整数</td>
<td>1</td>
</tr>
<tr>
<td>SMALLINT</td>
<td>2个字节（16位）有符号整数</td>
<td>1</td>
</tr>
<tr>
<td>INT</td>
<td>4个字节（32位）有符号整数</td>
<td>1</td>
</tr>
<tr>
<td>BIGINT</td>
<td>8个字节（64位）有符号整数</td>
<td>1</td>
</tr>
<tr>
<td>FLOAT</td>
<td>4个字节（32位）单精度浮点数</td>
<td>1.0</td>
</tr>
<tr>
<td>DOUBLE</td>
<td>8个字节（64位）双精度浮点数</td>
<td>1.0</td>
</tr>
<tr>
<td>BOOLEAN</td>
<td>布尔类型， true/false</td>
<td>true</td>
</tr>
<tr>
<td>STRING</td>
<td>字符串，可以指定字符集</td>
<td>“xmu”</td>
</tr>
<tr>
<td>TIMESTAMP</td>
<td>整数、浮点数或者字符串</td>
<td>1327882394（Unix新纪元秒）</td>
</tr>
<tr>
<td>BINARY</td>
<td>字节数组</td>
<td>[0,1,0,1,0,1,0,1]</td>
</tr>
</tbody></table>
<p>集合数据类型：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>ARRAY</td>
<td>一组有序字段，字段的类型必须相同</td>
<td>Array(1,2)</td>
</tr>
<tr>
<td>MAP</td>
<td>一组无序的键/值对，键的类型必须是原子的，值可以是任何数 据类型，同一个映射的键和值的类型必须相同</td>
<td>Map(„a‟,1,‟b‟,2)</td>
</tr>
<tr>
<td>STRUCT</td>
<td>一组命名的字段，字段类型可以不同</td>
<td>Struct(„a‟,1,1,0)</td>
</tr>
</tbody></table>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. create: 创建数据库、表、视图</span><br><span class="line">• 创建数据库</span><br><span class="line">①创建数据库hive</span><br><span class="line">hive&gt; create database hive;</span><br><span class="line">②创建数据库hive。 因为hive已经存在， 所以会抛出异常</span><br><span class="line">加上if not exists关键字， 则不会抛出异常</span><br><span class="line">hive&gt; create database if not exists hive;</span><br><span class="line"></span><br><span class="line">• 创建表</span><br><span class="line">①在hive数据库中，创建表usr，含三个属性id， name， age</span><br><span class="line">hive&gt; use hive;</span><br><span class="line">hive&gt;create table if not exists usr(id bigint,name string,age int);</span><br><span class="line">②在hive数据库中，创建表usr，含三个属性id， name， age，存</span><br><span class="line">储路径为“&#x2F;usr&#x2F;local&#x2F;hive&#x2F;warehouse&#x2F;hive&#x2F;usr”</span><br><span class="line">hive&gt;create table if not exists hive.usr(id bigint,name string,age int)</span><br><span class="line">&gt;&#96;location ‘&#x2F;usr&#x2F;local&#x2F;hive&#x2F;warehouse&#x2F;hive&#x2F;usr’&#96;;</span><br><span class="line"></span><br><span class="line">• 创建视图</span><br><span class="line">①创建视图little_usr， 只包含usr表中id， age属性</span><br><span class="line">hive&gt;create view little_usr as select id,age from usr;</span><br><span class="line"></span><br><span class="line">2. show：查看数据库、表、视图</span><br><span class="line">• 查看数据库</span><br><span class="line">① 查看Hive中包含的所有数据库</span><br><span class="line">hive&gt; show databases;</span><br><span class="line">② 查看Hive中以h开头的所有数据库</span><br><span class="line">hive&gt;show databases like &#39;h.*&#39;;</span><br><span class="line">• 查看表和视图</span><br><span class="line">① 查看数据库hive中所有表和视图</span><br><span class="line">hive&gt; use hive;</span><br><span class="line">hive&gt; show tables;</span><br><span class="line">② 查看数据库hive中以u开头的所有表和视图</span><br><span class="line">hive&gt; show tables in hive like &#39;u.*&#39;;</span><br><span class="line"></span><br><span class="line">3. load：向表中装载数据</span><br><span class="line">① 把目录‟&#x2F;usr&#x2F;local&#x2F;data‟下的数据文件中的数据装载进usr表并覆盖原有数据</span><br><span class="line">hive&gt; load data local inpath „&#x2F;usr&#x2F;local&#x2F;data‟ overwrite into table usr;</span><br><span class="line">② 把目录‟&#x2F;usr&#x2F;local&#x2F;data‟下的数据文件中的数据装载进usr表不覆盖原有数据</span><br><span class="line">hive&gt; load data local inpath „&#x2F;usr&#x2F;local&#x2F;data‟ into table usr;</span><br><span class="line">③ 把分布式文件系统目录‟hdfs:&#x2F;&#x2F;master_server&#x2F;usr&#x2F;local&#x2F;data‟下的数据文件数</span><br><span class="line">据装载进usr表并覆盖原有数据</span><br><span class="line">hive&gt; load data inpath „hdfs:&#x2F;&#x2F;master_server&#x2F;usr&#x2F;local&#x2F;data‟</span><br><span class="line">&gt;overwrite into table usr;</span><br><span class="line"></span><br><span class="line">4. insert：向表中插入数据或从表中导出数据</span><br><span class="line">① 向表usr1中插入来自usr表的数据并覆盖原有数据</span><br><span class="line">hive&gt; insert overwrite table usr1</span><br><span class="line">&gt; select * from usr where age&#x3D;10;</span><br><span class="line">② 向表usr1中插入来自usr表的数据并追加在原有数据后</span><br><span class="line">hive&gt; insert into table usr1</span><br><span class="line">&gt; select * from usr</span><br><span class="line">&gt; where age&#x3D;10;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="hive优势"><a href="#hive优势" class="headerlink" title="hive优势"></a>hive优势</h3><p>WordCount算法在MapReduce中的编程实现和Hive中编程实现的<br>主要不同点：</p>
<ol>
<li>采用Hive实现WordCount算法需要编写较少的代码量<br> • 在MapReduce中， WordCount类由63行Java代码编写而成<br> • 在Hive中只需要编写7行代码</li>
<li>在MapReduce的实现中，需要进行编译生成jar文件来执行算法，而在Hive中不需要<br> • HiveQL语句的最终实现需要转换为MapReduce任务来执行，这都是由Hive框架自动完成的，用户不需要了解具体实现细节 </li>
</ol>
<h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><h2 id="部署hadoop"><a href="#部署hadoop" class="headerlink" title="部署hadoop"></a>部署hadoop</h2><p><code>http://dblab.xmu.edu.cn/blog/install-hadoop/</code></p>
<p>安装目录：/usr/local/</p>
<p>Hadoop 的配置文件位于 /usr/local/hadoop/etc/hadoop/ </p>
<p><strong>core-site.xml</strong> 和 <strong>hdfs-site.xml</strong> </p>
<blockquote>
<p><strong>hdfs-site.xml</strong>表示节点类型</p>
<p>core-site.xml中，hadoop.tmp.dir 参数表示临时文件目录。</p>
</blockquote>
<p>第一次配置后需要对NameNode执行格式化：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/hdfs namenode -format</span><br></pre></td></tr></table></figure>

<p>开启守护进程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./sbin/start-dfs.sh  <span class="comment">#start-dfs.sh是个完整的可执行文件，中间没有空格</span></span><br><span class="line"></span><br><span class="line">jps 判断是否启动成功</span><br></pre></td></tr></table></figure>



<p> <code>[http://localhost:50070](http://localhost:50070/)</code> 查看信息</p>
<hr>
<p>部署完了后的使用，测试</p>
<p>要使用 HDFS，首先需要在 HDFS 中创建用户目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/hdfs dfs -mkdir -p /user/hadoop</span><br><span class="line"></span><br><span class="line">====</span><br><span class="line"></span><br><span class="line">hadoop fs适用于任何不同的文件系统，比如本地文件系统和HDFS文件系统</span><br><span class="line">hadoop dfs只能适用于HDFS文件系统</span><br><span class="line">hdfs dfs跟hadoop dfs的命令作用一样，也只能适用于HDFS文件系统</span><br></pre></td></tr></table></figure>



<p>接着将 ./etc/hadoop 中的 xml 文件作为输入文件复制到分布式文件系统中，即将 /usr/local/hadoop/etc/hadoop 复制到分布式文件系统中的 /user/hadoop/input 中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/hdfs dfs -mkdir input</span><br><span class="line">./bin/hdfs dfs -put ./etc/hadoop/*.xml input</span><br><span class="line"><span class="comment">#./etc/hadoop/*.xml 是linux文件系统  input是hdfs的用户目录下的</span></span><br><span class="line"></span><br><span class="line">./bin/hdfs dfs -ls input查看</span><br></pre></td></tr></table></figure>



<p>伪分布式运行 MapReduce 作业：读取的是HDFS中的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-*.jar grep input output <span class="string">&#x27;dfs[a-z.]+&#x27;</span></span><br><span class="line"></span><br><span class="line">Hadoop 运行程序时，输出目录不能存在，否则会提示错误 “org.apache.hadoop.mapred.FileAlreadyExistsException: Output directory hdfs://localhost:9000/user/hadoop/output already exists” ，因此若要再次执行，需要执行如下命令删除 output 文件夹:</span><br><span class="line"><span class="comment">#再次运行此命令要删除output里面的内容。</span></span><br><span class="line">./bin/hdfs dfs -rm -r output    <span class="comment"># 删除 output 文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看结果</span></span><br><span class="line">./bin/hdfs dfs -cat output/*</span><br></pre></td></tr></table></figure>



<p>我们也可以将运行结果取回到本地：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -r ./output    <span class="comment"># 先删除本地的 output 文件夹（如果存在）</span></span><br><span class="line">./bin/hdfs dfs -get output ./output     <span class="comment"># 将 HDFS 上的 output 文件夹拷贝到本机 ,put则相反</span></span><br><span class="line">cat ./output/*</span><br></pre></td></tr></table></figure>

<p>停止hadoop   ./sbin/stop-dfs.sh</p>
<blockquote>
<p>运行程序时，输出目录不能存在</p>
<p>运行 Hadoop 程序时，为了防止覆盖结果，程序指定的输出目录（如 output）不能存在，否则会提示错误，因此运行前需要先删除输出目录。在实际开发应用程序时，可考虑在程序中加上如下代码，能在每次运行时自动删除输出目录，避免繁琐的命令行操作：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">Job job = <span class="keyword">new</span> Job(conf); </span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除输出目录 */</span></span><br><span class="line">Path outputPath = <span class="keyword">new</span> Path(args[<span class="number">1</span>]);</span><br><span class="line">outputPath.getFileSystem(conf).delete(outputPath, <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>

<p>测试完毕！</p>
<h2 id="HDFS-1"><a href="#HDFS-1" class="headerlink" title="HDFS"></a>HDFS</h2><p><code>&lt;http://dblab.xmu.edu.cn/blog/290-2/&gt;</code></p>
<h2 id="HBASE"><a href="#HBASE" class="headerlink" title="HBASE"></a>HBASE</h2><p><code>&lt;http://dblab.xmu.edu.cn/blog/install-hbase/&gt;</code></p>
<h2 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h2><p><code>&lt;http://dblab.xmu.edu.cn/blog/759-2/&gt;</code></p>
<h2 id="云数据库-1"><a href="#云数据库-1" class="headerlink" title="云数据库"></a>云数据库</h2><p><code>&lt;http://dblab.xmu.edu.cn/blog/322/&gt;</code></p>
<h2 id="MapReduce-1"><a href="#MapReduce-1" class="headerlink" title="MapReduce"></a>MapReduce</h2><p><code>&lt;http://dblab.xmu.edu.cn/blog/631-2/&gt;</code></p>
<h2 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h2><p><code>&lt;http://dblab.xmu.edu.cn/blog/1080-2/&gt;</code></p>
<h1 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h1><h2 id="replication："><a href="#replication：" class="headerlink" title="replication："></a>replication：</h2><p>the act of making copies。<br>[replɪ’keɪʃ(ə)n]</p>
<blockquote>
<p>n. 复制；回答；反响</p>
</blockquote>
<p><strong>分布式模式</strong>：</p>
<h2 id="region"><a href="#region" class="headerlink" title="region"></a>region</h2><p>域。</p>
<h1 id="编程问题"><a href="#编程问题" class="headerlink" title="编程问题"></a>编程问题</h1><h2 id="idea"><a href="#idea" class="headerlink" title="idea"></a>idea</h2><h3 id="添加jar"><a href="#添加jar" class="headerlink" title="添加jar"></a>添加jar</h3><p><code>https://blog.csdn.net/superinzaghi747/article/details/80539095</code></p>
<h1 id="数学知识"><a href="#数学知识" class="headerlink" title="数学知识"></a>数学知识</h1><p><code>https://segmentfault.com/a/1190000016080294</code></p>
<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="region概念："><a href="#region概念：" class="headerlink" title="region概念："></a>region概念：</h2><p><code>https://www.zhihu.com/question/26872988</code></p>
]]></content>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
</search>
